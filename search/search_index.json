{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"prefect-azure Welcome! prefect-azure is a collection of prebuilt Prefect tasks that can be used to quickly construct Prefect flows. Getting Started Python setup Requires an installation of Python 3.7+ We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation . Installation Install prefect-azure with pip pip install prefect-azure To use Blob Storage: pip install \"prefect-azure[blob_storage]\" To use Cosmos DB: pip install \"prefect-azure[cosmos_db]\" To use ML Datastore: pip install \"prefect-azure[ml_datastore]\" Write and run a flow from prefect import flow from prefect_azure import AzureBlobStorageCredentials from prefect_azure.blob_storage import blob_storage_download @flow def example_blob_storage_download_flow (): connection_string = \"connection_string\" blob_storage_credentials = AzureBlobStorageCredentials ( connection_string = connection_string , ) data = blob_storage_download ( blob = \"prefect.txt\" , container = \"prefect\" , azure_credentials = blob_storage_credentials , ) return data example_blob_storage_download_flow () Resources If you encounter and bugs while using prefect-azure , feel free to open an issue in the prefect-azure repository. If you have any questions or issues while using prefect-azure , you can find help in either the Prefect Discourse forum or the Prefect Slack community Development If you'd like to install a version of prefect-azure for development, clone the repository and perform an editable install with pip : git clone https://github.com/PrefectHQ/prefect-azure.git cd prefect-azure/ pip install -e \".[dev]\" # Install linting pre-commit hooks pre-commit install","title":"Home"},{"location":"#prefect-azure","text":"","title":"prefect-azure"},{"location":"#welcome","text":"prefect-azure is a collection of prebuilt Prefect tasks that can be used to quickly construct Prefect flows.","title":"Welcome!"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#python-setup","text":"Requires an installation of Python 3.7+ We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation .","title":"Python setup"},{"location":"#installation","text":"Install prefect-azure with pip pip install prefect-azure To use Blob Storage: pip install \"prefect-azure[blob_storage]\" To use Cosmos DB: pip install \"prefect-azure[cosmos_db]\" To use ML Datastore: pip install \"prefect-azure[ml_datastore]\"","title":"Installation"},{"location":"#write-and-run-a-flow","text":"from prefect import flow from prefect_azure import AzureBlobStorageCredentials from prefect_azure.blob_storage import blob_storage_download @flow def example_blob_storage_download_flow (): connection_string = \"connection_string\" blob_storage_credentials = AzureBlobStorageCredentials ( connection_string = connection_string , ) data = blob_storage_download ( blob = \"prefect.txt\" , container = \"prefect\" , azure_credentials = blob_storage_credentials , ) return data example_blob_storage_download_flow ()","title":"Write and run a flow"},{"location":"#resources","text":"If you encounter and bugs while using prefect-azure , feel free to open an issue in the prefect-azure repository. If you have any questions or issues while using prefect-azure , you can find help in either the Prefect Discourse forum or the Prefect Slack community","title":"Resources"},{"location":"#development","text":"If you'd like to install a version of prefect-azure for development, clone the repository and perform an editable install with pip : git clone https://github.com/PrefectHQ/prefect-azure.git cd prefect-azure/ pip install -e \".[dev]\" # Install linting pre-commit hooks pre-commit install","title":"Development"},{"location":"blob_storage/","text":"prefect_azure.blob_storage Tasks for interacting with Azure Blob Storage blob_storage_download ( container , blob , blob_storage_credentials ) async Downloads a blob with a given key from a given Blob Storage container. Parameters: Name Type Description Default blob str Name of the blob within this container to retrieve. required container str Name of the Blob Storage container to retrieve from. required blob_storage_credentials 'AzureBlobStorageCredentials' Credentials to use for authentication with Azure. required Returns: Type Description bytes A bytes representation of the downloaded blob. Example Download a file from a Blob Storage container from prefect import flow from prefect_azure import AzureBlobStorageCredentials from prefect_azure.blob_storage import blob_storage_download @flow def example_blob_storage_download_flow (): connection_string = \"connection_string\" blob_storage_credentials = AzureBlobStorageCredentials ( connection_string = connection_string , ) data = blob_storage_download ( container = \"prefect\" , blob = \"prefect.txt\" , blob_storage_credentials = blob_storage_credentials , ) return data example_blob_storage_download_flow () Source code in prefect_azure/blob_storage.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 @task async def blob_storage_download ( container : str , blob : str , blob_storage_credentials : \"AzureBlobStorageCredentials\" , ) -> bytes : \"\"\" Downloads a blob with a given key from a given Blob Storage container. Args: blob: Name of the blob within this container to retrieve. container: Name of the Blob Storage container to retrieve from. blob_storage_credentials: Credentials to use for authentication with Azure. Returns: A `bytes` representation of the downloaded blob. Example: Download a file from a Blob Storage container ```python from prefect import flow from prefect_azure import AzureBlobStorageCredentials from prefect_azure.blob_storage import blob_storage_download @flow def example_blob_storage_download_flow(): connection_string = \"connection_string\" blob_storage_credentials = AzureBlobStorageCredentials( connection_string=connection_string, ) data = blob_storage_download( container=\"prefect\", blob=\"prefect.txt\", blob_storage_credentials=blob_storage_credentials, ) return data example_blob_storage_download_flow() ``` \"\"\" logger = get_run_logger () logger . info ( \"Downloading blob from container %s with key %s \" , container , blob ) async with blob_storage_credentials . get_blob_client ( container , blob ) as blob_client : blob_obj = await blob_client . download_blob () output = await blob_obj . content_as_bytes () return output blob_storage_list ( container , blob_storage_credentials ) async List objects from a given Blob Storage container. Parameters: Name Type Description Default container str Name of the Blob Storage container to retrieve from. required blob_storage_credentials 'AzureBlobStorageCredentials' Credentials to use for authentication with Azure. required Returns: Type Description List ['BlobProperties'] A list of dict s containing metadata about the blob. Example from prefect import flow from prefect_azure import AzureBlobStorageCredentials from prefect_azure.blob_storage import blob_storage_list @flow def example_blob_storage_list_flow (): connection_string = \"connection_string\" blob_storage_credentials = AzureBlobStorageCredentials ( connection_string = \"connection_string\" , ) data = blob_storage_list ( container = \"container\" , blob_storage_credentials = blob_storage_credentials , ) return data example_blob_storage_list_flow () Source code in prefect_azure/blob_storage.py 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 @task async def blob_storage_list ( container : str , blob_storage_credentials : \"AzureBlobStorageCredentials\" , ) -> List [ \"BlobProperties\" ]: \"\"\" List objects from a given Blob Storage container. Args: container: Name of the Blob Storage container to retrieve from. blob_storage_credentials: Credentials to use for authentication with Azure. Returns: A `list` of `dict`s containing metadata about the blob. Example: ```python from prefect import flow from prefect_azure import AzureBlobStorageCredentials from prefect_azure.blob_storage import blob_storage_list @flow def example_blob_storage_list_flow(): connection_string = \"connection_string\" blob_storage_credentials = AzureBlobStorageCredentials( connection_string=\"connection_string\", ) data = blob_storage_list( container=\"container\", blob_storage_credentials=blob_storage_credentials, ) return data example_blob_storage_list_flow() ``` \"\"\" logger = get_run_logger () logger . info ( \"Listing blobs from container %s \" , container ) async with blob_storage_credentials . get_container_client ( container ) as container_client : blobs = [ blob async for blob in container_client . list_blobs ()] return blobs blob_storage_upload ( data , container , blob_storage_credentials , blob = None , overwrite = False ) async Uploads data to an Blob Storage container. Parameters: Name Type Description Default data bytes Bytes representation of data to upload to Blob Storage. required container str Name of the Blob Storage container to upload to. required blob_storage_credentials 'AzureBlobStorageCredentials' Credentials to use for authentication with Azure. required blob str Name of the blob within this container to retrieve. None overwrite bool If True , an existing blob with the same name will be overwritten. Defaults to False and an error will be thrown if the blob already exists. False Returns: Type Description str The blob name of the uploaded object Example Read and upload a file to a Blob Storage container from prefect import flow from prefect_azure import AzureBlobStorageCredentials from prefect_azure.blob_storage import blob_storage_upload @flow def example_blob_storage_upload_flow (): connection_string = \"connection_string\" blob_storage_credentials = AzureBlobStorageCredentials ( connection_string = connection_string , ) with open ( \"data.csv\" , \"rb\" ) as f : blob = blob_storage_upload ( data = f . read (), container = \"container\" , blob = \"data.csv\" , blob_storage_credentials = blob_storage_credentials , overwrite = False , ) return blob example_blob_storage_upload_flow () Source code in prefect_azure/blob_storage.py 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 @task async def blob_storage_upload ( data : bytes , container : str , blob_storage_credentials : \"AzureBlobStorageCredentials\" , blob : str = None , overwrite : bool = False , ) -> str : \"\"\" Uploads data to an Blob Storage container. Args: data: Bytes representation of data to upload to Blob Storage. container: Name of the Blob Storage container to upload to. blob_storage_credentials: Credentials to use for authentication with Azure. blob: Name of the blob within this container to retrieve. overwrite: If `True`, an existing blob with the same name will be overwritten. Defaults to `False` and an error will be thrown if the blob already exists. Returns: The blob name of the uploaded object Example: Read and upload a file to a Blob Storage container ```python from prefect import flow from prefect_azure import AzureBlobStorageCredentials from prefect_azure.blob_storage import blob_storage_upload @flow def example_blob_storage_upload_flow(): connection_string = \"connection_string\" blob_storage_credentials = AzureBlobStorageCredentials( connection_string=connection_string, ) with open(\"data.csv\", \"rb\") as f: blob = blob_storage_upload( data=f.read(), container=\"container\", blob=\"data.csv\", blob_storage_credentials=blob_storage_credentials, overwrite=False, ) return blob example_blob_storage_upload_flow() ``` \"\"\" logger = get_run_logger () logger . info ( \"Uploading blob to container %s with key %s \" , container , blob ) # create key if not provided if blob is None : blob = str ( uuid . uuid4 ()) async with blob_storage_credentials . get_blob_client ( container , blob ) as blob_client : await blob_client . upload_blob ( data , overwrite = overwrite ) return blob","title":"Blob Storage"},{"location":"blob_storage/#prefect_azure.blob_storage","text":"Tasks for interacting with Azure Blob Storage","title":"blob_storage"},{"location":"blob_storage/#prefect_azure.blob_storage.blob_storage_download","text":"Downloads a blob with a given key from a given Blob Storage container. Parameters: Name Type Description Default blob str Name of the blob within this container to retrieve. required container str Name of the Blob Storage container to retrieve from. required blob_storage_credentials 'AzureBlobStorageCredentials' Credentials to use for authentication with Azure. required Returns: Type Description bytes A bytes representation of the downloaded blob. Example Download a file from a Blob Storage container from prefect import flow from prefect_azure import AzureBlobStorageCredentials from prefect_azure.blob_storage import blob_storage_download @flow def example_blob_storage_download_flow (): connection_string = \"connection_string\" blob_storage_credentials = AzureBlobStorageCredentials ( connection_string = connection_string , ) data = blob_storage_download ( container = \"prefect\" , blob = \"prefect.txt\" , blob_storage_credentials = blob_storage_credentials , ) return data example_blob_storage_download_flow () Source code in prefect_azure/blob_storage.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 @task async def blob_storage_download ( container : str , blob : str , blob_storage_credentials : \"AzureBlobStorageCredentials\" , ) -> bytes : \"\"\" Downloads a blob with a given key from a given Blob Storage container. Args: blob: Name of the blob within this container to retrieve. container: Name of the Blob Storage container to retrieve from. blob_storage_credentials: Credentials to use for authentication with Azure. Returns: A `bytes` representation of the downloaded blob. Example: Download a file from a Blob Storage container ```python from prefect import flow from prefect_azure import AzureBlobStorageCredentials from prefect_azure.blob_storage import blob_storage_download @flow def example_blob_storage_download_flow(): connection_string = \"connection_string\" blob_storage_credentials = AzureBlobStorageCredentials( connection_string=connection_string, ) data = blob_storage_download( container=\"prefect\", blob=\"prefect.txt\", blob_storage_credentials=blob_storage_credentials, ) return data example_blob_storage_download_flow() ``` \"\"\" logger = get_run_logger () logger . info ( \"Downloading blob from container %s with key %s \" , container , blob ) async with blob_storage_credentials . get_blob_client ( container , blob ) as blob_client : blob_obj = await blob_client . download_blob () output = await blob_obj . content_as_bytes () return output","title":"blob_storage_download()"},{"location":"blob_storage/#prefect_azure.blob_storage.blob_storage_list","text":"List objects from a given Blob Storage container. Parameters: Name Type Description Default container str Name of the Blob Storage container to retrieve from. required blob_storage_credentials 'AzureBlobStorageCredentials' Credentials to use for authentication with Azure. required Returns: Type Description List ['BlobProperties'] A list of dict s containing metadata about the blob. Example from prefect import flow from prefect_azure import AzureBlobStorageCredentials from prefect_azure.blob_storage import blob_storage_list @flow def example_blob_storage_list_flow (): connection_string = \"connection_string\" blob_storage_credentials = AzureBlobStorageCredentials ( connection_string = \"connection_string\" , ) data = blob_storage_list ( container = \"container\" , blob_storage_credentials = blob_storage_credentials , ) return data example_blob_storage_list_flow () Source code in prefect_azure/blob_storage.py 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 @task async def blob_storage_list ( container : str , blob_storage_credentials : \"AzureBlobStorageCredentials\" , ) -> List [ \"BlobProperties\" ]: \"\"\" List objects from a given Blob Storage container. Args: container: Name of the Blob Storage container to retrieve from. blob_storage_credentials: Credentials to use for authentication with Azure. Returns: A `list` of `dict`s containing metadata about the blob. Example: ```python from prefect import flow from prefect_azure import AzureBlobStorageCredentials from prefect_azure.blob_storage import blob_storage_list @flow def example_blob_storage_list_flow(): connection_string = \"connection_string\" blob_storage_credentials = AzureBlobStorageCredentials( connection_string=\"connection_string\", ) data = blob_storage_list( container=\"container\", blob_storage_credentials=blob_storage_credentials, ) return data example_blob_storage_list_flow() ``` \"\"\" logger = get_run_logger () logger . info ( \"Listing blobs from container %s \" , container ) async with blob_storage_credentials . get_container_client ( container ) as container_client : blobs = [ blob async for blob in container_client . list_blobs ()] return blobs","title":"blob_storage_list()"},{"location":"blob_storage/#prefect_azure.blob_storage.blob_storage_upload","text":"Uploads data to an Blob Storage container. Parameters: Name Type Description Default data bytes Bytes representation of data to upload to Blob Storage. required container str Name of the Blob Storage container to upload to. required blob_storage_credentials 'AzureBlobStorageCredentials' Credentials to use for authentication with Azure. required blob str Name of the blob within this container to retrieve. None overwrite bool If True , an existing blob with the same name will be overwritten. Defaults to False and an error will be thrown if the blob already exists. False Returns: Type Description str The blob name of the uploaded object Example Read and upload a file to a Blob Storage container from prefect import flow from prefect_azure import AzureBlobStorageCredentials from prefect_azure.blob_storage import blob_storage_upload @flow def example_blob_storage_upload_flow (): connection_string = \"connection_string\" blob_storage_credentials = AzureBlobStorageCredentials ( connection_string = connection_string , ) with open ( \"data.csv\" , \"rb\" ) as f : blob = blob_storage_upload ( data = f . read (), container = \"container\" , blob = \"data.csv\" , blob_storage_credentials = blob_storage_credentials , overwrite = False , ) return blob example_blob_storage_upload_flow () Source code in prefect_azure/blob_storage.py 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 @task async def blob_storage_upload ( data : bytes , container : str , blob_storage_credentials : \"AzureBlobStorageCredentials\" , blob : str = None , overwrite : bool = False , ) -> str : \"\"\" Uploads data to an Blob Storage container. Args: data: Bytes representation of data to upload to Blob Storage. container: Name of the Blob Storage container to upload to. blob_storage_credentials: Credentials to use for authentication with Azure. blob: Name of the blob within this container to retrieve. overwrite: If `True`, an existing blob with the same name will be overwritten. Defaults to `False` and an error will be thrown if the blob already exists. Returns: The blob name of the uploaded object Example: Read and upload a file to a Blob Storage container ```python from prefect import flow from prefect_azure import AzureBlobStorageCredentials from prefect_azure.blob_storage import blob_storage_upload @flow def example_blob_storage_upload_flow(): connection_string = \"connection_string\" blob_storage_credentials = AzureBlobStorageCredentials( connection_string=connection_string, ) with open(\"data.csv\", \"rb\") as f: blob = blob_storage_upload( data=f.read(), container=\"container\", blob=\"data.csv\", blob_storage_credentials=blob_storage_credentials, overwrite=False, ) return blob example_blob_storage_upload_flow() ``` \"\"\" logger = get_run_logger () logger . info ( \"Uploading blob to container %s with key %s \" , container , blob ) # create key if not provided if blob is None : blob = str ( uuid . uuid4 ()) async with blob_storage_credentials . get_blob_client ( container , blob ) as blob_client : await blob_client . upload_blob ( data , overwrite = overwrite ) return blob","title":"blob_storage_upload()"},{"location":"credentials/","text":"prefect_azure.credentials Credential classes used to perform authenticated interactions with Azure AzureBlobStorageCredentials Block used to manage Blob Storage authentication with Azure. Azure authentication is handled via the azure module through a connection string. Parameters: Name Type Description Default connection_string Includes the authorization information required. required Example Load stored Azure Blob Storage credentials: from prefect_azure import AzureBlobStorageCredentials azure_credentials_block = AzureBlobStorageCredentials . load ( \"MY_BLOCK_NAME\" ) Source code in prefect_azure/credentials.py 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 class AzureBlobStorageCredentials ( Block ): \"\"\" Block used to manage Blob Storage authentication with Azure. Azure authentication is handled via the `azure` module through a connection string. Args: connection_string: Includes the authorization information required. Example: Load stored Azure Blob Storage credentials: ```python from prefect_azure import AzureBlobStorageCredentials azure_credentials_block = AzureBlobStorageCredentials.load(\"MY_BLOCK_NAME\") ``` \"\"\" _block_type_name = \"Azure Blob Storage Credentials\" _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/6AiQ6HRIft8TspZH7AfyZg/39fd82bdbb186db85560f688746c8cdd/azure.png?h=250\" # noqa connection_string : SecretStr @_raise_help_msg ( \"blob_storage\" ) def get_client ( self ) -> \"BlobServiceClient\" : \"\"\" Returns an authenticated base Blob Service client that can be used to create other clients for Azure services. Example: Create an authorized Blob Service session ```python import os import asyncio from prefect import flow from prefect_azure import AzureBlobStorageCredentials @flow async def example_get_client_flow(): connection_string = os.getenv(\"AZURE_STORAGE_CONNECTION_STRING\") azure_credentials = AzureBlobStorageCredentials( connection_string=connection_string, ) async with azure_credentials.get_client() as blob_service_client: # run other code here pass asyncio.run(example_get_client_flow()) ``` \"\"\" return BlobServiceClient . from_connection_string ( self . connection_string . get_secret_value () ) @_raise_help_msg ( \"blob_storage\" ) def get_blob_client ( self , container , blob ) -> \"BlobClient\" : \"\"\" Returns an authenticated Blob client that can be used to download and upload blobs. Args: container: Name of the Blob Storage container to retrieve from. blob: Name of the blob within this container to retrieve. Example: Create an authorized Blob session ```python import os import asyncio from prefect import flow from prefect_azure import AzureBlobStorageCredentials @flow async def example_get_blob_client_flow(): connection_string = os.getenv(\"AZURE_STORAGE_CONNECTION_STRING\") azure_credentials = AzureBlobStorageCredentials( connection_string=connection_string, ) async with azure_credentials.get_blob_client( \"container\", \"blob\" ) as blob_client: # run other code here pass asyncio.run(example_get_blob_client_flow()) ``` \"\"\" blob_client = BlobClient . from_connection_string ( self . connection_string . get_secret_value (), container , blob ) return blob_client @_raise_help_msg ( \"blob_storage\" ) def get_container_client ( self , container ) -> \"ContainerClient\" : \"\"\" Returns an authenticated Container client that can be used to create clients for Azure services. Args: container: Name of the Blob Storage container to retrieve from. Example: Create an authorized Container session ```python import os import asyncio from prefect import flow from prefect_azure import AzureBlobStorageCredentials @flow async def example_get_container_client_flow(): connection_string = os.getenv(\"AZURE_STORAGE_CONNECTION_STRING\") azure_credentials = AzureBlobStorageCredentials( connection_string=connection_string, ) async with azure_credentials.get_container_client( \"container\" ) as container_client: # run other code here pass asyncio.run(example_get_container_client_flow()) ``` \"\"\" container_client = ContainerClient . from_connection_string ( self . connection_string . get_secret_value (), container ) return container_client get_blob_client ( container , blob ) Returns an authenticated Blob client that can be used to download and upload blobs. Parameters: Name Type Description Default container Name of the Blob Storage container to retrieve from. required blob Name of the blob within this container to retrieve. required Example Create an authorized Blob session import os import asyncio from prefect import flow from prefect_azure import AzureBlobStorageCredentials @flow async def example_get_blob_client_flow (): connection_string = os . getenv ( \"AZURE_STORAGE_CONNECTION_STRING\" ) azure_credentials = AzureBlobStorageCredentials ( connection_string = connection_string , ) async with azure_credentials . get_blob_client ( \"container\" , \"blob\" ) as blob_client : # run other code here pass asyncio . run ( example_get_blob_client_flow ()) Source code in prefect_azure/credentials.py 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 @_raise_help_msg ( \"blob_storage\" ) def get_blob_client ( self , container , blob ) -> \"BlobClient\" : \"\"\" Returns an authenticated Blob client that can be used to download and upload blobs. Args: container: Name of the Blob Storage container to retrieve from. blob: Name of the blob within this container to retrieve. Example: Create an authorized Blob session ```python import os import asyncio from prefect import flow from prefect_azure import AzureBlobStorageCredentials @flow async def example_get_blob_client_flow(): connection_string = os.getenv(\"AZURE_STORAGE_CONNECTION_STRING\") azure_credentials = AzureBlobStorageCredentials( connection_string=connection_string, ) async with azure_credentials.get_blob_client( \"container\", \"blob\" ) as blob_client: # run other code here pass asyncio.run(example_get_blob_client_flow()) ``` \"\"\" blob_client = BlobClient . from_connection_string ( self . connection_string . get_secret_value (), container , blob ) return blob_client get_client () Returns an authenticated base Blob Service client that can be used to create other clients for Azure services. Example Create an authorized Blob Service session import os import asyncio from prefect import flow from prefect_azure import AzureBlobStorageCredentials @flow async def example_get_client_flow (): connection_string = os . getenv ( \"AZURE_STORAGE_CONNECTION_STRING\" ) azure_credentials = AzureBlobStorageCredentials ( connection_string = connection_string , ) async with azure_credentials . get_client () as blob_service_client : # run other code here pass asyncio . run ( example_get_client_flow ()) Source code in prefect_azure/credentials.py 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 @_raise_help_msg ( \"blob_storage\" ) def get_client ( self ) -> \"BlobServiceClient\" : \"\"\" Returns an authenticated base Blob Service client that can be used to create other clients for Azure services. Example: Create an authorized Blob Service session ```python import os import asyncio from prefect import flow from prefect_azure import AzureBlobStorageCredentials @flow async def example_get_client_flow(): connection_string = os.getenv(\"AZURE_STORAGE_CONNECTION_STRING\") azure_credentials = AzureBlobStorageCredentials( connection_string=connection_string, ) async with azure_credentials.get_client() as blob_service_client: # run other code here pass asyncio.run(example_get_client_flow()) ``` \"\"\" return BlobServiceClient . from_connection_string ( self . connection_string . get_secret_value () ) get_container_client ( container ) Returns an authenticated Container client that can be used to create clients for Azure services. Parameters: Name Type Description Default container Name of the Blob Storage container to retrieve from. required Example Create an authorized Container session import os import asyncio from prefect import flow from prefect_azure import AzureBlobStorageCredentials @flow async def example_get_container_client_flow (): connection_string = os . getenv ( \"AZURE_STORAGE_CONNECTION_STRING\" ) azure_credentials = AzureBlobStorageCredentials ( connection_string = connection_string , ) async with azure_credentials . get_container_client ( \"container\" ) as container_client : # run other code here pass asyncio . run ( example_get_container_client_flow ()) Source code in prefect_azure/credentials.py 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 @_raise_help_msg ( \"blob_storage\" ) def get_container_client ( self , container ) -> \"ContainerClient\" : \"\"\" Returns an authenticated Container client that can be used to create clients for Azure services. Args: container: Name of the Blob Storage container to retrieve from. Example: Create an authorized Container session ```python import os import asyncio from prefect import flow from prefect_azure import AzureBlobStorageCredentials @flow async def example_get_container_client_flow(): connection_string = os.getenv(\"AZURE_STORAGE_CONNECTION_STRING\") azure_credentials = AzureBlobStorageCredentials( connection_string=connection_string, ) async with azure_credentials.get_container_client( \"container\" ) as container_client: # run other code here pass asyncio.run(example_get_container_client_flow()) ``` \"\"\" container_client = ContainerClient . from_connection_string ( self . connection_string . get_secret_value (), container ) return container_client AzureCosmosDbCredentials Block used to manage Cosmos DB authentication with Azure. Azure authentication is handled via the azure module through a connection string. Parameters: Name Type Description Default connection_string Includes the authorization information required. required Example Load stored Azure Cosmos DB credentials: from prefect_azure import AzureCosmosDbCredentials azure_credentials_block = AzureCosmosDbCredentials . load ( \"MY_BLOCK_NAME\" ) Source code in prefect_azure/credentials.py 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 class AzureCosmosDbCredentials ( Block ): \"\"\" Block used to manage Cosmos DB authentication with Azure. Azure authentication is handled via the `azure` module through a connection string. Args: connection_string: Includes the authorization information required. Example: Load stored Azure Cosmos DB credentials: ```python from prefect_azure import AzureCosmosDbCredentials azure_credentials_block = AzureCosmosDbCredentials.load(\"MY_BLOCK_NAME\") ``` \"\"\" _block_type_name = \"Azure Cosmos DB Credentials\" _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/6AiQ6HRIft8TspZH7AfyZg/39fd82bdbb186db85560f688746c8cdd/azure.png?h=250\" # noqa connection_string : SecretStr @_raise_help_msg ( \"cosmos_db\" ) def get_client ( self ) -> \"CosmosClient\" : \"\"\" Returns an authenticated Cosmos client that can be used to create other clients for Azure services. Example: Create an authorized Cosmos session ```python import os from prefect import flow from prefect_azure import AzureCosmosDbCredentials @flow def example_get_client_flow(): connection_string = os.getenv(\"AZURE_COSMOS_CONNECTION_STRING\") azure_credentials = AzureCosmosDbCredentials( connection_string=connection_string, ) cosmos_client = azure_credentials.get_client() return cosmos_client example_get_client_flow() ``` \"\"\" return CosmosClient . from_connection_string ( self . connection_string . get_secret_value () ) def get_database_client ( self , database : str ) -> \"DatabaseProxy\" : \"\"\" Returns an authenticated Database client. Args: database: Name of the database. Example: Create an authorized Cosmos session ```python import os from prefect import flow from prefect_azure import AzureCosmosDbCredentials @flow def example_get_client_flow(): connection_string = os.getenv(\"AZURE_COSMOS_CONNECTION_STRING\") azure_credentials = AzureCosmosDbCredentials( connection_string=connection_string, ) cosmos_client = azure_credentials.get_database_client() return cosmos_client example_get_database_client_flow() ``` \"\"\" cosmos_client = self . get_client () database_client = cosmos_client . get_database_client ( database = database ) return database_client def get_container_client ( self , container : str , database : str ) -> \"ContainerProxy\" : \"\"\" Returns an authenticated Container client used for querying. Args: container: Name of the Cosmos DB container to retrieve from. database: Name of the Cosmos DB database. Example: Create an authorized Container session ```python import os from prefect import flow from prefect_azure import AzureBlobStorageCredentials @flow def example_get_container_client_flow(): connection_string = os.getenv(\"AZURE_COSMOS_CONNECTION_STRING\") azure_credentials = AzureCosmosDbCredentials( connection_string=connection_string, ) container_client = azure_credentials.get_container_client(container) return container_client example_get_container_client_flow() ``` \"\"\" database_client = self . get_database_client ( database ) container_client = database_client . get_container_client ( container = container ) return container_client get_client () Returns an authenticated Cosmos client that can be used to create other clients for Azure services. Example Create an authorized Cosmos session import os from prefect import flow from prefect_azure import AzureCosmosDbCredentials @flow def example_get_client_flow (): connection_string = os . getenv ( \"AZURE_COSMOS_CONNECTION_STRING\" ) azure_credentials = AzureCosmosDbCredentials ( connection_string = connection_string , ) cosmos_client = azure_credentials . get_client () return cosmos_client example_get_client_flow () Source code in prefect_azure/credentials.py 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 @_raise_help_msg ( \"cosmos_db\" ) def get_client ( self ) -> \"CosmosClient\" : \"\"\" Returns an authenticated Cosmos client that can be used to create other clients for Azure services. Example: Create an authorized Cosmos session ```python import os from prefect import flow from prefect_azure import AzureCosmosDbCredentials @flow def example_get_client_flow(): connection_string = os.getenv(\"AZURE_COSMOS_CONNECTION_STRING\") azure_credentials = AzureCosmosDbCredentials( connection_string=connection_string, ) cosmos_client = azure_credentials.get_client() return cosmos_client example_get_client_flow() ``` \"\"\" return CosmosClient . from_connection_string ( self . connection_string . get_secret_value () ) get_container_client ( container , database ) Returns an authenticated Container client used for querying. Parameters: Name Type Description Default container str Name of the Cosmos DB container to retrieve from. required database str Name of the Cosmos DB database. required Example Create an authorized Container session import os from prefect import flow from prefect_azure import AzureBlobStorageCredentials @flow def example_get_container_client_flow (): connection_string = os . getenv ( \"AZURE_COSMOS_CONNECTION_STRING\" ) azure_credentials = AzureCosmosDbCredentials ( connection_string = connection_string , ) container_client = azure_credentials . get_container_client ( container ) return container_client example_get_container_client_flow () Source code in prefect_azure/credentials.py 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 def get_container_client ( self , container : str , database : str ) -> \"ContainerProxy\" : \"\"\" Returns an authenticated Container client used for querying. Args: container: Name of the Cosmos DB container to retrieve from. database: Name of the Cosmos DB database. Example: Create an authorized Container session ```python import os from prefect import flow from prefect_azure import AzureBlobStorageCredentials @flow def example_get_container_client_flow(): connection_string = os.getenv(\"AZURE_COSMOS_CONNECTION_STRING\") azure_credentials = AzureCosmosDbCredentials( connection_string=connection_string, ) container_client = azure_credentials.get_container_client(container) return container_client example_get_container_client_flow() ``` \"\"\" database_client = self . get_database_client ( database ) container_client = database_client . get_container_client ( container = container ) return container_client get_database_client ( database ) Returns an authenticated Database client. Parameters: Name Type Description Default database str Name of the database. required Example Create an authorized Cosmos session import os from prefect import flow from prefect_azure import AzureCosmosDbCredentials @flow def example_get_client_flow (): connection_string = os . getenv ( \"AZURE_COSMOS_CONNECTION_STRING\" ) azure_credentials = AzureCosmosDbCredentials ( connection_string = connection_string , ) cosmos_client = azure_credentials . get_database_client () return cosmos_client example_get_database_client_flow () Source code in prefect_azure/credentials.py 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 def get_database_client ( self , database : str ) -> \"DatabaseProxy\" : \"\"\" Returns an authenticated Database client. Args: database: Name of the database. Example: Create an authorized Cosmos session ```python import os from prefect import flow from prefect_azure import AzureCosmosDbCredentials @flow def example_get_client_flow(): connection_string = os.getenv(\"AZURE_COSMOS_CONNECTION_STRING\") azure_credentials = AzureCosmosDbCredentials( connection_string=connection_string, ) cosmos_client = azure_credentials.get_database_client() return cosmos_client example_get_database_client_flow() ``` \"\"\" cosmos_client = self . get_client () database_client = cosmos_client . get_database_client ( database = database ) return database_client AzureMlCredentials Block used to manage authentication with AzureML. Azure authentication is handled via the azure module. Parameters: Name Type Description Default tenant_id The active directory tenant that the service identity belongs to. required service_principal_id The service principal ID. required service_principal_password The service principal password/key. required subscription_id The Azure subscription ID containing the workspace. required resource_group The resource group containing the workspace. required workspace_name The existing workspace name. required Example Load stored AzureML credentials: from prefect_azure import AzureMlCredentials azure_ml_credentials_block = AzureMlCredentials . load ( \"MY_BLOCK_NAME\" ) Source code in prefect_azure/credentials.py 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 class AzureMlCredentials ( Block ): \"\"\" Block used to manage authentication with AzureML. Azure authentication is handled via the `azure` module. Args: tenant_id: The active directory tenant that the service identity belongs to. service_principal_id: The service principal ID. service_principal_password: The service principal password/key. subscription_id: The Azure subscription ID containing the workspace. resource_group: The resource group containing the workspace. workspace_name: The existing workspace name. Example: Load stored AzureML credentials: ```python from prefect_azure import AzureMlCredentials azure_ml_credentials_block = AzureMlCredentials.load(\"MY_BLOCK_NAME\") ``` \"\"\" _block_type_name = \"AzureML Credentials\" _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/6AiQ6HRIft8TspZH7AfyZg/39fd82bdbb186db85560f688746c8cdd/azure.png?h=250\" # noqa tenant_id : str service_principal_id : str service_principal_password : SecretStr subscription_id : str resource_group : str workspace_name : str @_raise_help_msg ( \"ml_datastore\" ) def get_workspace ( self ) -> \"Workspace\" : \"\"\" Returns an authenticated base Workspace that can be used in Azure's Datasets and Datastores. Example: Create an authorized workspace ```python import os from prefect import flow from prefect_azure import AzureMlCredentials @flow def example_get_workspace_flow(): azure_credentials = AzureMlCredentials( tenant_id=\"tenant_id\", service_principal_id=\"service_principal_id\", service_principal_password=\"service_principal_password\", subscription_id=\"subscription_id\", resource_group=\"resource_group\", workspace_name=\"workspace_name\" ) workspace_client = azure_credentials.get_workspace() return workspace_client example_get_workspace_flow() ``` \"\"\" service_principal_password = self . service_principal_password . get_secret_value () service_principal_authentication = ServicePrincipalAuthentication ( tenant_id = self . tenant_id , service_principal_id = self . service_principal_id , service_principal_password = service_principal_password , ) workspace = Workspace ( subscription_id = self . subscription_id , resource_group = self . resource_group , workspace_name = self . workspace_name , auth = service_principal_authentication , ) return workspace get_workspace () Returns an authenticated base Workspace that can be used in Azure's Datasets and Datastores. Example Create an authorized workspace import os from prefect import flow from prefect_azure import AzureMlCredentials @flow def example_get_workspace_flow (): azure_credentials = AzureMlCredentials ( tenant_id = \"tenant_id\" , service_principal_id = \"service_principal_id\" , service_principal_password = \"service_principal_password\" , subscription_id = \"subscription_id\" , resource_group = \"resource_group\" , workspace_name = \"workspace_name\" ) workspace_client = azure_credentials . get_workspace () return workspace_client example_get_workspace_flow () Source code in prefect_azure/credentials.py 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 @_raise_help_msg ( \"ml_datastore\" ) def get_workspace ( self ) -> \"Workspace\" : \"\"\" Returns an authenticated base Workspace that can be used in Azure's Datasets and Datastores. Example: Create an authorized workspace ```python import os from prefect import flow from prefect_azure import AzureMlCredentials @flow def example_get_workspace_flow(): azure_credentials = AzureMlCredentials( tenant_id=\"tenant_id\", service_principal_id=\"service_principal_id\", service_principal_password=\"service_principal_password\", subscription_id=\"subscription_id\", resource_group=\"resource_group\", workspace_name=\"workspace_name\" ) workspace_client = azure_credentials.get_workspace() return workspace_client example_get_workspace_flow() ``` \"\"\" service_principal_password = self . service_principal_password . get_secret_value () service_principal_authentication = ServicePrincipalAuthentication ( tenant_id = self . tenant_id , service_principal_id = self . service_principal_id , service_principal_password = service_principal_password , ) workspace = Workspace ( subscription_id = self . subscription_id , resource_group = self . resource_group , workspace_name = self . workspace_name , auth = service_principal_authentication , ) return workspace","title":"Credentials"},{"location":"credentials/#prefect_azure.credentials","text":"Credential classes used to perform authenticated interactions with Azure","title":"credentials"},{"location":"credentials/#prefect_azure.credentials.AzureBlobStorageCredentials","text":"Block used to manage Blob Storage authentication with Azure. Azure authentication is handled via the azure module through a connection string. Parameters: Name Type Description Default connection_string Includes the authorization information required. required Example Load stored Azure Blob Storage credentials: from prefect_azure import AzureBlobStorageCredentials azure_credentials_block = AzureBlobStorageCredentials . load ( \"MY_BLOCK_NAME\" ) Source code in prefect_azure/credentials.py 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 class AzureBlobStorageCredentials ( Block ): \"\"\" Block used to manage Blob Storage authentication with Azure. Azure authentication is handled via the `azure` module through a connection string. Args: connection_string: Includes the authorization information required. Example: Load stored Azure Blob Storage credentials: ```python from prefect_azure import AzureBlobStorageCredentials azure_credentials_block = AzureBlobStorageCredentials.load(\"MY_BLOCK_NAME\") ``` \"\"\" _block_type_name = \"Azure Blob Storage Credentials\" _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/6AiQ6HRIft8TspZH7AfyZg/39fd82bdbb186db85560f688746c8cdd/azure.png?h=250\" # noqa connection_string : SecretStr @_raise_help_msg ( \"blob_storage\" ) def get_client ( self ) -> \"BlobServiceClient\" : \"\"\" Returns an authenticated base Blob Service client that can be used to create other clients for Azure services. Example: Create an authorized Blob Service session ```python import os import asyncio from prefect import flow from prefect_azure import AzureBlobStorageCredentials @flow async def example_get_client_flow(): connection_string = os.getenv(\"AZURE_STORAGE_CONNECTION_STRING\") azure_credentials = AzureBlobStorageCredentials( connection_string=connection_string, ) async with azure_credentials.get_client() as blob_service_client: # run other code here pass asyncio.run(example_get_client_flow()) ``` \"\"\" return BlobServiceClient . from_connection_string ( self . connection_string . get_secret_value () ) @_raise_help_msg ( \"blob_storage\" ) def get_blob_client ( self , container , blob ) -> \"BlobClient\" : \"\"\" Returns an authenticated Blob client that can be used to download and upload blobs. Args: container: Name of the Blob Storage container to retrieve from. blob: Name of the blob within this container to retrieve. Example: Create an authorized Blob session ```python import os import asyncio from prefect import flow from prefect_azure import AzureBlobStorageCredentials @flow async def example_get_blob_client_flow(): connection_string = os.getenv(\"AZURE_STORAGE_CONNECTION_STRING\") azure_credentials = AzureBlobStorageCredentials( connection_string=connection_string, ) async with azure_credentials.get_blob_client( \"container\", \"blob\" ) as blob_client: # run other code here pass asyncio.run(example_get_blob_client_flow()) ``` \"\"\" blob_client = BlobClient . from_connection_string ( self . connection_string . get_secret_value (), container , blob ) return blob_client @_raise_help_msg ( \"blob_storage\" ) def get_container_client ( self , container ) -> \"ContainerClient\" : \"\"\" Returns an authenticated Container client that can be used to create clients for Azure services. Args: container: Name of the Blob Storage container to retrieve from. Example: Create an authorized Container session ```python import os import asyncio from prefect import flow from prefect_azure import AzureBlobStorageCredentials @flow async def example_get_container_client_flow(): connection_string = os.getenv(\"AZURE_STORAGE_CONNECTION_STRING\") azure_credentials = AzureBlobStorageCredentials( connection_string=connection_string, ) async with azure_credentials.get_container_client( \"container\" ) as container_client: # run other code here pass asyncio.run(example_get_container_client_flow()) ``` \"\"\" container_client = ContainerClient . from_connection_string ( self . connection_string . get_secret_value (), container ) return container_client","title":"AzureBlobStorageCredentials"},{"location":"credentials/#prefect_azure.credentials.AzureBlobStorageCredentials.get_blob_client","text":"Returns an authenticated Blob client that can be used to download and upload blobs. Parameters: Name Type Description Default container Name of the Blob Storage container to retrieve from. required blob Name of the blob within this container to retrieve. required Example Create an authorized Blob session import os import asyncio from prefect import flow from prefect_azure import AzureBlobStorageCredentials @flow async def example_get_blob_client_flow (): connection_string = os . getenv ( \"AZURE_STORAGE_CONNECTION_STRING\" ) azure_credentials = AzureBlobStorageCredentials ( connection_string = connection_string , ) async with azure_credentials . get_blob_client ( \"container\" , \"blob\" ) as blob_client : # run other code here pass asyncio . run ( example_get_blob_client_flow ()) Source code in prefect_azure/credentials.py 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 @_raise_help_msg ( \"blob_storage\" ) def get_blob_client ( self , container , blob ) -> \"BlobClient\" : \"\"\" Returns an authenticated Blob client that can be used to download and upload blobs. Args: container: Name of the Blob Storage container to retrieve from. blob: Name of the blob within this container to retrieve. Example: Create an authorized Blob session ```python import os import asyncio from prefect import flow from prefect_azure import AzureBlobStorageCredentials @flow async def example_get_blob_client_flow(): connection_string = os.getenv(\"AZURE_STORAGE_CONNECTION_STRING\") azure_credentials = AzureBlobStorageCredentials( connection_string=connection_string, ) async with azure_credentials.get_blob_client( \"container\", \"blob\" ) as blob_client: # run other code here pass asyncio.run(example_get_blob_client_flow()) ``` \"\"\" blob_client = BlobClient . from_connection_string ( self . connection_string . get_secret_value (), container , blob ) return blob_client","title":"get_blob_client()"},{"location":"credentials/#prefect_azure.credentials.AzureBlobStorageCredentials.get_client","text":"Returns an authenticated base Blob Service client that can be used to create other clients for Azure services. Example Create an authorized Blob Service session import os import asyncio from prefect import flow from prefect_azure import AzureBlobStorageCredentials @flow async def example_get_client_flow (): connection_string = os . getenv ( \"AZURE_STORAGE_CONNECTION_STRING\" ) azure_credentials = AzureBlobStorageCredentials ( connection_string = connection_string , ) async with azure_credentials . get_client () as blob_service_client : # run other code here pass asyncio . run ( example_get_client_flow ()) Source code in prefect_azure/credentials.py 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 @_raise_help_msg ( \"blob_storage\" ) def get_client ( self ) -> \"BlobServiceClient\" : \"\"\" Returns an authenticated base Blob Service client that can be used to create other clients for Azure services. Example: Create an authorized Blob Service session ```python import os import asyncio from prefect import flow from prefect_azure import AzureBlobStorageCredentials @flow async def example_get_client_flow(): connection_string = os.getenv(\"AZURE_STORAGE_CONNECTION_STRING\") azure_credentials = AzureBlobStorageCredentials( connection_string=connection_string, ) async with azure_credentials.get_client() as blob_service_client: # run other code here pass asyncio.run(example_get_client_flow()) ``` \"\"\" return BlobServiceClient . from_connection_string ( self . connection_string . get_secret_value () )","title":"get_client()"},{"location":"credentials/#prefect_azure.credentials.AzureBlobStorageCredentials.get_container_client","text":"Returns an authenticated Container client that can be used to create clients for Azure services. Parameters: Name Type Description Default container Name of the Blob Storage container to retrieve from. required Example Create an authorized Container session import os import asyncio from prefect import flow from prefect_azure import AzureBlobStorageCredentials @flow async def example_get_container_client_flow (): connection_string = os . getenv ( \"AZURE_STORAGE_CONNECTION_STRING\" ) azure_credentials = AzureBlobStorageCredentials ( connection_string = connection_string , ) async with azure_credentials . get_container_client ( \"container\" ) as container_client : # run other code here pass asyncio . run ( example_get_container_client_flow ()) Source code in prefect_azure/credentials.py 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 @_raise_help_msg ( \"blob_storage\" ) def get_container_client ( self , container ) -> \"ContainerClient\" : \"\"\" Returns an authenticated Container client that can be used to create clients for Azure services. Args: container: Name of the Blob Storage container to retrieve from. Example: Create an authorized Container session ```python import os import asyncio from prefect import flow from prefect_azure import AzureBlobStorageCredentials @flow async def example_get_container_client_flow(): connection_string = os.getenv(\"AZURE_STORAGE_CONNECTION_STRING\") azure_credentials = AzureBlobStorageCredentials( connection_string=connection_string, ) async with azure_credentials.get_container_client( \"container\" ) as container_client: # run other code here pass asyncio.run(example_get_container_client_flow()) ``` \"\"\" container_client = ContainerClient . from_connection_string ( self . connection_string . get_secret_value (), container ) return container_client","title":"get_container_client()"},{"location":"credentials/#prefect_azure.credentials.AzureCosmosDbCredentials","text":"Block used to manage Cosmos DB authentication with Azure. Azure authentication is handled via the azure module through a connection string. Parameters: Name Type Description Default connection_string Includes the authorization information required. required Example Load stored Azure Cosmos DB credentials: from prefect_azure import AzureCosmosDbCredentials azure_credentials_block = AzureCosmosDbCredentials . load ( \"MY_BLOCK_NAME\" ) Source code in prefect_azure/credentials.py 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 class AzureCosmosDbCredentials ( Block ): \"\"\" Block used to manage Cosmos DB authentication with Azure. Azure authentication is handled via the `azure` module through a connection string. Args: connection_string: Includes the authorization information required. Example: Load stored Azure Cosmos DB credentials: ```python from prefect_azure import AzureCosmosDbCredentials azure_credentials_block = AzureCosmosDbCredentials.load(\"MY_BLOCK_NAME\") ``` \"\"\" _block_type_name = \"Azure Cosmos DB Credentials\" _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/6AiQ6HRIft8TspZH7AfyZg/39fd82bdbb186db85560f688746c8cdd/azure.png?h=250\" # noqa connection_string : SecretStr @_raise_help_msg ( \"cosmos_db\" ) def get_client ( self ) -> \"CosmosClient\" : \"\"\" Returns an authenticated Cosmos client that can be used to create other clients for Azure services. Example: Create an authorized Cosmos session ```python import os from prefect import flow from prefect_azure import AzureCosmosDbCredentials @flow def example_get_client_flow(): connection_string = os.getenv(\"AZURE_COSMOS_CONNECTION_STRING\") azure_credentials = AzureCosmosDbCredentials( connection_string=connection_string, ) cosmos_client = azure_credentials.get_client() return cosmos_client example_get_client_flow() ``` \"\"\" return CosmosClient . from_connection_string ( self . connection_string . get_secret_value () ) def get_database_client ( self , database : str ) -> \"DatabaseProxy\" : \"\"\" Returns an authenticated Database client. Args: database: Name of the database. Example: Create an authorized Cosmos session ```python import os from prefect import flow from prefect_azure import AzureCosmosDbCredentials @flow def example_get_client_flow(): connection_string = os.getenv(\"AZURE_COSMOS_CONNECTION_STRING\") azure_credentials = AzureCosmosDbCredentials( connection_string=connection_string, ) cosmos_client = azure_credentials.get_database_client() return cosmos_client example_get_database_client_flow() ``` \"\"\" cosmos_client = self . get_client () database_client = cosmos_client . get_database_client ( database = database ) return database_client def get_container_client ( self , container : str , database : str ) -> \"ContainerProxy\" : \"\"\" Returns an authenticated Container client used for querying. Args: container: Name of the Cosmos DB container to retrieve from. database: Name of the Cosmos DB database. Example: Create an authorized Container session ```python import os from prefect import flow from prefect_azure import AzureBlobStorageCredentials @flow def example_get_container_client_flow(): connection_string = os.getenv(\"AZURE_COSMOS_CONNECTION_STRING\") azure_credentials = AzureCosmosDbCredentials( connection_string=connection_string, ) container_client = azure_credentials.get_container_client(container) return container_client example_get_container_client_flow() ``` \"\"\" database_client = self . get_database_client ( database ) container_client = database_client . get_container_client ( container = container ) return container_client","title":"AzureCosmosDbCredentials"},{"location":"credentials/#prefect_azure.credentials.AzureCosmosDbCredentials.get_client","text":"Returns an authenticated Cosmos client that can be used to create other clients for Azure services. Example Create an authorized Cosmos session import os from prefect import flow from prefect_azure import AzureCosmosDbCredentials @flow def example_get_client_flow (): connection_string = os . getenv ( \"AZURE_COSMOS_CONNECTION_STRING\" ) azure_credentials = AzureCosmosDbCredentials ( connection_string = connection_string , ) cosmos_client = azure_credentials . get_client () return cosmos_client example_get_client_flow () Source code in prefect_azure/credentials.py 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 @_raise_help_msg ( \"cosmos_db\" ) def get_client ( self ) -> \"CosmosClient\" : \"\"\" Returns an authenticated Cosmos client that can be used to create other clients for Azure services. Example: Create an authorized Cosmos session ```python import os from prefect import flow from prefect_azure import AzureCosmosDbCredentials @flow def example_get_client_flow(): connection_string = os.getenv(\"AZURE_COSMOS_CONNECTION_STRING\") azure_credentials = AzureCosmosDbCredentials( connection_string=connection_string, ) cosmos_client = azure_credentials.get_client() return cosmos_client example_get_client_flow() ``` \"\"\" return CosmosClient . from_connection_string ( self . connection_string . get_secret_value () )","title":"get_client()"},{"location":"credentials/#prefect_azure.credentials.AzureCosmosDbCredentials.get_container_client","text":"Returns an authenticated Container client used for querying. Parameters: Name Type Description Default container str Name of the Cosmos DB container to retrieve from. required database str Name of the Cosmos DB database. required Example Create an authorized Container session import os from prefect import flow from prefect_azure import AzureBlobStorageCredentials @flow def example_get_container_client_flow (): connection_string = os . getenv ( \"AZURE_COSMOS_CONNECTION_STRING\" ) azure_credentials = AzureCosmosDbCredentials ( connection_string = connection_string , ) container_client = azure_credentials . get_container_client ( container ) return container_client example_get_container_client_flow () Source code in prefect_azure/credentials.py 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 def get_container_client ( self , container : str , database : str ) -> \"ContainerProxy\" : \"\"\" Returns an authenticated Container client used for querying. Args: container: Name of the Cosmos DB container to retrieve from. database: Name of the Cosmos DB database. Example: Create an authorized Container session ```python import os from prefect import flow from prefect_azure import AzureBlobStorageCredentials @flow def example_get_container_client_flow(): connection_string = os.getenv(\"AZURE_COSMOS_CONNECTION_STRING\") azure_credentials = AzureCosmosDbCredentials( connection_string=connection_string, ) container_client = azure_credentials.get_container_client(container) return container_client example_get_container_client_flow() ``` \"\"\" database_client = self . get_database_client ( database ) container_client = database_client . get_container_client ( container = container ) return container_client","title":"get_container_client()"},{"location":"credentials/#prefect_azure.credentials.AzureCosmosDbCredentials.get_database_client","text":"Returns an authenticated Database client. Parameters: Name Type Description Default database str Name of the database. required Example Create an authorized Cosmos session import os from prefect import flow from prefect_azure import AzureCosmosDbCredentials @flow def example_get_client_flow (): connection_string = os . getenv ( \"AZURE_COSMOS_CONNECTION_STRING\" ) azure_credentials = AzureCosmosDbCredentials ( connection_string = connection_string , ) cosmos_client = azure_credentials . get_database_client () return cosmos_client example_get_database_client_flow () Source code in prefect_azure/credentials.py 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 def get_database_client ( self , database : str ) -> \"DatabaseProxy\" : \"\"\" Returns an authenticated Database client. Args: database: Name of the database. Example: Create an authorized Cosmos session ```python import os from prefect import flow from prefect_azure import AzureCosmosDbCredentials @flow def example_get_client_flow(): connection_string = os.getenv(\"AZURE_COSMOS_CONNECTION_STRING\") azure_credentials = AzureCosmosDbCredentials( connection_string=connection_string, ) cosmos_client = azure_credentials.get_database_client() return cosmos_client example_get_database_client_flow() ``` \"\"\" cosmos_client = self . get_client () database_client = cosmos_client . get_database_client ( database = database ) return database_client","title":"get_database_client()"},{"location":"credentials/#prefect_azure.credentials.AzureMlCredentials","text":"Block used to manage authentication with AzureML. Azure authentication is handled via the azure module. Parameters: Name Type Description Default tenant_id The active directory tenant that the service identity belongs to. required service_principal_id The service principal ID. required service_principal_password The service principal password/key. required subscription_id The Azure subscription ID containing the workspace. required resource_group The resource group containing the workspace. required workspace_name The existing workspace name. required Example Load stored AzureML credentials: from prefect_azure import AzureMlCredentials azure_ml_credentials_block = AzureMlCredentials . load ( \"MY_BLOCK_NAME\" ) Source code in prefect_azure/credentials.py 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 class AzureMlCredentials ( Block ): \"\"\" Block used to manage authentication with AzureML. Azure authentication is handled via the `azure` module. Args: tenant_id: The active directory tenant that the service identity belongs to. service_principal_id: The service principal ID. service_principal_password: The service principal password/key. subscription_id: The Azure subscription ID containing the workspace. resource_group: The resource group containing the workspace. workspace_name: The existing workspace name. Example: Load stored AzureML credentials: ```python from prefect_azure import AzureMlCredentials azure_ml_credentials_block = AzureMlCredentials.load(\"MY_BLOCK_NAME\") ``` \"\"\" _block_type_name = \"AzureML Credentials\" _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/6AiQ6HRIft8TspZH7AfyZg/39fd82bdbb186db85560f688746c8cdd/azure.png?h=250\" # noqa tenant_id : str service_principal_id : str service_principal_password : SecretStr subscription_id : str resource_group : str workspace_name : str @_raise_help_msg ( \"ml_datastore\" ) def get_workspace ( self ) -> \"Workspace\" : \"\"\" Returns an authenticated base Workspace that can be used in Azure's Datasets and Datastores. Example: Create an authorized workspace ```python import os from prefect import flow from prefect_azure import AzureMlCredentials @flow def example_get_workspace_flow(): azure_credentials = AzureMlCredentials( tenant_id=\"tenant_id\", service_principal_id=\"service_principal_id\", service_principal_password=\"service_principal_password\", subscription_id=\"subscription_id\", resource_group=\"resource_group\", workspace_name=\"workspace_name\" ) workspace_client = azure_credentials.get_workspace() return workspace_client example_get_workspace_flow() ``` \"\"\" service_principal_password = self . service_principal_password . get_secret_value () service_principal_authentication = ServicePrincipalAuthentication ( tenant_id = self . tenant_id , service_principal_id = self . service_principal_id , service_principal_password = service_principal_password , ) workspace = Workspace ( subscription_id = self . subscription_id , resource_group = self . resource_group , workspace_name = self . workspace_name , auth = service_principal_authentication , ) return workspace","title":"AzureMlCredentials"},{"location":"credentials/#prefect_azure.credentials.AzureMlCredentials.get_workspace","text":"Returns an authenticated base Workspace that can be used in Azure's Datasets and Datastores. Example Create an authorized workspace import os from prefect import flow from prefect_azure import AzureMlCredentials @flow def example_get_workspace_flow (): azure_credentials = AzureMlCredentials ( tenant_id = \"tenant_id\" , service_principal_id = \"service_principal_id\" , service_principal_password = \"service_principal_password\" , subscription_id = \"subscription_id\" , resource_group = \"resource_group\" , workspace_name = \"workspace_name\" ) workspace_client = azure_credentials . get_workspace () return workspace_client example_get_workspace_flow () Source code in prefect_azure/credentials.py 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 @_raise_help_msg ( \"ml_datastore\" ) def get_workspace ( self ) -> \"Workspace\" : \"\"\" Returns an authenticated base Workspace that can be used in Azure's Datasets and Datastores. Example: Create an authorized workspace ```python import os from prefect import flow from prefect_azure import AzureMlCredentials @flow def example_get_workspace_flow(): azure_credentials = AzureMlCredentials( tenant_id=\"tenant_id\", service_principal_id=\"service_principal_id\", service_principal_password=\"service_principal_password\", subscription_id=\"subscription_id\", resource_group=\"resource_group\", workspace_name=\"workspace_name\" ) workspace_client = azure_credentials.get_workspace() return workspace_client example_get_workspace_flow() ``` \"\"\" service_principal_password = self . service_principal_password . get_secret_value () service_principal_authentication = ServicePrincipalAuthentication ( tenant_id = self . tenant_id , service_principal_id = self . service_principal_id , service_principal_password = service_principal_password , ) workspace = Workspace ( subscription_id = self . subscription_id , resource_group = self . resource_group , workspace_name = self . workspace_name , auth = service_principal_authentication , ) return workspace","title":"get_workspace()"},{"location":"ml_datastore/","text":"prefect_azure.ml_datastore Tasks for interacting with Azure ML Datastore ml_get_datastore ( ml_credentials , datastore_name = None ) async Gets the Datastore within the Workspace. Parameters: Name Type Description Default ml_credentials 'AzureMlCredentials' Credentials to use for authentication with Azure. required datastore_name str The name of the Datastore. If None , then the default Datastore of the Workspace is returned. None Example Get Datastore object from prefect import flow from prefect_azure import AzureMlCredentials from prefect_azure.ml_datastore import ml_get_datastore @flow def example_ml_get_datastore_flow (): ml_credentials = AzureMlCredentials ( tenant_id = \"tenant_id\" , service_principal_id = \"service_principal_id\" , service_principal_password = \"service_principal_password\" , subscription_id = \"subscription_id\" , resource_group = \"resource_group\" , workspace_name = \"workspace_name\" , ) results = ml_get_datastore ( ml_credentials , datastore_name = \"datastore_name\" ) return results Source code in prefect_azure/ml_datastore.py 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 @task async def ml_get_datastore ( ml_credentials : \"AzureMlCredentials\" , datastore_name : str = None ) -> Datastore : \"\"\" Gets the Datastore within the Workspace. Args: ml_credentials: Credentials to use for authentication with Azure. datastore_name: The name of the Datastore. If `None`, then the default Datastore of the Workspace is returned. Example: Get Datastore object ```python from prefect import flow from prefect_azure import AzureMlCredentials from prefect_azure.ml_datastore import ml_get_datastore @flow def example_ml_get_datastore_flow(): ml_credentials = AzureMlCredentials( tenant_id=\"tenant_id\", service_principal_id=\"service_principal_id\", service_principal_password=\"service_principal_password\", subscription_id=\"subscription_id\", resource_group=\"resource_group\", workspace_name=\"workspace_name\", ) results = ml_get_datastore(ml_credentials, datastore_name=\"datastore_name\") return results ``` \"\"\" logger = get_run_logger () logger . info ( \"Getting datastore %s \" , datastore_name ) result = await _get_datastore ( ml_credentials , datastore_name ) return result ml_list_datastores ( ml_credentials ) Lists the Datastores in the Workspace. Parameters: Name Type Description Default ml_credentials 'AzureMlCredentials' Credentials to use for authentication with Azure. required Example List Datastore objects from prefect import flow from prefect_azure import AzureMlCredentials from prefect_azure.ml_datastore import ml_list_datastores @flow def example_ml_list_datastores_flow (): ml_credentials = AzureMlCredentials ( tenant_id = \"tenant_id\" , service_principal_id = \"service_principal_id\" , service_principal_password = \"service_principal_password\" , subscription_id = \"subscription_id\" , resource_group = \"resource_group\" , workspace_name = \"workspace_name\" , ) results = ml_list_datastores ( ml_credentials ) return results Source code in prefect_azure/ml_datastore.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 @task def ml_list_datastores ( ml_credentials : \"AzureMlCredentials\" ) -> Dict : \"\"\" Lists the Datastores in the Workspace. Args: ml_credentials: Credentials to use for authentication with Azure. Example: List Datastore objects ```python from prefect import flow from prefect_azure import AzureMlCredentials from prefect_azure.ml_datastore import ml_list_datastores @flow def example_ml_list_datastores_flow(): ml_credentials = AzureMlCredentials( tenant_id=\"tenant_id\", service_principal_id=\"service_principal_id\", service_principal_password=\"service_principal_password\", subscription_id=\"subscription_id\", resource_group=\"resource_group\", workspace_name=\"workspace_name\", ) results = ml_list_datastores(ml_credentials) return results ``` \"\"\" logger = get_run_logger () logger . info ( \"Listing datastores\" ) workspace = ml_credentials . get_workspace () results = workspace . datastores return results ml_register_datastore_blob_container ( container_name , ml_credentials , blob_storage_credentials , datastore_name = None , create_container_if_not_exists = False , overwrite = False , set_as_default = False ) async Registers a Azure Blob Storage container as a Datastore in a Azure ML service Workspace. Parameters: Name Type Description Default container_name str The name of the container. required ml_credentials 'AzureMlCredentials' Credentials to use for authentication with Azure ML. required blob_storage_credentials 'AzureBlobStorageCredentials' Credentials to use for authentication with Azure Blob Storage. required datastore_name str The name of the datastore. If not defined, the container name will be used. None create_container_if_not_exists bool Create a container, if one does not exist with the given name. False overwrite bool Overwrite an existing datastore. If the datastore does not exist, it will be created. False set_as_default bool Set the created Datastore as the default datastore for the Workspace. False Example Upload Datastore object from prefect import flow from prefect_azure import AzureMlCredentials from prefect_azure.ml_datastore import ml_register_datastore_blob_container @flow def example_ml_register_datastore_blob_container_flow (): ml_credentials = AzureMlCredentials ( tenant_id = \"tenant_id\" , service_principal_id = \"service_principal_id\" , service_principal_password = \"service_principal_password\" , subscription_id = \"subscription_id\" , resource_group = \"resource_group\" , workspace_name = \"workspace_name\" , ) blob_storage_credentials = AzureBlobStorageCredentials ( \"connection_string\" ) result = ml_register_datastore_blob_container ( \"container\" , ml_credentials , blob_storage_credentials , datastore_name = \"datastore_name\" ) return result Source code in prefect_azure/ml_datastore.py 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 @task async def ml_register_datastore_blob_container ( container_name : str , ml_credentials : \"AzureMlCredentials\" , blob_storage_credentials : \"AzureBlobStorageCredentials\" , datastore_name : str = None , create_container_if_not_exists : bool = False , overwrite : bool = False , set_as_default : bool = False , ) -> \"AzureBlobDatastore\" : \"\"\" Registers a Azure Blob Storage container as a Datastore in a Azure ML service Workspace. Args: container_name: The name of the container. ml_credentials: Credentials to use for authentication with Azure ML. blob_storage_credentials: Credentials to use for authentication with Azure Blob Storage. datastore_name: The name of the datastore. If not defined, the container name will be used. create_container_if_not_exists: Create a container, if one does not exist with the given name. overwrite: Overwrite an existing datastore. If the datastore does not exist, it will be created. set_as_default: Set the created Datastore as the default datastore for the Workspace. Example: Upload Datastore object ```python from prefect import flow from prefect_azure import AzureMlCredentials from prefect_azure.ml_datastore import ml_register_datastore_blob_container @flow def example_ml_register_datastore_blob_container_flow(): ml_credentials = AzureMlCredentials( tenant_id=\"tenant_id\", service_principal_id=\"service_principal_id\", service_principal_password=\"service_principal_password\", subscription_id=\"subscription_id\", resource_group=\"resource_group\", workspace_name=\"workspace_name\", ) blob_storage_credentials = AzureBlobStorageCredentials(\"connection_string\") result = ml_register_datastore_blob_container( \"container\", ml_credentials, blob_storage_credentials, datastore_name=\"datastore_name\" ) return result ``` \"\"\" logger = get_run_logger () if datastore_name is None : datastore_name = container_name logger . info ( \"Registering %s container into %s datastore\" , container_name , datastore_name ) workspace = ml_credentials . get_workspace () async with blob_storage_credentials . get_client () as blob_service_client : credential = blob_service_client . credential account_name = credential . account_name account_key = credential . account_key partial_register = partial ( Datastore . register_azure_blob_container , workspace = workspace , datastore_name = datastore_name , container_name = container_name , account_name = account_name , account_key = account_key , overwrite = overwrite , create_if_not_exists = create_container_if_not_exists , ) result = await to_thread . run_sync ( partial_register ) if set_as_default : result . set_as_default () return result ml_upload_datastore ( path , ml_credentials , target_path = None , relative_root = None , datastore_name = None , overwrite = False ) async Uploads local files to a Datastore. Parameters: Name Type Description Default path Union [ str , Path , List [ Union [ str , Path ]]] The path to a single file, single directory, or a list of path to files to be uploaded. required ml_credentials 'AzureMlCredentials' Credentials to use for authentication with Azure. required target_path Union [ str , Path ] The location in the blob container to upload to. If None, then upload to root. None relative_root Union [ str , Path ] The root from which is used to determine the path of the files in the blob. For example, if we upload /path/to/file.txt, and we define base path to be /path, when file.txt is uploaded to the blob storage, it will have the path of /to/file.txt. None datastore_name str The name of the Datastore. If None , then the default Datastore of the Workspace is returned. None overwrite bool Overwrite existing file(s). False Example Upload Datastore object from prefect import flow from prefect_azure import AzureMlCredentials from prefect_azure.ml_datastore import ml_upload_datastore @flow def example_ml_upload_datastore_flow (): ml_credentials = AzureMlCredentials ( tenant_id = \"tenant_id\" , service_principal_id = \"service_principal_id\" , service_principal_password = \"service_principal_password\" , subscription_id = \"subscription_id\" , resource_group = \"resource_group\" , workspace_name = \"workspace_name\" , ) result = ml_upload_datastore ( \"path/to/dir/or/file\" , ml_credentials , datastore_name = \"datastore_name\" ) return result Source code in prefect_azure/ml_datastore.py 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 @task async def ml_upload_datastore ( path : Union [ str , Path , List [ Union [ str , Path ]]], ml_credentials : \"AzureMlCredentials\" , target_path : Union [ str , Path ] = None , relative_root : Union [ str , Path ] = None , datastore_name : str = None , overwrite : bool = False , ) -> \"DataReference\" : \"\"\" Uploads local files to a Datastore. Args: path: The path to a single file, single directory, or a list of path to files to be uploaded. ml_credentials: Credentials to use for authentication with Azure. target_path: The location in the blob container to upload to. If None, then upload to root. relative_root: The root from which is used to determine the path of the files in the blob. For example, if we upload /path/to/file.txt, and we define base path to be /path, when file.txt is uploaded to the blob storage, it will have the path of /to/file.txt. datastore_name: The name of the Datastore. If `None`, then the default Datastore of the Workspace is returned. overwrite: Overwrite existing file(s). Example: Upload Datastore object ```python from prefect import flow from prefect_azure import AzureMlCredentials from prefect_azure.ml_datastore import ml_upload_datastore @flow def example_ml_upload_datastore_flow(): ml_credentials = AzureMlCredentials( tenant_id=\"tenant_id\", service_principal_id=\"service_principal_id\", service_principal_password=\"service_principal_password\", subscription_id=\"subscription_id\", resource_group=\"resource_group\", workspace_name=\"workspace_name\", ) result = ml_upload_datastore( \"path/to/dir/or/file\", ml_credentials, datastore_name=\"datastore_name\" ) return result ``` \"\"\" logger = get_run_logger () logger . info ( \"Uploading %s into %s datastore\" , path , datastore_name ) datastore = await _get_datastore ( ml_credentials , datastore_name ) if isinstance ( path , Path ): path = str ( path ) elif isinstance ( path , list ) and isinstance ( path [ 0 ], Path ): path = [ str ( p ) for p in path ] if isinstance ( target_path , Path ): target_path = str ( target_path ) if isinstance ( relative_root , Path ): relative_root = str ( relative_root ) if isinstance ( path , str ) and os . path . isdir ( path ): partial_upload = partial ( datastore . upload , src_dir = path , target_path = target_path , overwrite = overwrite , show_progress = False , ) else : partial_upload = partial ( datastore . upload_files , files = path if isinstance ( path , list ) else [ path ], relative_root = relative_root , target_path = target_path , overwrite = overwrite , show_progress = False , ) result = await to_thread . run_sync ( partial_upload ) return result","title":"ML Datastore"},{"location":"ml_datastore/#prefect_azure.ml_datastore","text":"Tasks for interacting with Azure ML Datastore","title":"ml_datastore"},{"location":"ml_datastore/#prefect_azure.ml_datastore.ml_get_datastore","text":"Gets the Datastore within the Workspace. Parameters: Name Type Description Default ml_credentials 'AzureMlCredentials' Credentials to use for authentication with Azure. required datastore_name str The name of the Datastore. If None , then the default Datastore of the Workspace is returned. None Example Get Datastore object from prefect import flow from prefect_azure import AzureMlCredentials from prefect_azure.ml_datastore import ml_get_datastore @flow def example_ml_get_datastore_flow (): ml_credentials = AzureMlCredentials ( tenant_id = \"tenant_id\" , service_principal_id = \"service_principal_id\" , service_principal_password = \"service_principal_password\" , subscription_id = \"subscription_id\" , resource_group = \"resource_group\" , workspace_name = \"workspace_name\" , ) results = ml_get_datastore ( ml_credentials , datastore_name = \"datastore_name\" ) return results Source code in prefect_azure/ml_datastore.py 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 @task async def ml_get_datastore ( ml_credentials : \"AzureMlCredentials\" , datastore_name : str = None ) -> Datastore : \"\"\" Gets the Datastore within the Workspace. Args: ml_credentials: Credentials to use for authentication with Azure. datastore_name: The name of the Datastore. If `None`, then the default Datastore of the Workspace is returned. Example: Get Datastore object ```python from prefect import flow from prefect_azure import AzureMlCredentials from prefect_azure.ml_datastore import ml_get_datastore @flow def example_ml_get_datastore_flow(): ml_credentials = AzureMlCredentials( tenant_id=\"tenant_id\", service_principal_id=\"service_principal_id\", service_principal_password=\"service_principal_password\", subscription_id=\"subscription_id\", resource_group=\"resource_group\", workspace_name=\"workspace_name\", ) results = ml_get_datastore(ml_credentials, datastore_name=\"datastore_name\") return results ``` \"\"\" logger = get_run_logger () logger . info ( \"Getting datastore %s \" , datastore_name ) result = await _get_datastore ( ml_credentials , datastore_name ) return result","title":"ml_get_datastore()"},{"location":"ml_datastore/#prefect_azure.ml_datastore.ml_list_datastores","text":"Lists the Datastores in the Workspace. Parameters: Name Type Description Default ml_credentials 'AzureMlCredentials' Credentials to use for authentication with Azure. required Example List Datastore objects from prefect import flow from prefect_azure import AzureMlCredentials from prefect_azure.ml_datastore import ml_list_datastores @flow def example_ml_list_datastores_flow (): ml_credentials = AzureMlCredentials ( tenant_id = \"tenant_id\" , service_principal_id = \"service_principal_id\" , service_principal_password = \"service_principal_password\" , subscription_id = \"subscription_id\" , resource_group = \"resource_group\" , workspace_name = \"workspace_name\" , ) results = ml_list_datastores ( ml_credentials ) return results Source code in prefect_azure/ml_datastore.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 @task def ml_list_datastores ( ml_credentials : \"AzureMlCredentials\" ) -> Dict : \"\"\" Lists the Datastores in the Workspace. Args: ml_credentials: Credentials to use for authentication with Azure. Example: List Datastore objects ```python from prefect import flow from prefect_azure import AzureMlCredentials from prefect_azure.ml_datastore import ml_list_datastores @flow def example_ml_list_datastores_flow(): ml_credentials = AzureMlCredentials( tenant_id=\"tenant_id\", service_principal_id=\"service_principal_id\", service_principal_password=\"service_principal_password\", subscription_id=\"subscription_id\", resource_group=\"resource_group\", workspace_name=\"workspace_name\", ) results = ml_list_datastores(ml_credentials) return results ``` \"\"\" logger = get_run_logger () logger . info ( \"Listing datastores\" ) workspace = ml_credentials . get_workspace () results = workspace . datastores return results","title":"ml_list_datastores()"},{"location":"ml_datastore/#prefect_azure.ml_datastore.ml_register_datastore_blob_container","text":"Registers a Azure Blob Storage container as a Datastore in a Azure ML service Workspace. Parameters: Name Type Description Default container_name str The name of the container. required ml_credentials 'AzureMlCredentials' Credentials to use for authentication with Azure ML. required blob_storage_credentials 'AzureBlobStorageCredentials' Credentials to use for authentication with Azure Blob Storage. required datastore_name str The name of the datastore. If not defined, the container name will be used. None create_container_if_not_exists bool Create a container, if one does not exist with the given name. False overwrite bool Overwrite an existing datastore. If the datastore does not exist, it will be created. False set_as_default bool Set the created Datastore as the default datastore for the Workspace. False Example Upload Datastore object from prefect import flow from prefect_azure import AzureMlCredentials from prefect_azure.ml_datastore import ml_register_datastore_blob_container @flow def example_ml_register_datastore_blob_container_flow (): ml_credentials = AzureMlCredentials ( tenant_id = \"tenant_id\" , service_principal_id = \"service_principal_id\" , service_principal_password = \"service_principal_password\" , subscription_id = \"subscription_id\" , resource_group = \"resource_group\" , workspace_name = \"workspace_name\" , ) blob_storage_credentials = AzureBlobStorageCredentials ( \"connection_string\" ) result = ml_register_datastore_blob_container ( \"container\" , ml_credentials , blob_storage_credentials , datastore_name = \"datastore_name\" ) return result Source code in prefect_azure/ml_datastore.py 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 @task async def ml_register_datastore_blob_container ( container_name : str , ml_credentials : \"AzureMlCredentials\" , blob_storage_credentials : \"AzureBlobStorageCredentials\" , datastore_name : str = None , create_container_if_not_exists : bool = False , overwrite : bool = False , set_as_default : bool = False , ) -> \"AzureBlobDatastore\" : \"\"\" Registers a Azure Blob Storage container as a Datastore in a Azure ML service Workspace. Args: container_name: The name of the container. ml_credentials: Credentials to use for authentication with Azure ML. blob_storage_credentials: Credentials to use for authentication with Azure Blob Storage. datastore_name: The name of the datastore. If not defined, the container name will be used. create_container_if_not_exists: Create a container, if one does not exist with the given name. overwrite: Overwrite an existing datastore. If the datastore does not exist, it will be created. set_as_default: Set the created Datastore as the default datastore for the Workspace. Example: Upload Datastore object ```python from prefect import flow from prefect_azure import AzureMlCredentials from prefect_azure.ml_datastore import ml_register_datastore_blob_container @flow def example_ml_register_datastore_blob_container_flow(): ml_credentials = AzureMlCredentials( tenant_id=\"tenant_id\", service_principal_id=\"service_principal_id\", service_principal_password=\"service_principal_password\", subscription_id=\"subscription_id\", resource_group=\"resource_group\", workspace_name=\"workspace_name\", ) blob_storage_credentials = AzureBlobStorageCredentials(\"connection_string\") result = ml_register_datastore_blob_container( \"container\", ml_credentials, blob_storage_credentials, datastore_name=\"datastore_name\" ) return result ``` \"\"\" logger = get_run_logger () if datastore_name is None : datastore_name = container_name logger . info ( \"Registering %s container into %s datastore\" , container_name , datastore_name ) workspace = ml_credentials . get_workspace () async with blob_storage_credentials . get_client () as blob_service_client : credential = blob_service_client . credential account_name = credential . account_name account_key = credential . account_key partial_register = partial ( Datastore . register_azure_blob_container , workspace = workspace , datastore_name = datastore_name , container_name = container_name , account_name = account_name , account_key = account_key , overwrite = overwrite , create_if_not_exists = create_container_if_not_exists , ) result = await to_thread . run_sync ( partial_register ) if set_as_default : result . set_as_default () return result","title":"ml_register_datastore_blob_container()"},{"location":"ml_datastore/#prefect_azure.ml_datastore.ml_upload_datastore","text":"Uploads local files to a Datastore. Parameters: Name Type Description Default path Union [ str , Path , List [ Union [ str , Path ]]] The path to a single file, single directory, or a list of path to files to be uploaded. required ml_credentials 'AzureMlCredentials' Credentials to use for authentication with Azure. required target_path Union [ str , Path ] The location in the blob container to upload to. If None, then upload to root. None relative_root Union [ str , Path ] The root from which is used to determine the path of the files in the blob. For example, if we upload /path/to/file.txt, and we define base path to be /path, when file.txt is uploaded to the blob storage, it will have the path of /to/file.txt. None datastore_name str The name of the Datastore. If None , then the default Datastore of the Workspace is returned. None overwrite bool Overwrite existing file(s). False Example Upload Datastore object from prefect import flow from prefect_azure import AzureMlCredentials from prefect_azure.ml_datastore import ml_upload_datastore @flow def example_ml_upload_datastore_flow (): ml_credentials = AzureMlCredentials ( tenant_id = \"tenant_id\" , service_principal_id = \"service_principal_id\" , service_principal_password = \"service_principal_password\" , subscription_id = \"subscription_id\" , resource_group = \"resource_group\" , workspace_name = \"workspace_name\" , ) result = ml_upload_datastore ( \"path/to/dir/or/file\" , ml_credentials , datastore_name = \"datastore_name\" ) return result Source code in prefect_azure/ml_datastore.py 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 @task async def ml_upload_datastore ( path : Union [ str , Path , List [ Union [ str , Path ]]], ml_credentials : \"AzureMlCredentials\" , target_path : Union [ str , Path ] = None , relative_root : Union [ str , Path ] = None , datastore_name : str = None , overwrite : bool = False , ) -> \"DataReference\" : \"\"\" Uploads local files to a Datastore. Args: path: The path to a single file, single directory, or a list of path to files to be uploaded. ml_credentials: Credentials to use for authentication with Azure. target_path: The location in the blob container to upload to. If None, then upload to root. relative_root: The root from which is used to determine the path of the files in the blob. For example, if we upload /path/to/file.txt, and we define base path to be /path, when file.txt is uploaded to the blob storage, it will have the path of /to/file.txt. datastore_name: The name of the Datastore. If `None`, then the default Datastore of the Workspace is returned. overwrite: Overwrite existing file(s). Example: Upload Datastore object ```python from prefect import flow from prefect_azure import AzureMlCredentials from prefect_azure.ml_datastore import ml_upload_datastore @flow def example_ml_upload_datastore_flow(): ml_credentials = AzureMlCredentials( tenant_id=\"tenant_id\", service_principal_id=\"service_principal_id\", service_principal_password=\"service_principal_password\", subscription_id=\"subscription_id\", resource_group=\"resource_group\", workspace_name=\"workspace_name\", ) result = ml_upload_datastore( \"path/to/dir/or/file\", ml_credentials, datastore_name=\"datastore_name\" ) return result ``` \"\"\" logger = get_run_logger () logger . info ( \"Uploading %s into %s datastore\" , path , datastore_name ) datastore = await _get_datastore ( ml_credentials , datastore_name ) if isinstance ( path , Path ): path = str ( path ) elif isinstance ( path , list ) and isinstance ( path [ 0 ], Path ): path = [ str ( p ) for p in path ] if isinstance ( target_path , Path ): target_path = str ( target_path ) if isinstance ( relative_root , Path ): relative_root = str ( relative_root ) if isinstance ( path , str ) and os . path . isdir ( path ): partial_upload = partial ( datastore . upload , src_dir = path , target_path = target_path , overwrite = overwrite , show_progress = False , ) else : partial_upload = partial ( datastore . upload_files , files = path if isinstance ( path , list ) else [ path ], relative_root = relative_root , target_path = target_path , overwrite = overwrite , show_progress = False , ) result = await to_thread . run_sync ( partial_upload ) return result","title":"ml_upload_datastore()"}]}