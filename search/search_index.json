{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"prefect-azure","text":""},{"location":"#welcome","title":"Welcome!","text":"<p>prefect-azure is a collection of prebuilt Prefect tasks that can be used to quickly construct Prefect flows.</p>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#python-setup","title":"Python setup","text":"<p>Requires an installation of Python 3.7+</p> <p>We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv.</p> <p>These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation.</p>"},{"location":"#installation","title":"Installation","text":"<p>Install <code>prefect-azure</code> with <code>pip</code></p> <pre><code>pip install prefect-azure\n</code></pre> <p>To use Blob Storage: <pre><code>pip install \"prefect-azure[blob_storage]\"\n</code></pre></p> <p>To use Cosmos DB: <pre><code>pip install \"prefect-azure[cosmos_db]\"\n</code></pre></p> <p>To use ML Datastore: <pre><code>pip install \"prefect-azure[ml_datastore]\"\n</code></pre></p> <p>A list of available blocks in <code>prefect-azure</code> and their setup instructions can be found here.</p>"},{"location":"#download-a-blob","title":"Download a blob","text":"<pre><code>from prefect import flow\n\nfrom prefect_azure import AzureBlobStorageCredentials\nfrom prefect_azure.blob_storage import blob_storage_download\n\n@flow\ndef example_blob_storage_download_flow():\n    connection_string = \"connection_string\"\n    blob_storage_credentials = AzureBlobStorageCredentials(\n        connection_string=connection_string,\n    )\n    data = blob_storage_download(\n        blob=\"prefect.txt\",\n        container=\"prefect\",\n        azure_credentials=blob_storage_credentials,\n    )\n    return data\n\nexample_blob_storage_download_flow()\n</code></pre> <p>Use <code>with_options</code> to customize options on any existing task or flow: <pre><code>custom_blob_storage_download_flow = example_blob_storage_download_flow.with_options(\n    name=\"My custom task name\",\n    retries=2,\n    retry_delay_seconds=10,\n)\n</code></pre></p>"},{"location":"#run-a-command-on-an-azure-container-instance","title":"Run a command on an Azure container instance","text":"<pre><code>from prefect import flow\nfrom prefect_azure import AzureContainerInstanceCredentials\nfrom prefect_azure.container_instance import AzureContainerInstanceJob\n\n\n@flow\ndef container_instance_job_flow():\n    aci_credentials = AzureContainerInstanceCredentials.load(\"MY_BLOCK_NAME\")\n    container_instance_job = AzureContainerInstanceJob(\n        aci_credentials=aci_credentials,\n        resource_group_name=\"azure_resource_group.example.name\",\n        subscription_id=\"&lt;MY_AZURE_SUBSCRIPTION_ID&gt;\",\n        command=[\"echo\", \"hello world\"],\n    )\n    return container_instance_job.run()\n</code></pre>"},{"location":"#use-azure-container-instance-as-infrastructure","title":"Use Azure Container Instance as infrastructure","text":"<p>If we have <code>a_flow_module.py</code>:</p> <pre><code>from prefect import flow, get_run_logger\n\n@flow\ndef log_hello_flow(name=\"Marvin\"):\n    logger = get_run_logger()\n    logger.info(f\"{name} said hello!\")\n\nif __name__ == \"__main__\":\n    log_hello_flow()\n</code></pre> <p>We can run that flow using an Azure Container Instance, but first create the infrastructure block:</p> <pre><code>from prefect_azure import AzureContainerInstanceCredentials\nfrom prefect_azure.container_instance import AzureContainerInstanceJob\n\ncontainer_instance_job = AzureContainerInstanceJob(\n    aci_credentials=AzureContainerInstanceCredentials.load(\"MY_BLOCK_NAME\"),\n    resource_group_name=\"azure_resource_group.example.name\",\n    subscription_id=\"&lt;MY_AZURE_SUBSCRIPTION_ID&gt;\",\n)\ncontainer_instance_job.save(\"aci-dev\")\n</code></pre> <p>Then, create the deployment either on the UI or through the CLI: <pre><code>prefect deployment build a_flow_module.py:log_hello_flow --name aci-dev -ib container-instance-job/aci-dev\n</code></pre></p> <p>Visit Prefect Deployments for more information about deployments.</p> <p>For more tips on how to use tasks and flows in a Collection, check out Using Collections!</p>"},{"location":"#azure-container-instance-worker","title":"Azure Container Instance Worker","text":"<p>The Azure Container Instance worker is an excellent way to run  Prefect projects on Azure. </p> <p>To get started, create an Azure Container Instances typed work pool: <pre><code>prefect work-pool create -t azure-container-instance my-aci-work-pool\n</code></pre></p> <p>Then, run a worker that pulls jobs from the work pool: <pre><code>prefect worker start -n my-aci-worker -p my-aci-work-pool\n</code></pre></p> <p>The worker should automatically read the work pool's type and start an  Azure Container Instance worker.</p>"},{"location":"#resources","title":"Resources","text":"<p>If you encounter and bugs while using <code>prefect-azure</code>, feel free to open an issue in the prefect-azure repository.</p> <p>If you have any questions or issues while using <code>prefect-azure</code>, you can find help in either the Prefect Discourse forum or the Prefect Slack community</p> <p>Feel free to star or watch <code>prefect-azure</code> for updates too!</p>"},{"location":"#contributing","title":"Contributing","text":"<p>If you'd like to help contribute to fix an issue or add a feature to <code>prefect-azure</code>, please propose changes through a pull request from a fork of the repository.</p> <p>Here are the steps:</p> <ol> <li>Fork the repository</li> <li>Clone the forked repository</li> <li>Install the repository and its dependencies: <pre><code>pip install -e \".[dev]\"\n</code></pre></li> <li>Make desired changes</li> <li>Add tests</li> <li>Insert an entry to CHANGELOG.md</li> <li>Install <code>pre-commit</code> to perform quality checks prior to commit: <pre><code>pre-commit install\n</code></pre></li> <li><code>git commit</code>, <code>git push</code>, and create a pull request</li> </ol>"},{"location":"blob_storage/","title":"Blob Storage","text":""},{"location":"blob_storage/#prefect_azure.blob_storage","title":"<code>prefect_azure.blob_storage</code>","text":"<p>Tasks for interacting with Azure Blob Storage</p>"},{"location":"blob_storage/#prefect_azure.blob_storage-classes","title":"Classes","text":""},{"location":"blob_storage/#prefect_azure.blob_storage-functions","title":"Functions","text":""},{"location":"blob_storage/#prefect_azure.blob_storage.blob_storage_download","title":"<code>blob_storage_download(container, blob, blob_storage_credentials)</code>  <code>async</code>","text":"<p>Downloads a blob with a given key from a given Blob Storage container.</p> <p>Parameters:</p> Name Type Description Default <code>blob</code> <code>str</code> <p>Name of the blob within this container to retrieve.</p> required <code>container</code> <code>str</code> <p>Name of the Blob Storage container to retrieve from.</p> required <code>blob_storage_credentials</code> <code>AzureBlobStorageCredentials</code> <p>Credentials to use for authentication with Azure.</p> required <p>Returns:</p> Type Description <code>bytes</code> <p>A <code>bytes</code> representation of the downloaded blob.</p> Example <p>Download a file from a Blob Storage container <pre><code>from prefect import flow\n\nfrom prefect_azure import AzureBlobStorageCredentials\nfrom prefect_azure.blob_storage import blob_storage_download\n\n@flow\ndef example_blob_storage_download_flow():\n    connection_string = \"connection_string\"\n    blob_storage_credentials = AzureBlobStorageCredentials(\n        connection_string=connection_string,\n    )\n    data = blob_storage_download(\n        container=\"prefect\",\n        blob=\"prefect.txt\",\n        blob_storage_credentials=blob_storage_credentials,\n    )\n    return data\n\nexample_blob_storage_download_flow()\n</code></pre></p> Source code in <code>prefect_azure/blob_storage.py</code> <pre><code>@task\nasync def blob_storage_download(\n    container: str,\n    blob: str,\n    blob_storage_credentials: \"AzureBlobStorageCredentials\",\n) -&gt; bytes:\n\"\"\"\n    Downloads a blob with a given key from a given Blob Storage container.\n    Args:\n        blob: Name of the blob within this container to retrieve.\n        container: Name of the Blob Storage container to retrieve from.\n        blob_storage_credentials: Credentials to use for authentication with Azure.\n    Returns:\n        A `bytes` representation of the downloaded blob.\n    Example:\n        Download a file from a Blob Storage container\n        ```python\n        from prefect import flow\n\n        from prefect_azure import AzureBlobStorageCredentials\n        from prefect_azure.blob_storage import blob_storage_download\n\n        @flow\n        def example_blob_storage_download_flow():\n            connection_string = \"connection_string\"\n            blob_storage_credentials = AzureBlobStorageCredentials(\n                connection_string=connection_string,\n            )\n            data = blob_storage_download(\n                container=\"prefect\",\n                blob=\"prefect.txt\",\n                blob_storage_credentials=blob_storage_credentials,\n            )\n            return data\n\n        example_blob_storage_download_flow()\n        ```\n    \"\"\"\n    logger = get_run_logger()\n    logger.info(\"Downloading blob from container %s with key %s\", container, blob)\n\n    async with blob_storage_credentials.get_blob_client(container, blob) as blob_client:\n        blob_obj = await blob_client.download_blob()\n        output = await blob_obj.content_as_bytes()\n\n    return output\n</code></pre>"},{"location":"blob_storage/#prefect_azure.blob_storage.blob_storage_list","title":"<code>blob_storage_list(container, blob_storage_credentials, name_starts_with=None, include=None, **kwargs)</code>  <code>async</code>","text":"<p>List objects from a given Blob Storage container.</p> <p>Parameters:</p> Name Type Description Default <code>container</code> <code>str</code> <p>Name of the Blob Storage container to retrieve from.</p> required <code>blob_storage_credentials</code> <code>AzureBlobStorageCredentials</code> <p>Credentials to use for authentication with Azure.</p> required <code>name_starts_with</code> <code>str</code> <p>Filters the results to return only blobs whose names begin with the specified prefix.</p> <code>None</code> <code>include</code> <code>Union[str, List[str]]</code> <p>Specifies one or more additional datasets to include in the response. Options include: 'snapshots', 'metadata', 'uncommittedblobs', 'copy', 'deleted', 'deletedwithversions', 'tags', 'versions', 'immutabilitypolicy', 'legalhold'.</p> <code>None</code> <code>**kwargs</code> <p>Addtional kwargs passed to <code>ContainerClient.list_blobs()</code></p> <code>{}</code> <p>Returns:</p> Type Description <code>List[BlobProperties]</code> <p>A <code>list</code> of <code>dict</code>s containing metadata about the blob.</p> Example <pre><code>from prefect import flow\n\nfrom prefect_azure import AzureBlobStorageCredentials\nfrom prefect_azure.blob_storage import blob_storage_list\n\n@flow\ndef example_blob_storage_list_flow():\n    connection_string = \"connection_string\"\n    blob_storage_credentials = AzureBlobStorageCredentials(\n        connection_string=\"connection_string\",\n    )\n    data = blob_storage_list(\n        container=\"container\",\n        blob_storage_credentials=blob_storage_credentials,\n    )\n    return data\n\nexample_blob_storage_list_flow()\n</code></pre> Source code in <code>prefect_azure/blob_storage.py</code> <pre><code>@task\nasync def blob_storage_list(\n    container: str,\n    blob_storage_credentials: \"AzureBlobStorageCredentials\",\n    name_starts_with: str = None,\n    include: Union[str, List[str]] = None,\n    **kwargs\n) -&gt; List[\"BlobProperties\"]:\n\"\"\"\n    List objects from a given Blob Storage container.\n    Args:\n        container: Name of the Blob Storage container to retrieve from.\n        blob_storage_credentials: Credentials to use for authentication with Azure.\n        name_starts_with: Filters the results to return only blobs whose names\n            begin with the specified prefix.\n        include: Specifies one or more additional datasets to include in the response.\n            Options include: 'snapshots', 'metadata', 'uncommittedblobs', 'copy',\n            'deleted', 'deletedwithversions', 'tags', 'versions', 'immutabilitypolicy',\n            'legalhold'.\n        **kwargs: Addtional kwargs passed to `ContainerClient.list_blobs()`\n    Returns:\n        A `list` of `dict`s containing metadata about the blob.\n    Example:\n        ```python\n        from prefect import flow\n\n        from prefect_azure import AzureBlobStorageCredentials\n        from prefect_azure.blob_storage import blob_storage_list\n\n        @flow\n        def example_blob_storage_list_flow():\n            connection_string = \"connection_string\"\n            blob_storage_credentials = AzureBlobStorageCredentials(\n                connection_string=\"connection_string\",\n            )\n            data = blob_storage_list(\n                container=\"container\",\n                blob_storage_credentials=blob_storage_credentials,\n            )\n            return data\n\n        example_blob_storage_list_flow()\n        ```\n    \"\"\"\n    logger = get_run_logger()\n    logger.info(\"Listing blobs from container %s\", container)\n\n    async with blob_storage_credentials.get_container_client(\n        container\n    ) as container_client:\n        blobs = [\n            blob\n            async for blob in container_client.list_blobs(\n                name_starts_with=name_starts_with, include=include, **kwargs\n            )\n        ]\n\n    return blobs\n</code></pre>"},{"location":"blob_storage/#prefect_azure.blob_storage.blob_storage_upload","title":"<code>blob_storage_upload(data, container, blob_storage_credentials, blob=None, overwrite=False)</code>  <code>async</code>","text":"<p>Uploads data to an Blob Storage container.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>bytes</code> <p>Bytes representation of data to upload to Blob Storage.</p> required <code>container</code> <code>str</code> <p>Name of the Blob Storage container to upload to.</p> required <code>blob_storage_credentials</code> <code>AzureBlobStorageCredentials</code> <p>Credentials to use for authentication with Azure.</p> required <code>blob</code> <code>str</code> <p>Name of the blob within this container to retrieve.</p> <code>None</code> <code>overwrite</code> <code>bool</code> <p>If <code>True</code>, an existing blob with the same name will be overwritten. Defaults to <code>False</code> and an error will be thrown if the blob already exists.</p> <code>False</code> <p>Returns:</p> Type Description <code>str</code> <p>The blob name of the uploaded object</p> Example <p>Read and upload a file to a Blob Storage container <pre><code>from prefect import flow\n\nfrom prefect_azure import AzureBlobStorageCredentials\nfrom prefect_azure.blob_storage import blob_storage_upload\n\n@flow\ndef example_blob_storage_upload_flow():\n    connection_string = \"connection_string\"\n    blob_storage_credentials = AzureBlobStorageCredentials(\n        connection_string=connection_string,\n    )\n    with open(\"data.csv\", \"rb\") as f:\n        blob = blob_storage_upload(\n            data=f.read(),\n            container=\"container\",\n            blob=\"data.csv\",\n            blob_storage_credentials=blob_storage_credentials,\n            overwrite=False,\n        )\n    return blob\n\nexample_blob_storage_upload_flow()\n</code></pre></p> Source code in <code>prefect_azure/blob_storage.py</code> <pre><code>@task\nasync def blob_storage_upload(\n    data: bytes,\n    container: str,\n    blob_storage_credentials: \"AzureBlobStorageCredentials\",\n    blob: str = None,\n    overwrite: bool = False,\n) -&gt; str:\n\"\"\"\n    Uploads data to an Blob Storage container.\n    Args:\n        data: Bytes representation of data to upload to Blob Storage.\n        container: Name of the Blob Storage container to upload to.\n        blob_storage_credentials: Credentials to use for authentication with Azure.\n        blob: Name of the blob within this container to retrieve.\n        overwrite: If `True`, an existing blob with the same name will be overwritten.\n            Defaults to `False` and an error will be thrown if the blob already exists.\n    Returns:\n        The blob name of the uploaded object\n    Example:\n        Read and upload a file to a Blob Storage container\n        ```python\n        from prefect import flow\n\n        from prefect_azure import AzureBlobStorageCredentials\n        from prefect_azure.blob_storage import blob_storage_upload\n\n        @flow\n        def example_blob_storage_upload_flow():\n            connection_string = \"connection_string\"\n            blob_storage_credentials = AzureBlobStorageCredentials(\n                connection_string=connection_string,\n            )\n            with open(\"data.csv\", \"rb\") as f:\n                blob = blob_storage_upload(\n                    data=f.read(),\n                    container=\"container\",\n                    blob=\"data.csv\",\n                    blob_storage_credentials=blob_storage_credentials,\n                    overwrite=False,\n                )\n            return blob\n\n        example_blob_storage_upload_flow()\n        ```\n    \"\"\"\n    logger = get_run_logger()\n    logger.info(\"Uploading blob to container %s with key %s\", container, blob)\n\n    # create key if not provided\n    if blob is None:\n        blob = str(uuid.uuid4())\n\n    async with blob_storage_credentials.get_blob_client(container, blob) as blob_client:\n        await blob_client.upload_blob(data, overwrite=overwrite)\n\n    return blob\n</code></pre>"},{"location":"container_instance/","title":"Container Instance Block","text":""},{"location":"container_instance/#prefect_azure.container_instance","title":"<code>prefect_azure.container_instance</code>","text":"<p> Integrations with the Azure Container Instances service. Note this module is experimental. The interfaces within may change without notice.</p> <p>The <code>AzureContainerInstanceJob</code> infrastructure block in this module is ideally configured via the Prefect UI and run via a Prefect agent, but it can be called directly as demonstrated in the following examples.</p> <p>Examples:</p> <p>Run a command using an Azure Container Instances container. <pre><code>AzureContainerInstanceJob(command=[\"echo\", \"hello world\"]).run()\n</code></pre></p> <p>Run a command and stream the container's output to the local terminal. <pre><code>AzureContainerInstanceJob(\n    command=[\"echo\", \"hello world\"],\n    stream_output=True,\n)\n</code></pre></p> <p>Run a command with a specific image <pre><code>AzureContainerInstanceJob(command=[\"echo\", \"hello world\"], image=\"alpine:latest\")\n</code></pre></p> <p>Run a task with custom memory and CPU requirements <pre><code>AzureContainerInstanceJob(command=[\"echo\", \"hello world\"], memory=1.0, cpu=1.0)\n</code></pre></p> <p>Run a task with custom memory and CPU requirements <pre><code>AzureContainerInstanceJob(command=[\"echo\", \"hello world\"], memory=1.0, cpu=1.0)\n</code></pre></p> <p>Run a task with custom memory, CPU, and GPU requirements <pre><code>AzureContainerInstanceJob(command=[\"echo\", \"hello world\"], memory=1.0, cpu=1.0,\ngpu_count=1, gpu_sku=\"V100\")\n</code></pre></p> <p>Run a task with custom environment variables <pre><code>AzureContainerInstanceJob(\n    command=[\"echo\", \"hello $PLANET\"],\n    env={\"PLANET\": \"earth\"}\n)\n</code></pre></p> <p>Run a task that uses a private ACR registry with a managed identity <pre><code>AzureContainerInstanceJob(\n    command=[\"echo\", \"hello $PLANET\"],\n    image=\"my-registry.azurecr.io/my-image\",\n    image_registry=ACRManagedIdentity(\n        registry_url=\"my-registry.azurecr.io\",\n        identity=\"/my/managed/identity/123abc\"\n    )\n)\n</code></pre></p>"},{"location":"container_instance/#prefect_azure.container_instance-classes","title":"Classes","text":""},{"location":"container_instance/#prefect_azure.container_instance.ACRManagedIdentity","title":"<code>ACRManagedIdentity</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>Use a Managed Identity to access Azure Container registry. Requires the user-assigned managed identity be available to the ACI container group.</p> Source code in <code>prefect_azure/container_instance.py</code> <pre><code>class ACRManagedIdentity(BaseModel):\n\"\"\"\n    Use a Managed Identity to access Azure Container registry. Requires the\n    user-assigned managed identity be available to the ACI container group.\n    \"\"\"\n\n    registry_url: str = Field(\n        default=...,\n        title=\"Registry URL\",\n        description=(\n            \"The URL to the registry, such as myregistry.azurecr.io. Generally, 'http' \"\n            \"or 'https' can be omitted.\"\n        ),\n    )\n    identity: str = Field(\n        default=...,\n        description=(\n            \"The user-assigned Azure managed identity for the private registry.\"\n        ),\n    )\n</code></pre>"},{"location":"container_instance/#prefect_azure.container_instance.AzureContainerInstanceJob","title":"<code>AzureContainerInstanceJob</code>","text":"<p>         Bases: <code>Infrastructure</code></p> <p> Run a command using a container on Azure Container Instances. Note this block is experimental. The interface may change without notice.</p> Source code in <code>prefect_azure/container_instance.py</code> <pre><code>class AzureContainerInstanceJob(Infrastructure):\n\"\"\"\n    &lt;span class=\"badge-api experimental\"/&gt;\n    Run a command using a container on Azure Container Instances.\n    Note this block is experimental. The interface may change without notice.\n    \"\"\"\n\n    _block_type_name = \"Azure Container Instance Job\"\n    _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/6AiQ6HRIft8TspZH7AfyZg/39fd82bdbb186db85560f688746c8cdd/azure.png?h=250\"  # noqa\n    _description = \"Run tasks using Azure Container Instances. Note this block is experimental. The interface may change without notice.\"  # noqa\n    _documentation_url = \"https://prefecthq.github.io/prefect-azure/container_instance/#prefect_azure.container_instance.AzureContainerInstanceJob\"  # noqa\n\n    type: Literal[\"container-instance-job\"] = Field(\n        default=\"container-instance-job\", description=\"The slug for this task type.\"\n    )\n    aci_credentials: AzureContainerInstanceCredentials = Field(\n        default_factory=AzureContainerInstanceCredentials,\n        description=(\n            \"Credentials for Azure Container Instances; \"\n            \"if not provided will attempt to use DefaultAzureCredentials.\"\n        ),\n    )\n    resource_group_name: str = Field(\n        default=...,\n        title=\"Azure Resource Group Name\",\n        description=(\n            \"The name of the Azure Resource Group in which to run Prefect ACI tasks.\"\n        ),\n    )\n    subscription_id: SecretStr = Field(\n        default=...,\n        title=\"Azure Subscription ID\",\n        description=\"The ID of the Azure subscription to create containers under.\",\n    )\n    identities: Optional[List[str]] = Field(\n        title=\"Identities\",\n        default=None,\n        description=(\n            \"A list of user-assigned identities to associate with the container group. \"\n            \"The identities should be an ARM resource IDs in the form: \"\n            \"'/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.\"  # noqa\n        ),\n    )\n    image: Optional[str] = Field(\n        default_factory=get_prefect_image_name,\n        description=(\n            \"The image to use for the Prefect container in the task. This value \"\n            \"defaults to a Prefect base image matching your local versions.\"\n        ),\n    )\n    entrypoint: Optional[str] = Field(\n        default=DEFAULT_CONTAINER_ENTRYPOINT,\n        description=(\n            \"The entrypoint of the container you wish you run. This value \"\n            \"defaults to the entrypoint used by Prefect images and should only be \"\n            \"changed when using a custom image that is not based on an official \"\n            \"Prefect image. Any commands set on deployments will be passed \"\n            \"to the entrypoint as parameters.\"\n        ),\n    )\n    image_registry: Optional[\n        Union[\n            prefect.infrastructure.docker.DockerRegistry,\n            ACRManagedIdentity,\n        ]\n    ] = Field(\n        default=None,\n        title=\"Image Registry (Optional)\",\n        description=(\n            \"To use any private container registry with a username and password, \"\n            \"choose DockerRegistry. To use a private Azure Container Registry \"\n            \"with a managed identity, choose ACRManagedIdentity.\"\n        ),\n    )\n    cpu: float = Field(\n        title=\"CPU\",\n        default=ACI_DEFAULT_CPU,\n        description=(\n            \"The number of virtual CPUs to assign to the task container. \"\n            f\"If not provided, a default value of {ACI_DEFAULT_CPU} will be used.\"\n        ),\n    )\n    gpu_count: Optional[int] = Field(\n        title=\"GPU Count\",\n        default=None,\n        description=(\n            \"The number of GPUs to assign to the task container. \"\n            \"If not provided, no GPU will be used.\"\n        ),\n    )\n    gpu_sku: Optional[str] = Field(\n        title=\"GPU SKU\",\n        default=None,\n        description=(\n            \"The Azure GPU SKU to use. See the ACI documentation for a list of \"\n            \"GPU SKUs available in each Azure region.\"\n        ),\n    )\n    memory: float = Field(\n        default=ACI_DEFAULT_MEMORY,\n        description=(\n            \"The amount of memory in gigabytes to provide to the ACI task. Valid \"\n            \"amounts are specified in the Azure documentation. If not provided, a \"\n            f\"default value of  {ACI_DEFAULT_MEMORY} will be used unless present \"\n            \"on the task definition.\"\n        ),\n    )\n    subnet_ids: Optional[List[str]] = Field(\n        default=None,\n        title=\"Subnet IDs\",\n        description=\"A list of Azure subnet IDs the container should be connected to.\",\n    )\n    dns_servers: Optional[List[str]] = Field(\n        default=None,\n        title=\"DNS Servers\",\n        description=\"A list of custom DNS Servers the container should use.\",\n    )\n    stream_output: Optional[bool] = Field(\n        default=None,\n        description=(\n            \"If `True`, logs will be streamed from the Prefect container to the local \"\n            \"console.\"\n        ),\n    )\n    env: Dict[str, Optional[str]] = Field(\n        title=\"Environment Variables\",\n        default_factory=dict,\n        description=(\n            \"Environment variables to provide to the task run. These variables are set \"\n            \"on the Prefect container at task runtime. These will not be set on the \"\n            \"task definition.\"\n        ),\n    )\n    # Execution settings\n    task_start_timeout_seconds: int = Field(\n        default=240,\n        description=(\n            \"The amount of time to watch for the start of the ACI container. \"\n            \"before marking it as failed.\"\n        ),\n    )\n    task_watch_poll_interval: float = Field(\n        default=5.0,\n        description=(\n            \"The number of seconds to wait between Azure API calls while monitoring \"\n            \"the state of an Azure Container Instances task.\"\n        ),\n    )\n\n    @sync_compatible\n    async def run(\n        self, task_status: Optional[TaskStatus] = None\n    ) -&gt; AzureContainerInstanceJobResult:\n\"\"\"\n        Runs the configured task using an ACI container.\n\n        Args:\n            task_status: An optional `TaskStatus` to update when the container starts.\n\n        Returns:\n            An `AzureContainerInstanceJobResult` with the container's exit code.\n        \"\"\"\n\n        run_start_time = datetime.datetime.now(datetime.timezone.utc)\n\n        container = self._configure_container()\n        container_group = self._configure_container_group(container)\n        created_container_group = None\n\n        aci_client = self.aci_credentials.get_container_client(\n            self.subscription_id.get_secret_value()\n        )\n\n        self.logger.info(\n            f\"{self._log_prefix}: Preparing to run command {' '.join(self.command)!r} \"\n            f\"in container {container.name!r} ({self.image})...\"\n        )\n        try:\n            self.logger.info(f\"{self._log_prefix}: Waiting for container creation...\")\n            # Create the container group and wait for it to start\n            creation_status_poller = await run_sync_in_worker_thread(\n                aci_client.container_groups.begin_create_or_update,\n                self.resource_group_name,\n                container.name,\n                container_group,\n            )\n            created_container_group = await run_sync_in_worker_thread(\n                self._wait_for_task_container_start, creation_status_poller\n            )\n\n            # If creation succeeded, group provisioning state should be 'Succeeded'\n            # and the group should have a single container\n            if self._provisioning_succeeded(created_container_group):\n                self.logger.info(f\"{self._log_prefix}: Running command...\")\n                if task_status:\n                    task_status.started(value=created_container_group.name)\n                status_code = await run_sync_in_worker_thread(\n                    self._watch_task_and_get_exit_code,\n                    aci_client,\n                    created_container_group,\n                    run_start_time,\n                )\n                self.logger.info(f\"{self._log_prefix}: Completed command run.\")\n            else:\n                raise RuntimeError(f\"{self._log_prefix}: Container creation failed.\")\n\n        finally:\n            if created_container_group:\n                await self._wait_for_container_group_deletion(\n                    aci_client, created_container_group\n                )\n\n        return AzureContainerInstanceJobResult(\n            identifier=created_container_group.name, status_code=status_code\n        )\n\n    async def kill(\n        self,\n        container_group_name: str,\n        grace_seconds: int = CONTAINER_GROUP_DELETION_TIMEOUT_SECONDS,\n    ):\n\"\"\"\n        Kill a flow running in an ACI container group.\n\n        Args:\n            container_group_name: The container group name yielded by\n                `AzureContainerInstanceJob.run`.\n        \"\"\"\n        # ACI does not provide a way to specify grace period, but it gives\n        # applications ~30 seconds to gracefully terminate before killing\n        # a container group.\n        if grace_seconds != CONTAINER_GROUP_DELETION_TIMEOUT_SECONDS:\n            self.logger.warning(\n                f\"{self._log_prefix}: Kill grace period of {grace_seconds}s requested, \"\n                f\"but ACI does not support grace period configuration.\"\n            )\n\n        aci_client = self.aci_credentials.get_container_client(\n            self.subscription_id.get_secret_value()\n        )\n\n        # get the container group to check that it still exists\n        try:\n            container_group = aci_client.container_groups.get(\n                resource_group_name=self.resource_group_name,\n                container_group_name=container_group_name,\n            )\n        except ResourceNotFoundError as exc:\n            # the container group no longer exists, so there's nothing to cancel\n            raise InfrastructureNotFound(\n                f\"Cannot stop ACI job: container group {container_group_name} \"\n                \"no longer exists.\"\n            ) from exc\n\n        # get the container state to check if the container has terminated\n        container = self._get_container(container_group)\n        container_state = container.instance_view.current_state.state\n\n        # the container group needs to be deleted regardless of whether the container\n        # already terminated\n        await self._wait_for_container_group_deletion(aci_client, container_group)\n\n        # if the container had already terminated, raise an exception to let the agent\n        # know the flow was not cancelled\n        if container_state == ContainerRunState.TERMINATED:\n            raise InfrastructureNotAvailable(\n                f\"Cannot stop ACI job: container group {container_group.name} exists, \"\n                f\"but container {container.name} has already terminated.\"\n            )\n\n    def preview(self) -&gt; str:\n\"\"\"\n        Provides a summary of how the container will be created when `run` is called.\n\n        Returns:\n           A string containing the summary.\n        \"\"\"\n        preview = {\n            \"container_name\": \"&lt;generated when run&gt;\",\n            \"resource_group_name\": self.resource_group_name,\n            \"memory\": self.memory,\n            \"cpu\": self.cpu,\n            \"gpu_count\": self.gpu_count,\n            \"gpu_sku\": self.gpu_sku,\n            \"env\": self._get_environment(),\n        }\n\n        return json.dumps(preview)\n\n    def _configure_container(self) -&gt; Container:\n\"\"\"\n        Configures an Azure `Container` using data from the block's fields.\n\n        Returns:\n            An instance of `Container` ready to submit to Azure.\n        \"\"\"\n\n        # setup container environment variables\n        environment = [\n            EnvironmentVariable(name=k, secure_value=v)\n            if k in ENV_SECRETS\n            else EnvironmentVariable(name=k, value=v)\n            for (k, v) in self._get_environment().items()\n        ]\n\n        # all container names in a resource group must be unique\n        if self.name:\n            slugified_name = slugify(\n                self.name,\n                max_length=52,\n                regex_pattern=r\"[^a-zA-Z0-9-]+\",\n            )\n            random_suffix = \"\".join(\n                random.choices(string.ascii_lowercase + string.digits, k=10)\n            )\n            container_name = slugified_name + \"-\" + random_suffix\n        else:\n            container_name = str(uuid.uuid4())\n\n        container_resource_requirements = self._configure_container_resources()\n\n        # add the entrypoint if provided, because creating an ACI container with a\n        # command overrides the container's built-in entrypoint.\n        if self.entrypoint:\n            self.command.insert(0, self.entrypoint)\n\n        return Container(\n            name=container_name,\n            image=self.image,\n            command=self.command,\n            resources=container_resource_requirements,\n            environment_variables=environment,\n        )\n\n    def _configure_container_resources(self) -&gt; ResourceRequirements:\n\"\"\"\n        Configures the container's memory, CPU, and GPU resources.\n\n        Returns:\n            A `ResourceRequirements` instance initialized with data from this\n            `AzureContainerInstanceJob` block.\n        \"\"\"\n\n        gpu_resource = (\n            GpuResource(count=self.gpu_count, sku=self.gpu_sku)\n            if self.gpu_count and self.gpu_sku\n            else None\n        )\n        container_resource_requests = ResourceRequests(\n            memory_in_gb=self.memory, cpu=self.cpu, gpu=gpu_resource\n        )\n\n        return ResourceRequirements(requests=container_resource_requests)\n\n    def _configure_container_group(self, container: Container) -&gt; ContainerGroup:\n\"\"\"\n        Configures the container group needed to start a container on ACI.\n\n        Args:\n            container: An initialized instance of `Container`.\n\n        Returns:\n            An initialized `ContainerGroup` ready to submit to Azure.\n        \"\"\"\n\n        # Load the resource group, so we can set the container group location\n        # correctly.\n\n        resource_group_client = self.aci_credentials.get_resource_client(\n            self.subscription_id.get_secret_value()\n        )\n\n        resource_group = resource_group_client.resource_groups.get(\n            self.resource_group_name\n        )\n\n        image_registry_credentials = self._create_image_registry_credentials(\n            self.image_registry\n        )\n\n        identity = (\n            ContainerGroupIdentity(\n                type=\"UserAssigned\",\n                # The Azure API only uses the dict keys and ignores values when\n                # creating a container group. Using empty `UserAssignedIdentities`\n                # instances as dict values satisfies Python type checkers.\n                user_assigned_identities={\n                    identity: UserAssignedIdentities() for identity in self.identities\n                },\n            )\n            if self.identities\n            else None\n        )\n\n        subnet_ids = (\n            [ContainerGroupSubnetId(id=subnet_id) for subnet_id in self.subnet_ids]\n            if self.subnet_ids\n            else None\n        )\n\n        dns_config = (\n            DnsConfiguration(name_servers=self.dns_servers)\n            if self.dns_servers\n            else None\n        )\n\n        return ContainerGroup(\n            location=resource_group.location,\n            identity=identity,\n            containers=[container],\n            os_type=OperatingSystemTypes.linux,\n            restart_policy=ContainerGroupRestartPolicy.never,\n            image_registry_credentials=image_registry_credentials,\n            subnet_ids=subnet_ids,\n            dns_config=dns_config,\n        )\n\n    @staticmethod\n    def _create_image_registry_credentials(\n        image_registry: Union[\n            prefect.infrastructure.docker.DockerRegistry,\n            ACRManagedIdentity,\n            None,\n        ]\n    ):\n\"\"\"\n        Create image registry credentials based on the type of image_registry provided.\n\n        Args:\n            image_registry: An instance of a DockerRegistry or\n            ACRManagedIdentity object.\n\n        Returns:\n            A list containing an ImageRegistryCredential object if the input is a\n            `DockerRegistry` or `ACRManagedIdentity`, or None if the\n            input doesn't match any of the expected types.\n        \"\"\"\n        if image_registry and isinstance(\n            image_registry, prefect.infrastructure.docker.DockerRegistry\n        ):\n            return [\n                ImageRegistryCredential(\n                    server=image_registry.registry_url,\n                    username=image_registry.username,\n                    password=image_registry.password.get_secret_value(),\n                )\n            ]\n        elif image_registry and isinstance(image_registry, ACRManagedIdentity):\n            return [\n                ImageRegistryCredential(\n                    server=image_registry.registry_url,\n                    identity=image_registry.identity,\n                )\n            ]\n        else:\n            return None\n\n    def _wait_for_task_container_start(\n        self, creation_status_poller: LROPoller[ContainerGroup]\n    ) -&gt; ContainerGroup:\n\"\"\"\n        Wait for the result of group and container creation.\n\n        Args:\n            creation_status_poller: Poller returned by the Azure SDK.\n\n        Raises:\n            RuntimeError: Raised if the timeout limit is exceeded before the\n            container starts.\n\n        Returns:\n            A `ContainerGroup` representing the current status of the group being\n            watched.\n        \"\"\"\n\n        t0 = time.time()\n        timeout = self.task_start_timeout_seconds\n\n        while not creation_status_poller.done():\n            elapsed_time = time.time() - t0\n\n            if timeout and elapsed_time &gt; timeout:\n                raise RuntimeError(\n                    (\n                        f\"Timed out after {elapsed_time}s while watching waiting for \"\n                        \"container start.\"\n                    )\n                )\n            time.sleep(self.task_watch_poll_interval)\n\n        return creation_status_poller.result()\n\n    def _watch_task_and_get_exit_code(\n        self,\n        client: ContainerInstanceManagementClient,\n        container_group: ContainerGroup,\n        run_start_time: datetime.datetime,\n    ) -&gt; int:\n\"\"\"\n        Waits until the container finishes running and obtains its exit code.\n\n        Args:\n            client: An initialized Azure `ContainerInstanceManagementClient`\n            container_group: The `ContainerGroup` in which the container resides.\n\n        Returns:\n            An `int` representing the container's exit code.\n        \"\"\"\n\n        status_code = -1\n        running_container = self._get_container(container_group)\n        current_state = running_container.instance_view.current_state.state\n\n        # get any logs the container has already generated\n        last_log_time = run_start_time\n        if self.stream_output:\n            last_log_time = self._get_and_stream_output(\n                client, container_group, last_log_time\n            )\n\n        # set exit code if flow run already finished:\n        if current_state == ContainerRunState.TERMINATED:\n            status_code = running_container.instance_view.current_state.exit_code\n\n        while current_state != ContainerRunState.TERMINATED:\n            try:\n                container_group = client.container_groups.get(\n                    resource_group_name=self.resource_group_name,\n                    container_group_name=container_group.name,\n                )\n            except ResourceNotFoundError:\n                self.logger.exception(\n                    f\"{self._log_prefix}: Container group was deleted before flow run \"\n                    \"completed, likely due to flow cancellation.\"\n                )\n\n                # since the flow was cancelled, exit early instead of raising an\n                # exception\n                return status_code\n\n            container = self._get_container(container_group)\n            current_state = container.instance_view.current_state.state\n\n            if current_state == ContainerRunState.TERMINATED:\n                status_code = container.instance_view.current_state.exit_code\n                # break instead of waiting for next loop iteration because\n                # trying to read logs from a terminated container raises an exception\n                break\n\n            if self.stream_output:\n                last_log_time = self._get_and_stream_output(\n                    client, container_group, last_log_time\n                )\n\n            time.sleep(self.task_watch_poll_interval)\n\n        return status_code\n\n    async def _wait_for_container_group_deletion(\n        self,\n        aci_client: ContainerInstanceManagementClient,\n        container_group: ContainerGroup,\n    ):\n        self.logger.info(f\"{self._log_prefix}: Deleting container...\")\n\n        deletion_status_poller = await run_sync_in_worker_thread(\n            aci_client.container_groups.begin_delete,\n            resource_group_name=self.resource_group_name,\n            container_group_name=container_group.name,\n        )\n\n        t0 = time.time()\n        timeout = CONTAINER_GROUP_DELETION_TIMEOUT_SECONDS\n\n        while not deletion_status_poller.done():\n            elapsed_time = time.time() - t0\n\n            if timeout and elapsed_time &gt; timeout:\n                raise RuntimeError(\n                    (\n                        f\"Timed out after {elapsed_time}s while waiting for deletion of\"\n                        f\" container group {container_group.name}. To verify the group \"\n                        \"has been deleted, check the Azure Portal or run \"\n                        f\"az container show --name {container_group.name} --resource-group {self.resource_group_name}\"  # noqa\n                    )\n                )\n            await anyio.sleep(self.task_watch_poll_interval)\n\n        self.logger.info(f\"{self._log_prefix}: Container deleted.\")\n\n    def _get_container(self, container_group: ContainerGroup) -&gt; Container:\n\"\"\"\n        Extracts the job container from a container group.\n        \"\"\"\n        return container_group.containers[0]\n\n    def _get_and_stream_output(\n        self,\n        client: ContainerInstanceManagementClient,\n        container_group: ContainerGroup,\n        last_log_time: datetime.datetime,\n    ) -&gt; datetime.datetime:\n\"\"\"\n        Fetches logs output from the job container and writes all entries after\n        a given time to stderr.\n\n        Args:\n            client: An initialized `ContainerInstanceManagementClient`\n            container_group: The container group that holds the job container.\n            last_log_time: The timestamp of the last output line already streamed.\n\n        Returns:\n            The time of the most recent output line written by this call.\n        \"\"\"\n        logs = self._get_logs(client, container_group)\n        return self._stream_output(logs, last_log_time)\n\n    def _get_logs(\n        self,\n        client: ContainerInstanceManagementClient,\n        container_group: ContainerGroup,\n        max_lines: int = 100,\n    ) -&gt; str:\n\"\"\"\n        Gets the most container logs up to a given maximum.\n\n        Args:\n            client: An initialized `ContainerInstanceManagementClient`\n            container_group: The container group that holds the job container.\n            max_lines: The number of log lines to pull. Defaults to 100.\n\n        Returns:\n            A string containing the requested log entries, one per line.\n        \"\"\"\n        container = self._get_container(container_group)\n\n        logs: Union[Logs, None] = None\n        try:\n            logs = client.containers.list_logs(\n                resource_group_name=self.resource_group_name,\n                container_group_name=container_group.name,\n                container_name=container.name,\n                tail=max_lines,\n                timestamps=True,\n            )\n        except HttpResponseError:\n            # Trying to get logs when the container is under heavy CPU load sometimes\n            # results in an error, but we won't want to raise an exception and stop\n            # monitoring the flow. Instead, log the error and carry on so we can try to\n            # get all missed logs on the next check.\n            self.logger.warning(\n                f\"{self._log_prefix}: Unable to retrieve logs from container \"\n                f\"{container.name}. Trying again in {self.task_watch_poll_interval}s\"\n            )\n\n        return logs.content if logs else \"\"\n\n    def _stream_output(\n        self, log_content: Union[str, None], last_log_time: datetime.datetime\n    ) -&gt; datetime.datetime:\n\"\"\"\n        Writes each entry from a string of log lines to stderr.\n\n        Args:\n            log_content: A string containing Azure container logs.\n            last_log_time: The timestamp of the last output line already streamed.\n\n        Returns:\n            The time of the most recent output line written by this call.\n        \"\"\"\n        if not log_content:\n            # nothing to stream\n            return last_log_time\n\n        log_lines = log_content.split(\"\\n\")\n\n        last_written_time = last_log_time\n\n        for log_line in log_lines:\n            # skip if the line is blank or whitespace\n            if not log_line.strip():\n                continue\n\n            line_parts = log_line.split(\" \")\n            # timestamp should always be before first space in line\n            line_timestamp = line_parts[0]\n            line = \" \".join(line_parts[1:])\n\n            try:\n                line_time = dateutil.parser.parse(line_timestamp)\n                if line_time &gt; last_written_time:\n                    self._write_output_line(line)\n                    last_written_time = line_time\n            except dateutil.parser.ParserError as e:\n                self.logger.debug(\n                    (\n                        f\"{self._log_prefix}: Unable to parse timestamp from Azure \"\n                        \"log line: %s\"\n                    ),\n                    log_line,\n                    exc_info=e,\n                )\n\n        return last_written_time\n\n    def _get_environment(self):\n\"\"\"\n        Generates a dictionary of all environment variables to send to the\n        ACI container.\n        \"\"\"\n        return {**self._base_environment(), **self.env}\n\n    @property\n    def _log_prefix(self) -&gt; str:\n\"\"\"\n        Internal property for generating a prefix for logs where `name` may be null\n        \"\"\"\n        if self.name is not None:\n            return f\"AzureContainerInstanceJob {self.name!r}\"\n        else:\n            return \"AzureContainerInstanceJob\"\n\n    @staticmethod\n    def _provisioning_succeeded(container_group: ContainerGroup) -&gt; bool:\n\"\"\"\n        Determines whether ACI container group provisioning was successful.\n\n        Args:\n            container_group: a container group returned by the Azure SDK.\n\n        Returns:\n            True if provisioning was successful, False otherwise.\n        \"\"\"\n        if not container_group:\n            return False\n\n        return (\n            container_group.provisioning_state\n            == ContainerGroupProvisioningState.SUCCEEDED\n            and len(container_group.containers) == 1\n        )\n\n    @staticmethod\n    def _write_output_line(line: str):\n\"\"\"\n        Writes a line of output to stderr.\n        \"\"\"\n        print(line, file=sys.stderr)\n</code></pre>"},{"location":"container_instance/#prefect_azure.container_instance.AzureContainerInstanceJob-functions","title":"Functions","text":""},{"location":"container_instance/#prefect_azure.container_instance.AzureContainerInstanceJob.kill","title":"<code>kill(container_group_name, grace_seconds=CONTAINER_GROUP_DELETION_TIMEOUT_SECONDS)</code>  <code>async</code>","text":"<p>Kill a flow running in an ACI container group.</p> <p>Parameters:</p> Name Type Description Default <code>container_group_name</code> <code>str</code> <p>The container group name yielded by <code>AzureContainerInstanceJob.run</code>.</p> required Source code in <code>prefect_azure/container_instance.py</code> <pre><code>async def kill(\n    self,\n    container_group_name: str,\n    grace_seconds: int = CONTAINER_GROUP_DELETION_TIMEOUT_SECONDS,\n):\n\"\"\"\n    Kill a flow running in an ACI container group.\n\n    Args:\n        container_group_name: The container group name yielded by\n            `AzureContainerInstanceJob.run`.\n    \"\"\"\n    # ACI does not provide a way to specify grace period, but it gives\n    # applications ~30 seconds to gracefully terminate before killing\n    # a container group.\n    if grace_seconds != CONTAINER_GROUP_DELETION_TIMEOUT_SECONDS:\n        self.logger.warning(\n            f\"{self._log_prefix}: Kill grace period of {grace_seconds}s requested, \"\n            f\"but ACI does not support grace period configuration.\"\n        )\n\n    aci_client = self.aci_credentials.get_container_client(\n        self.subscription_id.get_secret_value()\n    )\n\n    # get the container group to check that it still exists\n    try:\n        container_group = aci_client.container_groups.get(\n            resource_group_name=self.resource_group_name,\n            container_group_name=container_group_name,\n        )\n    except ResourceNotFoundError as exc:\n        # the container group no longer exists, so there's nothing to cancel\n        raise InfrastructureNotFound(\n            f\"Cannot stop ACI job: container group {container_group_name} \"\n            \"no longer exists.\"\n        ) from exc\n\n    # get the container state to check if the container has terminated\n    container = self._get_container(container_group)\n    container_state = container.instance_view.current_state.state\n\n    # the container group needs to be deleted regardless of whether the container\n    # already terminated\n    await self._wait_for_container_group_deletion(aci_client, container_group)\n\n    # if the container had already terminated, raise an exception to let the agent\n    # know the flow was not cancelled\n    if container_state == ContainerRunState.TERMINATED:\n        raise InfrastructureNotAvailable(\n            f\"Cannot stop ACI job: container group {container_group.name} exists, \"\n            f\"but container {container.name} has already terminated.\"\n        )\n</code></pre>"},{"location":"container_instance/#prefect_azure.container_instance.AzureContainerInstanceJob.preview","title":"<code>preview()</code>","text":"<p>Provides a summary of how the container will be created when <code>run</code> is called.</p> <p>Returns:</p> Type Description <code>str</code> <p>A string containing the summary.</p> Source code in <code>prefect_azure/container_instance.py</code> <pre><code>def preview(self) -&gt; str:\n\"\"\"\n    Provides a summary of how the container will be created when `run` is called.\n\n    Returns:\n       A string containing the summary.\n    \"\"\"\n    preview = {\n        \"container_name\": \"&lt;generated when run&gt;\",\n        \"resource_group_name\": self.resource_group_name,\n        \"memory\": self.memory,\n        \"cpu\": self.cpu,\n        \"gpu_count\": self.gpu_count,\n        \"gpu_sku\": self.gpu_sku,\n        \"env\": self._get_environment(),\n    }\n\n    return json.dumps(preview)\n</code></pre>"},{"location":"container_instance/#prefect_azure.container_instance.AzureContainerInstanceJob.run","title":"<code>run(task_status=None)</code>  <code>async</code>","text":"<p>Runs the configured task using an ACI container.</p> <p>Parameters:</p> Name Type Description Default <code>task_status</code> <code>Optional[TaskStatus]</code> <p>An optional <code>TaskStatus</code> to update when the container starts.</p> <code>None</code> <p>Returns:</p> Type Description <code>AzureContainerInstanceJobResult</code> <p>An <code>AzureContainerInstanceJobResult</code> with the container's exit code.</p> Source code in <code>prefect_azure/container_instance.py</code> <pre><code>@sync_compatible\nasync def run(\n    self, task_status: Optional[TaskStatus] = None\n) -&gt; AzureContainerInstanceJobResult:\n\"\"\"\n    Runs the configured task using an ACI container.\n\n    Args:\n        task_status: An optional `TaskStatus` to update when the container starts.\n\n    Returns:\n        An `AzureContainerInstanceJobResult` with the container's exit code.\n    \"\"\"\n\n    run_start_time = datetime.datetime.now(datetime.timezone.utc)\n\n    container = self._configure_container()\n    container_group = self._configure_container_group(container)\n    created_container_group = None\n\n    aci_client = self.aci_credentials.get_container_client(\n        self.subscription_id.get_secret_value()\n    )\n\n    self.logger.info(\n        f\"{self._log_prefix}: Preparing to run command {' '.join(self.command)!r} \"\n        f\"in container {container.name!r} ({self.image})...\"\n    )\n    try:\n        self.logger.info(f\"{self._log_prefix}: Waiting for container creation...\")\n        # Create the container group and wait for it to start\n        creation_status_poller = await run_sync_in_worker_thread(\n            aci_client.container_groups.begin_create_or_update,\n            self.resource_group_name,\n            container.name,\n            container_group,\n        )\n        created_container_group = await run_sync_in_worker_thread(\n            self._wait_for_task_container_start, creation_status_poller\n        )\n\n        # If creation succeeded, group provisioning state should be 'Succeeded'\n        # and the group should have a single container\n        if self._provisioning_succeeded(created_container_group):\n            self.logger.info(f\"{self._log_prefix}: Running command...\")\n            if task_status:\n                task_status.started(value=created_container_group.name)\n            status_code = await run_sync_in_worker_thread(\n                self._watch_task_and_get_exit_code,\n                aci_client,\n                created_container_group,\n                run_start_time,\n            )\n            self.logger.info(f\"{self._log_prefix}: Completed command run.\")\n        else:\n            raise RuntimeError(f\"{self._log_prefix}: Container creation failed.\")\n\n    finally:\n        if created_container_group:\n            await self._wait_for_container_group_deletion(\n                aci_client, created_container_group\n            )\n\n    return AzureContainerInstanceJobResult(\n        identifier=created_container_group.name, status_code=status_code\n    )\n</code></pre>"},{"location":"container_instance/#prefect_azure.container_instance.AzureContainerInstanceJobResult","title":"<code>AzureContainerInstanceJobResult</code>","text":"<p>         Bases: <code>InfrastructureResult</code></p> <p>The result of an <code>AzureContainerInstanceJob</code> run.</p> Source code in <code>prefect_azure/container_instance.py</code> <pre><code>class AzureContainerInstanceJobResult(InfrastructureResult):\n\"\"\"\n    The result of an `AzureContainerInstanceJob` run.\n    \"\"\"\n</code></pre>"},{"location":"container_instance/#prefect_azure.container_instance.ContainerGroupProvisioningState","title":"<code>ContainerGroupProvisioningState</code>","text":"<p>         Bases: <code>str</code>, <code>Enum</code></p> <p>Terminal provisioning states for ACI container groups. Per the Azure docs, the states in this Enum are the only ones that can be relied on as dependencies.</p> Source code in <code>prefect_azure/container_instance.py</code> <pre><code>class ContainerGroupProvisioningState(str, Enum):\n\"\"\"\n    Terminal provisioning states for ACI container groups. Per the Azure docs,\n    the states in this Enum are the only ones that can be relied on as dependencies.\n    \"\"\"\n\n    SUCCEEDED = \"Succeeded\"\n    FAILED = \"Failed\"\n</code></pre>"},{"location":"container_instance/#prefect_azure.container_instance.ContainerRunState","title":"<code>ContainerRunState</code>","text":"<p>         Bases: <code>str</code>, <code>Enum</code></p> <p>Terminal run states for ACI containers.</p> Source code in <code>prefect_azure/container_instance.py</code> <pre><code>class ContainerRunState(str, Enum):\n\"\"\"\n    Terminal run states for ACI containers.\n    \"\"\"\n\n    RUNNING = \"Running\"\n    TERMINATED = \"Terminated\"\n</code></pre>"},{"location":"container_instance_worker/","title":"Container Instance Worker","text":""},{"location":"container_instance_worker/#prefect_azure.workers.container_instance","title":"<code>prefect_azure.workers.container_instance</code>","text":"<p>Module containing the Azure Container Instances worker used for executing flow runs in ACI containers.</p> <p>Note this module is in beta. The interfaces within may change without notice.</p> <p>To start an ACI worker, run the following command:</p> <pre><code>prefect worker start --pool 'my-work-pool' --type azure-container-instance\n</code></pre> <p>Replace <code>my-work-pool</code> with the name of the work pool you want the worker to poll for flow runs.</p> <p>Using a custom ARM template</p> <p>To facilitate easy customization, the Azure Container worker provisions a containing group using an ARM template. The default ARM template is represented in YAML as follows: <pre><code>---\narm_template:\n\"$schema\": https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#\ncontentVersion: 1.0.0.0\nparameters:\nlocation:\ntype: string\ndefaultValue: \"[resourceGroup().location]\"\nmetadata:\ndescription: Location for all resources.\ncontainer_group_name:\ntype: string\ndefaultValue: \"[uniqueString(resourceGroup().id)]\"\nmetadata:\ndescription: The name of the container group to create.\ncontainer_name:\ntype: string\ndefaultValue: \"[uniqueString(resourceGroup().id)]\"\nmetadata:\ndescription: The name of the container to create.\nresources:\n- type: Microsoft.ContainerInstance/containerGroups\napiVersion: '2022-09-01'\nname: \"[parameters('container_group_name')]\"\nlocation: \"[parameters('location')]\"\nproperties:\ncontainers:\n- name: \"[parameters('container_name')]\"\nproperties:\nimage: rpeden/my-aci-flow:latest\ncommand: \"{{ command }}\"\nresources:\nrequests:\ncpu: \"{{ cpu }}\"\nmemoryInGB: \"{{ memory }}\"\nenvironmentVariables: []\nosType: Linux\nrestartPolicy: Never\n</code></pre></p> <p>Each values enclosed in <code>{{ }}</code> is a placeholder that will be replaced with a value at runtime. The values that can be used a placeholders are defined by the <code>variables</code> schema defined in the base job template.</p> <p>The default job manifest and available variables can be customized on a work pool by work pool basis. These customizations can be made via the Prefect UI when creating or editing a work pool.</p> <p>Using an ARM template makes the worker flexible; you're not limited to using the features the worker provides out of the box. Instead, you can modify the ARM template to use any features available in Azure Container Instances.</p>"},{"location":"container_instance_worker/#prefect_azure.workers.container_instance-classes","title":"Classes","text":""},{"location":"container_instance_worker/#prefect_azure.workers.container_instance.AzureContainerJobConfiguration","title":"<code>AzureContainerJobConfiguration</code>","text":"<p>         Bases: <code>BaseJobConfiguration</code></p> <p>Configuration for an Azure Container Instance flow run.</p> Source code in <code>prefect_azure/workers/container_instance.py</code> <pre><code>class AzureContainerJobConfiguration(BaseJobConfiguration):\n\"\"\"\n    Configuration for an Azure Container Instance flow run.\n    \"\"\"\n\n    image: str = Field(default_factory=get_prefect_image_name)\n    resource_group_name: str = Field(default=...)\n    subscription_id: SecretStr = Field(default=...)\n    identities: Optional[List[str]] = Field(default=None)\n    entrypoint: Optional[str] = Field(default=DEFAULT_CONTAINER_ENTRYPOINT)\n    image_registry: Optional[\n        Union[\n            prefect.infrastructure.docker.DockerRegistry,\n            ACRManagedIdentity,\n        ]\n    ] = Field(default=None)\n    cpu: float = Field(default=ACI_DEFAULT_CPU)\n    gpu_count: Optional[int] = Field(default=None)\n    gpu_sku: Optional[str] = Field(default=None)\n    memory: float = Field(default=ACI_DEFAULT_MEMORY)\n    subnet_ids: Optional[List[str]] = Field(default=None)\n    dns_servers: Optional[List[str]] = Field(default=None)\n    stream_output: bool = Field(default=False)\n    aci_credentials: AzureContainerInstanceCredentials = Field(\n        # default to an empty credentials object that will use\n        # `DefaultAzureCredential` to authenticate.\n        default_factory=AzureContainerInstanceCredentials\n    )\n    # Execution settings\n    task_start_timeout_seconds: int = Field(default=240)\n    task_watch_poll_interval: float = Field(default=5.0)\n    arm_template: Dict[str, Any] = Field(template=_get_default_arm_template())\n\n    def prepare_for_flow_run(\n        self,\n        flow_run: \"FlowRun\",\n        deployment: Optional[\"DeploymentResponse\"] = None,\n        flow: Optional[\"Flow\"] = None,\n    ):\n\"\"\"\n        Prepares the job configuration for a flow run.\n        \"\"\"\n        super().prepare_for_flow_run(flow_run, deployment, flow)\n\n        # expectations:\n        # - the first resource in the template is the container group\n        # - the container group has a single container\n        container_group = self.arm_template[\"resources\"][0]\n        container = container_group[\"properties\"][\"containers\"][0]\n\n        # set the container's environment variables\n        container[\"properties\"][\"environmentVariables\"] = self._get_arm_environment()\n\n        # convert the command from a string to a list, because that's what ACI expects\n        if self.command:\n            container[\"properties\"][\"command\"] = self.command.split(\" \")\n\n        self._add_image()\n\n        # Add the entrypoint if provided. Creating an ACI container with a\n        # command overrides the container's built-in entrypoint. Prefect base images\n        # use entrypoint.sh as the entrypoint, so we need to add to the beginning of\n        # the command list to avoid breaking EXTRA_PIP_PACKAGES installation on\n        # container startup.\n        if self.entrypoint:\n            container[\"properties\"][\"command\"].insert(0, self.entrypoint)\n\n        if self.image_registry:\n            self._add_image_registry_credentials(self.image_registry)\n\n        if self.identities:\n            self._add_identities(self.identities)\n\n        if self.subnet_ids:\n            self._add_subnets(self.subnet_ids)\n\n        if self.dns_servers:\n            self._add_dns_servers(self.dns_servers)\n\n    def _add_image(self):\n\"\"\"\n        Add the image to the arm template.\n        \"\"\"\n        try:\n            self.arm_template[\"resources\"][0][\"properties\"][\"containers\"][0][\n                \"properties\"\n            ][\"image\"] = self.image\n        except KeyError:\n            raise ValueError(\"Unable to add image due to invalid job ARM template.\")\n\n    def _add_image_registry_credentials(\n        self,\n        image_registry: Union[\n            prefect.infrastructure.docker.DockerRegistry,\n            ACRManagedIdentity,\n            None,\n        ],\n    ):\n\"\"\"\n        Create image registry credentials based on the type of image_registry provided.\n\n        Args:\n            image_registry: An instance of a DockerRegistry or\n            ACRManagedIdentity object.\n        \"\"\"\n        if image_registry and isinstance(\n            image_registry, prefect.infrastructure.docker.DockerRegistry\n        ):\n            self.arm_template[\"resources\"][0][\"properties\"][\n                \"imageRegistryCredentials\"\n            ] = [\n                {\n                    \"server\": image_registry.registry_url,\n                    \"username\": image_registry.username,\n                    \"password\": image_registry.password.get_secret_value(),\n                }\n            ]\n        elif image_registry and isinstance(image_registry, ACRManagedIdentity):\n            self.arm_template[\"resources\"][0][\"properties\"][\n                \"imageRegistryCredentials\"\n            ] = [\n                {\n                    \"server\": image_registry.registry_url,\n                    \"identity\": image_registry.identity,\n                }\n            ]\n\n    def _add_identities(self, identities: List[str]):\n\"\"\"\n        Add identities to the container group.\n\n        Args:\n            identities: A list of user-assigned identities to add to\n            the container group.\n        \"\"\"\n        self.arm_template[\"resources\"][0][\"properties\"][\"identity\"] = {\n            \"type\": \"UserAssigned\",\n            \"userAssignedIdentities\": {\n                # note: For user-assigned identities, the key is the resource ID\n                # of the identity and the value is an empty object. See:\n                # https://docs.microsoft.com/en-us/azure/templates/microsoft.containerinstance/containergroups?tabs=bicep#identity-object # noqa\n                identity: {}\n                for identity in identities\n            },\n        }\n\n    def _add_subnets(self, subnet_ids: List[str]):\n\"\"\"\n        Add subnets to the container group.\n\n        Args:\n            subnet_ids: A list of subnet ids to add to the container group.\n        \"\"\"\n        self.arm_template[\"resources\"][0][\"properties\"][\"subnetIds\"] = [\n            {\"id\": subnet_id} for subnet_id in subnet_ids\n        ]\n\n    def _add_dns_servers(self, dns_servers: List[str]):\n\"\"\"\n        Add dns servers to the container group.\n\n        Args:\n            dns_servers: A list of dns servers to add to the container group.\n        \"\"\"\n        self.arm_template[\"resources\"][0][\"properties\"][\"dnsConfig\"] = {\n            \"nameServers\": dns_servers\n        }\n\n    def _get_arm_environment(self):\n\"\"\"\n        Returns the environment variables to pass to the ARM template.\n        \"\"\"\n        env = {**self._base_environment(), **self.env}\n\n        azure_env = [\n            {\"name\": key, \"secureValue\": value}\n            if key in ENV_SECRETS\n            else {\"name\": key, \"value\": value}\n            for key, value in env.items()\n        ]\n        return azure_env\n</code></pre>"},{"location":"container_instance_worker/#prefect_azure.workers.container_instance.AzureContainerJobConfiguration-functions","title":"Functions","text":""},{"location":"container_instance_worker/#prefect_azure.workers.container_instance.AzureContainerJobConfiguration.prepare_for_flow_run","title":"<code>prepare_for_flow_run(flow_run, deployment=None, flow=None)</code>","text":"<p>Prepares the job configuration for a flow run.</p> Source code in <code>prefect_azure/workers/container_instance.py</code> <pre><code>def prepare_for_flow_run(\n    self,\n    flow_run: \"FlowRun\",\n    deployment: Optional[\"DeploymentResponse\"] = None,\n    flow: Optional[\"Flow\"] = None,\n):\n\"\"\"\n    Prepares the job configuration for a flow run.\n    \"\"\"\n    super().prepare_for_flow_run(flow_run, deployment, flow)\n\n    # expectations:\n    # - the first resource in the template is the container group\n    # - the container group has a single container\n    container_group = self.arm_template[\"resources\"][0]\n    container = container_group[\"properties\"][\"containers\"][0]\n\n    # set the container's environment variables\n    container[\"properties\"][\"environmentVariables\"] = self._get_arm_environment()\n\n    # convert the command from a string to a list, because that's what ACI expects\n    if self.command:\n        container[\"properties\"][\"command\"] = self.command.split(\" \")\n\n    self._add_image()\n\n    # Add the entrypoint if provided. Creating an ACI container with a\n    # command overrides the container's built-in entrypoint. Prefect base images\n    # use entrypoint.sh as the entrypoint, so we need to add to the beginning of\n    # the command list to avoid breaking EXTRA_PIP_PACKAGES installation on\n    # container startup.\n    if self.entrypoint:\n        container[\"properties\"][\"command\"].insert(0, self.entrypoint)\n\n    if self.image_registry:\n        self._add_image_registry_credentials(self.image_registry)\n\n    if self.identities:\n        self._add_identities(self.identities)\n\n    if self.subnet_ids:\n        self._add_subnets(self.subnet_ids)\n\n    if self.dns_servers:\n        self._add_dns_servers(self.dns_servers)\n</code></pre>"},{"location":"container_instance_worker/#prefect_azure.workers.container_instance.AzureContainerVariables","title":"<code>AzureContainerVariables</code>","text":"<p>         Bases: <code>BaseVariables</code></p> <p>Variables for an Azure Container Instance flow run.</p> Source code in <code>prefect_azure/workers/container_instance.py</code> <pre><code>class AzureContainerVariables(BaseVariables):\n\"\"\"\n    Variables for an Azure Container Instance flow run.\n    \"\"\"\n\n    image: Optional[str] = Field(\n        default=None,\n        description=(\n            \"The image to use for the Prefect container in the task. This value \"\n            \"defaults to a Prefect base image matching your local versions.\"\n        ),\n    )\n    resource_group_name: str = Field(\n        default=...,\n        title=\"Azure Resource Group Name\",\n        description=(\n            \"The name of the Azure Resource Group in which to run Prefect ACI tasks.\"\n        ),\n    )\n    subscription_id: SecretStr = Field(\n        default=...,\n        title=\"Azure Subscription ID\",\n        description=\"The ID of the Azure subscription to create containers under.\",\n    )\n    identities: Optional[List[str]] = Field(\n        title=\"Identities\",\n        default=None,\n        description=(\n            \"A list of user-assigned identities to associate with the container group. \"\n            \"The identities should be an ARM resource IDs in the form: \"\n            \"'/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.\"  # noqa\n        ),\n    )\n    entrypoint: Optional[str] = Field(\n        default=DEFAULT_CONTAINER_ENTRYPOINT,\n        description=(\n            \"The entrypoint of the container you wish you run. This value \"\n            \"defaults to the entrypoint used by Prefect images and should only be \"\n            \"changed when using a custom image that is not based on an official \"\n            \"Prefect image. Any commands set on deployments will be passed \"\n            \"to the entrypoint as parameters.\"\n        ),\n    )\n    image_registry: Optional[\n        Union[\n            prefect.infrastructure.docker.DockerRegistry,\n            ACRManagedIdentity,\n        ]\n    ] = Field(\n        default=None,\n        title=\"Image Registry (Optional)\",\n        description=(\n            \"To use any private container registry with a username and password, \"\n            \"choose DockerRegistry. To use a private Azure Container Registry \"\n            \"with a managed identity, choose ACRManagedIdentity.\"\n        ),\n    )\n    cpu: float = Field(\n        title=\"CPU\",\n        default=ACI_DEFAULT_CPU,\n        description=(\n            \"The number of virtual CPUs to assign to the task container. \"\n            f\"If not provided, a default value of {ACI_DEFAULT_CPU} will be used.\"\n        ),\n    )\n    gpu_count: Optional[int] = Field(\n        title=\"GPU Count\",\n        default=None,\n        description=(\n            \"The number of GPUs to assign to the task container. \"\n            \"If not provided, no GPU will be used.\"\n        ),\n    )\n    gpu_sku: Optional[str] = Field(\n        title=\"GPU SKU\",\n        default=None,\n        description=(\n            \"The Azure GPU SKU to use. See the ACI documentation for a list of \"\n            \"GPU SKUs available in each Azure region.\"\n        ),\n    )\n    memory: float = Field(\n        default=ACI_DEFAULT_MEMORY,\n        description=(\n            \"The amount of memory in gigabytes to provide to the ACI task. Valid \"\n            \"amounts are specified in the Azure documentation. If not provided, a \"\n            f\"default value of  {ACI_DEFAULT_MEMORY} will be used unless present \"\n            \"on the task definition.\"\n        ),\n    )\n    aci_credentials: AzureContainerInstanceCredentials = Field(\n        default_factory=AzureContainerInstanceCredentials,\n        description=(\"The credentials to use to authenticate with Azure.\"),\n    )\n    stream_output: bool = Field(\n        default=False,\n        description=(\n            \"If `True`, logs will be streamed from the Prefect container to the local \"\n            \"console.\"\n        ),\n    )\n    # Execution settings\n    task_start_timeout_seconds: int = Field(\n        default=240,\n        description=(\n            \"The amount of time to watch for the start of the ACI container. \"\n            \"before marking it as failed.\"\n        ),\n    )\n    task_watch_poll_interval: float = Field(\n        default=5.0,\n        description=(\n            \"The number of seconds to wait between Azure API calls while monitoring \"\n            \"the state of an Azure Container Instances task.\"\n        ),\n    )\n</code></pre>"},{"location":"container_instance_worker/#prefect_azure.workers.container_instance.AzureContainerWorker","title":"<code>AzureContainerWorker</code>","text":"<p>         Bases: <code>BaseWorker</code></p> <p>A Prefect worker that runs flows in an Azure Container Instance.</p> Source code in <code>prefect_azure/workers/container_instance.py</code> <pre><code>class AzureContainerWorker(BaseWorker):\n\"\"\"\n    A Prefect worker that runs flows in an Azure Container Instance.\n    \"\"\"\n\n    type = \"azure-container-instance\"\n    job_configuration = AzureContainerJobConfiguration\n    job_configuration_variables = AzureContainerVariables\n    _is_beta = True\n    _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/6AiQ6HRIft8TspZH7AfyZg/39fd82bdbb186db85560f688746c8cdd/azure.png?h=250\"  # noqa\n    _display_name = \"Azure Container Instances\"\n    _description = (\n        \"Execute flow runs within containers on Azure's Container Instances \"\n        \"service. Requires an Azure account.\"\n    )\n    _documentation_url = (\n        \"https://prefecthq.github.io/prefect-azure/container_instance_worker/\"\n    )\n\n    _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/6AiQ6HRIft8TspZH7AfyZg/39fd82bdbb186db85560f688746c8cdd/azure.png?h=250\"  # noqa\n    _documentation_url = (\n        \"https://prefecthq.github.io/prefect-azure/container_instance_worker/\"\n    )\n\n    async def run(\n        self,\n        flow_run: FlowRun,\n        configuration: AzureContainerJobConfiguration,\n        task_status: Optional[anyio.abc.TaskStatus] = None,\n    ):\n\"\"\"\n        Run a flow in an Azure Container Instance.\n        Args:\n            flow_run: The flow run to run.\n            configuration: The configuration for the flow run.\n            task_status: The task status object for the current task. Used\n            to provide an identifier that can be used to cancel the task.\n\n        Returns:\n            The result of the flow run.\n        \"\"\"\n        run_start_time = datetime.datetime.now(datetime.timezone.utc)\n        prefect_client = get_client()\n\n        # Get the flow, so we can use its name in the container group name\n        # to make it easier to identify and debug.\n        flow = await prefect_client.read_flow(flow_run.flow_id)\n        container_group_name = f\"{flow.name}-{flow_run.id}\"\n\n        self._logger.info(\n            f\"{self._log_prefix}: Preparing to run command {configuration.command} \"\n            f\"in container  {configuration.image})...\"\n        )\n\n        aci_client = configuration.aci_credentials.get_container_client(\n            configuration.subscription_id.get_secret_value()\n        )\n        resource_client = configuration.aci_credentials.get_resource_client(\n            configuration.subscription_id.get_secret_value()\n        )\n\n        created_container_group: Union[ContainerGroup, None] = None\n        try:\n            self._logger.info(f\"{self._log_prefix}: Creating container group...\")\n\n            created_container_group = await self._provision_container_group(\n                aci_client,\n                resource_client,\n                configuration,\n                container_group_name,\n            )\n            # Both the flow ID and container group name will be needed to\n            # cancel the flow run if needed.\n            identifier = f\"{flow_run.id}:{container_group_name}\"\n\n            if self._provisioning_succeeded(created_container_group):\n                self._logger.info(f\"{self._log_prefix}: Running command...\")\n                if task_status is not None:\n                    task_status.started(value=identifier)\n\n                status_code = await run_sync_in_worker_thread(\n                    self._watch_task_and_get_exit_code,\n                    aci_client,\n                    configuration,\n                    created_container_group,\n                    run_start_time,\n                )\n\n                self._logger.info(f\"{self._log_prefix}: Completed command run.\")\n\n            else:\n                raise RuntimeError(f\"{self._log_prefix}: Container creation failed.\")\n\n        finally:\n            await self._wait_for_container_group_deletion(\n                aci_client, configuration, container_group_name\n            )\n\n        return AzureContainerWorkerResult(\n            identifier=created_container_group.name, status_code=status_code\n        )\n\n    async def kill_infrastructure(\n        self,\n        infrastructure_pid: str,\n        configuration: AzureContainerJobConfiguration,\n    ):\n\"\"\"\n        Kill a flow running in an ACI container group.\n\n        Args:\n            infrastructure_pid: The container group identification data yielded by\n                `AzureContainerInstanceJob.run`.\n            configuration: The job configuration.\n        \"\"\"\n        (flow_run_id, container_group_name) = infrastructure_pid.split(\":\")\n\n        aci_client = configuration.aci_credentials.get_container_client(\n            configuration.subscription_id.get_secret_value()\n        )\n\n        # get the container group to check that it still exists\n        try:\n            container_group = aci_client.container_groups.get(\n                resource_group_name=configuration.resource_group_name,\n                container_group_name=container_group_name,\n            )\n        except ResourceNotFoundError as exc:\n            # the container group no longer exists, so there's nothing to cancel\n            raise InfrastructureNotFound(\n                f\"Cannot stop ACI job: container group \"\n                f\"{container_group_name} no longer exists.\"\n            ) from exc\n\n        # get the container state to check if the container has terminated\n        container = self._get_container(container_group)\n        container_state = container.instance_view.current_state.state\n\n        # the container group needs to be deleted regardless of whether the container\n        # already terminated\n        await self._wait_for_container_group_deletion(\n            aci_client, configuration, container_group_name\n        )\n\n        # if the container has already terminated, raise an exception to let the agent\n        # know the flow was not cancelled\n        if container_state == ContainerRunState.TERMINATED:\n            raise InfrastructureNotAvailable(\n                f\"Cannot stop ACI job: container group {container_group.name} exists, \"\n                f\"but container {container.name} has already terminated.\"\n            )\n\n    def _wait_for_task_container_start(\n        self,\n        client: ContainerInstanceManagementClient,\n        configuration: AzureContainerJobConfiguration,\n        container_group_name: str,\n        creation_status_poller: LROPoller[DeploymentExtended],\n    ) -&gt; Optional[ContainerGroup]:\n\"\"\"\n        Wait for the result of group and container creation.\n\n        Args:\n            creation_status_poller: Poller returned by the Azure SDK.\n\n        Raises:\n            RuntimeError: Raised if the timeout limit is exceeded before the\n            container starts.\n\n        Returns:\n            A `ContainerGroup` representing the current status of the group being\n            watched, or None if creation failed.\n        \"\"\"\n        t0 = time.time()\n        timeout = configuration.task_start_timeout_seconds\n\n        while not creation_status_poller.done():\n            elapsed_time = time.time() - t0\n\n            if timeout and elapsed_time &gt; timeout:\n                raise RuntimeError(\n                    (\n                        f\"Timed out after {elapsed_time}s while watching waiting for \"\n                        \"container start.\"\n                    )\n                )\n            time.sleep(configuration.task_watch_poll_interval)\n\n        deployment = creation_status_poller.result()\n\n        provisioning_succeeded = (\n            deployment.properties.provisioning_state\n            == ContainerGroupProvisioningState.SUCCEEDED\n        )\n\n        if provisioning_succeeded:\n            return self._get_container_group(\n                client, configuration.resource_group_name, container_group_name\n            )\n        else:\n            return None\n\n    async def _provision_container_group(\n        self,\n        aci_client: ContainerInstanceManagementClient,\n        resource_client: ResourceManagementClient,\n        configuration: AzureContainerJobConfiguration,\n        container_group_name: str,\n    ):\n\"\"\"\n        Create a container group and wait for it to start.\n        Args:\n            aci_client: An authenticated ACI client.\n            resource_client: An authenticated resource client.\n            configuration: The job configuration.\n            container_group_name: The name of the container group to create.\n\n        Returns:\n            A `ContainerGroup` representing the container group that was created.\n        \"\"\"\n        properties = DeploymentProperties(\n            mode=DeploymentMode.INCREMENTAL,\n            template=configuration.arm_template,\n            parameters={\"container_group_name\": {\"value\": container_group_name}},\n        )\n        deployment = Deployment(properties=properties)\n\n        creation_status_poller = await run_sync_in_worker_thread(\n            resource_client.deployments.begin_create_or_update,\n            resource_group_name=configuration.resource_group_name,\n            deployment_name=f\"prefect-{container_group_name}\",\n            parameters=deployment,\n        )\n\n        created_container_group = await run_sync_in_worker_thread(\n            self._wait_for_task_container_start,\n            aci_client,\n            configuration,\n            container_group_name,\n            creation_status_poller,\n        )\n\n        return created_container_group\n\n    def _watch_task_and_get_exit_code(\n        self,\n        client: ContainerInstanceManagementClient,\n        configuration: AzureContainerJobConfiguration,\n        container_group: ContainerGroup,\n        run_start_time: datetime.datetime,\n    ) -&gt; int:\n\"\"\"\n        Waits until the container finishes running and obtains its exit code.\n\n        Args:\n            client: An initialized Azure `ContainerInstanceManagementClient`\n            container_group: The `ContainerGroup` in which the container resides.\n\n        Returns:\n            An `int` representing the container's exit code.\n        \"\"\"\n        status_code = -1\n        running_container = self._get_container(container_group)\n        current_state = running_container.instance_view.current_state.state\n\n        # get any logs the container has already generated\n        last_log_time = run_start_time\n        if configuration.stream_output:\n            last_log_time = self._get_and_stream_output(\n                client=client,\n                configuration=configuration,\n                container_group=container_group,\n                last_log_time=last_log_time,\n            )\n\n        # set exit code if flow run already finished:\n        if current_state == ContainerRunState.TERMINATED:\n            status_code = running_container.instance_view.current_state.exit_code\n\n        while current_state != ContainerRunState.TERMINATED:\n            try:\n                container_group = self._get_container_group(\n                    client,\n                    configuration.resource_group_name,\n                    container_group.name,\n                )\n            except ResourceNotFoundError:\n                self._logger.exception(\n                    f\"{self._log_prefix}: Container group was deleted before flow run \"\n                    \"completed, likely due to flow cancellation.\"\n                )\n\n                # since the flow was cancelled, exit early instead of raising an\n                # exception\n                return status_code\n\n            container = self._get_container(container_group)\n            current_state = container.instance_view.current_state.state\n\n            if current_state == ContainerRunState.TERMINATED:\n                status_code = container.instance_view.current_state.exit_code\n                # break instead of waiting for next loop iteration because\n                # trying to read logs from a terminated container raises an exception\n                break\n\n            if configuration.stream_output:\n                last_log_time = self._get_and_stream_output(\n                    client=client,\n                    configuration=configuration,\n                    container_group=container_group,\n                    last_log_time=last_log_time,\n                )\n\n            time.sleep(configuration.task_watch_poll_interval)\n\n        return status_code\n\n    async def _wait_for_container_group_deletion(\n        self,\n        aci_client: ContainerInstanceManagementClient,\n        configuration: AzureContainerJobConfiguration,\n        container_group_name: str,\n    ):\n\"\"\"\n        Wait for the container group to be deleted.\n        Args:\n            aci_client: An authenticated ACI client.\n            configuration: The job configuration.\n            container_group_name: The name of the container group to delete.\n        \"\"\"\n        self._logger.info(f\"{self._log_prefix}: Deleting container...\")\n\n        deletion_status_poller = await run_sync_in_worker_thread(\n            aci_client.container_groups.begin_delete,\n            resource_group_name=configuration.resource_group_name,\n            container_group_name=container_group_name,\n        )\n\n        t0 = time.time()\n        timeout = CONTAINER_GROUP_DELETION_TIMEOUT_SECONDS\n\n        while not deletion_status_poller.done():\n            elapsed_time = time.time() - t0\n\n            if timeout and elapsed_time &gt; timeout:\n                raise RuntimeError(\n                    (\n                        f\"Timed out after {elapsed_time}s while waiting for deletion of\"\n                        f\" container group {container_group_name}. To verify the group \"\n                        \"has been deleted, check the Azure Portal or run \"\n                        f\"az container show --name {container_group_name} --resource-group {configuration.resource_group_name}\"  # noqa\n                    )\n                )\n            await anyio.sleep(configuration.task_watch_poll_interval)\n\n        self._logger.info(f\"{self._log_prefix}: Container deleted.\")\n\n    def _get_container(self, container_group: ContainerGroup) -&gt; Container:\n\"\"\"\n        Extracts the job container from a container group.\n        \"\"\"\n        return container_group.containers[0]\n\n    @staticmethod\n    def _get_container_group(\n        client: ContainerInstanceManagementClient,\n        resource_group_name: str,\n        container_group_name: str,\n    ) -&gt; ContainerGroup:\n\"\"\"\n        Gets the container group from Azure.\n        \"\"\"\n        return client.container_groups.get(\n            resource_group_name=resource_group_name,\n            container_group_name=container_group_name,\n        )\n\n    def _get_and_stream_output(\n        self,\n        client: ContainerInstanceManagementClient,\n        configuration: AzureContainerJobConfiguration,\n        container_group: ContainerGroup,\n        last_log_time: datetime.datetime,\n    ) -&gt; datetime.datetime:\n\"\"\"\n        Fetches logs output from the job container and writes all entries after\n        a given time to stderr.\n\n        Args:\n            client: An initialized `ContainerInstanceManagementClient`\n            container_group: The container group that holds the job container.\n            last_log_time: The timestamp of the last output line already streamed.\n\n        Returns:\n            The time of the most recent output line written by this call.\n        \"\"\"\n        logs = self._get_logs(\n            client=client, configuration=configuration, container_group=container_group\n        )\n        return self._stream_output(logs, last_log_time)\n\n    def _get_logs(\n        self,\n        client: ContainerInstanceManagementClient,\n        configuration: AzureContainerJobConfiguration,\n        container_group: ContainerGroup,\n        max_lines: int = 100,\n    ) -&gt; str:\n\"\"\"\n        Gets the most container logs up to a given maximum.\n\n        Args:\n            client: An initialized `ContainerInstanceManagementClient`\n            container_group: The container group that holds the job container.\n            max_lines: The number of log lines to pull. Defaults to 100.\n\n        Returns:\n            A string containing the requested log entries, one per line.\n        \"\"\"\n        container = self._get_container(container_group)\n\n        logs: Union[Logs, None] = None\n        try:\n            logs = client.containers.list_logs(\n                resource_group_name=configuration.resource_group_name,\n                container_group_name=container_group.name,\n                container_name=container.name,\n                tail=max_lines,\n                timestamps=True,\n            )\n        except HttpResponseError:\n            # Trying to get logs when the container is under heavy CPU load sometimes\n            # results in an error, but we won't want to raise an exception and stop\n            # monitoring the flow. Instead, log the error and carry on so we can try to\n            # get all missed logs on the next check.\n            self._logger.warning(\n                f\"{self._log_prefix}: Unable to retrieve logs from container \"\n                f\"{container.name}. Trying again in \"\n                f\"{configuration.task_watch_poll_interval}s\"\n            )\n\n        return logs.content if logs else \"\"\n\n    def _stream_output(\n        self, log_content: Union[str, None], last_log_time: datetime.datetime\n    ) -&gt; datetime.datetime:\n\"\"\"\n        Writes each entry from a string of log lines to stderr.\n\n        Args:\n            log_content: A string containing Azure container logs.\n            last_log_time: The timestamp of the last output line already streamed.\n\n        Returns:\n            The time of the most recent output line written by this call.\n        \"\"\"\n        if not log_content:\n            # nothing to stream\n            return last_log_time\n\n        log_lines = log_content.split(\"\\n\")\n\n        last_written_time = last_log_time\n\n        for log_line in log_lines:\n            # skip if the line is blank or whitespace\n            if not log_line.strip():\n                continue\n\n            line_parts = log_line.split(\" \")\n            # timestamp should always be before first space in line\n            line_timestamp = line_parts[0]\n            line = \" \".join(line_parts[1:])\n\n            try:\n                line_time = dateutil.parser.parse(line_timestamp)\n                if line_time &gt; last_written_time:\n                    self._write_output_line(line)\n                    last_written_time = line_time\n            except dateutil.parser.ParserError as e:\n                self._logger.debug(\n                    (\n                        f\"{self._log_prefix}: Unable to parse timestamp from Azure \"\n                        \"log line: %s\"\n                    ),\n                    log_line,\n                    exc_info=e,\n                )\n\n        return last_written_time\n\n    @property\n    def _log_prefix(self) -&gt; str:\n\"\"\"\n        Internal property for generating a prefix for logs where `name` may be null\n        \"\"\"\n        if self.name is not None:\n            return f\"AzureContainerInstanceJob {self.name!r}\"\n        else:\n            return \"AzureContainerInstanceJob\"\n\n    @staticmethod\n    def _provisioning_succeeded(container_group: Union[ContainerGroup, None]) -&gt; bool:\n\"\"\"\n        Determines whether ACI container group provisioning was successful.\n\n        Args:\n            container_group: a container group returned by the Azure SDK.\n\n        Returns:\n            True if provisioning was successful, False otherwise.\n        \"\"\"\n        if not container_group:\n            return False\n\n        return (\n            container_group.provisioning_state\n            == ContainerGroupProvisioningState.SUCCEEDED\n            and len(container_group.containers) == 1\n        )\n\n    @staticmethod\n    def _write_output_line(line: str):\n\"\"\"\n        Writes a line of output to stderr.\n        \"\"\"\n        print(line, file=sys.stderr)\n</code></pre>"},{"location":"container_instance_worker/#prefect_azure.workers.container_instance.AzureContainerWorker-functions","title":"Functions","text":""},{"location":"container_instance_worker/#prefect_azure.workers.container_instance.AzureContainerWorker.kill_infrastructure","title":"<code>kill_infrastructure(infrastructure_pid, configuration)</code>  <code>async</code>","text":"<p>Kill a flow running in an ACI container group.</p> <p>Parameters:</p> Name Type Description Default <code>infrastructure_pid</code> <code>str</code> <p>The container group identification data yielded by <code>AzureContainerInstanceJob.run</code>.</p> required <code>configuration</code> <code>AzureContainerJobConfiguration</code> <p>The job configuration.</p> required Source code in <code>prefect_azure/workers/container_instance.py</code> <pre><code>async def kill_infrastructure(\n    self,\n    infrastructure_pid: str,\n    configuration: AzureContainerJobConfiguration,\n):\n\"\"\"\n    Kill a flow running in an ACI container group.\n\n    Args:\n        infrastructure_pid: The container group identification data yielded by\n            `AzureContainerInstanceJob.run`.\n        configuration: The job configuration.\n    \"\"\"\n    (flow_run_id, container_group_name) = infrastructure_pid.split(\":\")\n\n    aci_client = configuration.aci_credentials.get_container_client(\n        configuration.subscription_id.get_secret_value()\n    )\n\n    # get the container group to check that it still exists\n    try:\n        container_group = aci_client.container_groups.get(\n            resource_group_name=configuration.resource_group_name,\n            container_group_name=container_group_name,\n        )\n    except ResourceNotFoundError as exc:\n        # the container group no longer exists, so there's nothing to cancel\n        raise InfrastructureNotFound(\n            f\"Cannot stop ACI job: container group \"\n            f\"{container_group_name} no longer exists.\"\n        ) from exc\n\n    # get the container state to check if the container has terminated\n    container = self._get_container(container_group)\n    container_state = container.instance_view.current_state.state\n\n    # the container group needs to be deleted regardless of whether the container\n    # already terminated\n    await self._wait_for_container_group_deletion(\n        aci_client, configuration, container_group_name\n    )\n\n    # if the container has already terminated, raise an exception to let the agent\n    # know the flow was not cancelled\n    if container_state == ContainerRunState.TERMINATED:\n        raise InfrastructureNotAvailable(\n            f\"Cannot stop ACI job: container group {container_group.name} exists, \"\n            f\"but container {container.name} has already terminated.\"\n        )\n</code></pre>"},{"location":"container_instance_worker/#prefect_azure.workers.container_instance.AzureContainerWorker.run","title":"<code>run(flow_run, configuration, task_status=None)</code>  <code>async</code>","text":"<p>Run a flow in an Azure Container Instance.</p> <p>Parameters:</p> Name Type Description Default <code>flow_run</code> <code>FlowRun</code> <p>The flow run to run.</p> required <code>configuration</code> <code>AzureContainerJobConfiguration</code> <p>The configuration for the flow run.</p> required <code>task_status</code> <code>Optional[anyio.abc.TaskStatus]</code> <p>The task status object for the current task. Used</p> <code>None</code> <p>Returns:</p> Type Description <p>The result of the flow run.</p> Source code in <code>prefect_azure/workers/container_instance.py</code> <pre><code>async def run(\n    self,\n    flow_run: FlowRun,\n    configuration: AzureContainerJobConfiguration,\n    task_status: Optional[anyio.abc.TaskStatus] = None,\n):\n\"\"\"\n    Run a flow in an Azure Container Instance.\n    Args:\n        flow_run: The flow run to run.\n        configuration: The configuration for the flow run.\n        task_status: The task status object for the current task. Used\n        to provide an identifier that can be used to cancel the task.\n\n    Returns:\n        The result of the flow run.\n    \"\"\"\n    run_start_time = datetime.datetime.now(datetime.timezone.utc)\n    prefect_client = get_client()\n\n    # Get the flow, so we can use its name in the container group name\n    # to make it easier to identify and debug.\n    flow = await prefect_client.read_flow(flow_run.flow_id)\n    container_group_name = f\"{flow.name}-{flow_run.id}\"\n\n    self._logger.info(\n        f\"{self._log_prefix}: Preparing to run command {configuration.command} \"\n        f\"in container  {configuration.image})...\"\n    )\n\n    aci_client = configuration.aci_credentials.get_container_client(\n        configuration.subscription_id.get_secret_value()\n    )\n    resource_client = configuration.aci_credentials.get_resource_client(\n        configuration.subscription_id.get_secret_value()\n    )\n\n    created_container_group: Union[ContainerGroup, None] = None\n    try:\n        self._logger.info(f\"{self._log_prefix}: Creating container group...\")\n\n        created_container_group = await self._provision_container_group(\n            aci_client,\n            resource_client,\n            configuration,\n            container_group_name,\n        )\n        # Both the flow ID and container group name will be needed to\n        # cancel the flow run if needed.\n        identifier = f\"{flow_run.id}:{container_group_name}\"\n\n        if self._provisioning_succeeded(created_container_group):\n            self._logger.info(f\"{self._log_prefix}: Running command...\")\n            if task_status is not None:\n                task_status.started(value=identifier)\n\n            status_code = await run_sync_in_worker_thread(\n                self._watch_task_and_get_exit_code,\n                aci_client,\n                configuration,\n                created_container_group,\n                run_start_time,\n            )\n\n            self._logger.info(f\"{self._log_prefix}: Completed command run.\")\n\n        else:\n            raise RuntimeError(f\"{self._log_prefix}: Container creation failed.\")\n\n    finally:\n        await self._wait_for_container_group_deletion(\n            aci_client, configuration, container_group_name\n        )\n\n    return AzureContainerWorkerResult(\n        identifier=created_container_group.name, status_code=status_code\n    )\n</code></pre>"},{"location":"container_instance_worker/#prefect_azure.workers.container_instance.AzureContainerWorkerResult","title":"<code>AzureContainerWorkerResult</code>","text":"<p>         Bases: <code>BaseWorkerResult</code></p> <p>Contains information about the final state of a completed process</p> Source code in <code>prefect_azure/workers/container_instance.py</code> <pre><code>class AzureContainerWorkerResult(BaseWorkerResult):\n\"\"\"Contains information about the final state of a completed process\"\"\"\n</code></pre>"},{"location":"container_instance_worker/#prefect_azure.workers.container_instance.ContainerGroupProvisioningState","title":"<code>ContainerGroupProvisioningState</code>","text":"<p>         Bases: <code>str</code>, <code>Enum</code></p> <p>Terminal provisioning states for ACI container groups. Per the Azure docs, the states in this Enum are the only ones that can be relied on as dependencies.</p> Source code in <code>prefect_azure/workers/container_instance.py</code> <pre><code>class ContainerGroupProvisioningState(str, Enum):\n\"\"\"\n    Terminal provisioning states for ACI container groups. Per the Azure docs,\n    the states in this Enum are the only ones that can be relied on as dependencies.\n    \"\"\"\n\n    SUCCEEDED = \"Succeeded\"\n    FAILED = \"Failed\"\n</code></pre>"},{"location":"container_instance_worker/#prefect_azure.workers.container_instance.ContainerRunState","title":"<code>ContainerRunState</code>","text":"<p>         Bases: <code>str</code>, <code>Enum</code></p> <p>Terminal run states for ACI containers.</p> Source code in <code>prefect_azure/workers/container_instance.py</code> <pre><code>class ContainerRunState(str, Enum):\n\"\"\"\n    Terminal run states for ACI containers.\n    \"\"\"\n\n    RUNNING = \"Running\"\n    TERMINATED = \"Terminated\"\n</code></pre>"},{"location":"cosmos_db/","title":"Cosmos DB","text":""},{"location":"cosmos_db/#prefect_azure.cosmos_db","title":"<code>prefect_azure.cosmos_db</code>","text":"<p>Tasks for interacting with Azure Cosmos DB</p>"},{"location":"cosmos_db/#prefect_azure.cosmos_db-classes","title":"Classes","text":""},{"location":"cosmos_db/#prefect_azure.cosmos_db-functions","title":"Functions","text":""},{"location":"cosmos_db/#prefect_azure.cosmos_db.cosmos_db_create_item","title":"<code>cosmos_db_create_item(body, container, database, cosmos_db_credentials, **kwargs)</code>  <code>async</code>","text":"<p>Create an item in the container.</p> <p>To update or replace an existing item, use the upsert_item method.</p> <p>Parameters:</p> Name Type Description Default <code>body</code> <code>Dict[str, Any]</code> <p>A dict-like object representing the item to create.</p> required <code>container</code> <code>Union[str, ContainerProxy, Dict[str, Any]]</code> <p>The ID (name) of the container, a ContainerProxy instance, or a dict representing the properties of the container to be retrieved.</p> required <code>database</code> <code>Union[str, DatabaseProxy, Dict[str, Any]]</code> <p>The ID (name), dict representing the properties or DatabaseProxy instance of the database to read.</p> required <code>cosmos_db_credentials</code> <code>AzureCosmosDbCredentials</code> <p>Credentials to use for authentication with Azure.</p> required <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict representing the new item.</p> Example <p>Create an item in the container.</p> <p>To update or replace an existing item, use the upsert_item method. <pre><code>import uuid\n\nfrom prefect import flow\n\nfrom prefect_azure import AzureCosmosDbCredentials\nfrom prefect_azure.cosmos_db import cosmos_db_create_item\n\n@flow\ndef example_cosmos_db_create_item_flow():\n    connection_string = \"connection_string\"\n    cosmos_db_credentials = AzureCosmosDbCredentials(connection_string)\n\n    body = {\n        \"firstname\": \"Olivia\",\n        \"age\": 3,\n        \"id\": str(uuid.uuid4())\n    }\n    container = \"Persons\"\n    database = \"SampleDB\"\n\n    result = cosmos_db_create_item(\n        body,\n        container,\n        database,\n        cosmos_db_credentials\n    )\n    return result\n\nexample_cosmos_db_create_item_flow()\n</code></pre></p> Source code in <code>prefect_azure/cosmos_db.py</code> <pre><code>@task\nasync def cosmos_db_create_item(\n    body: Dict[str, Any],\n    container: Union[str, \"ContainerProxy\", Dict[str, Any]],\n    database: Union[str, \"DatabaseProxy\", Dict[str, Any]],\n    cosmos_db_credentials: AzureCosmosDbCredentials,\n    **kwargs: Any\n) -&gt; Dict[str, Any]:\n\"\"\"\n    Create an item in the container.\n\n    To update or replace an existing item, use the upsert_item method.\n\n    Args:\n        body: A dict-like object representing the item to create.\n        container: The ID (name) of the container, a ContainerProxy instance,\n            or a dict representing the properties of the container to be retrieved.\n        database: The ID (name), dict representing the properties\n            or DatabaseProxy instance of the database to read.\n        cosmos_db_credentials: Credentials to use for authentication with Azure.\n        **kwargs: Additional keyword arguments to pass.\n\n    Returns:\n        A dict representing the new item.\n\n    Example:\n        Create an item in the container.\n\n        To update or replace an existing item, use the upsert_item method.\n        ```python\n        import uuid\n\n        from prefect import flow\n\n        from prefect_azure import AzureCosmosDbCredentials\n        from prefect_azure.cosmos_db import cosmos_db_create_item\n\n        @flow\n        def example_cosmos_db_create_item_flow():\n            connection_string = \"connection_string\"\n            cosmos_db_credentials = AzureCosmosDbCredentials(connection_string)\n\n            body = {\n                \"firstname\": \"Olivia\",\n                \"age\": 3,\n                \"id\": str(uuid.uuid4())\n            }\n            container = \"Persons\"\n            database = \"SampleDB\"\n\n            result = cosmos_db_create_item(\n                body,\n                container,\n                database,\n                cosmos_db_credentials\n            )\n            return result\n\n        example_cosmos_db_create_item_flow()\n        ```\n    \"\"\"\n    logger = get_run_logger()\n    logger.info(\n        \"Creating the item within container %s under %s database\",\n        container,\n        database,\n    )\n\n    container_client = cosmos_db_credentials.get_container_client(container, database)\n    create_item = partial(container_client.create_item, body, **kwargs)\n    result = await to_thread.run_sync(create_item)\n    return result\n</code></pre>"},{"location":"cosmos_db/#prefect_azure.cosmos_db.cosmos_db_query_items","title":"<code>cosmos_db_query_items(query, container, database, cosmos_db_credentials, parameters=None, partition_key=None, **kwargs)</code>  <code>async</code>","text":"<p>Return all results matching the given query.</p> <p>You can use any value for the container name in the FROM clause, but often the container name is used. In the examples below, the container name is \"products,\" and is aliased as \"p\" for easier referencing in the WHERE clause.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str</code> <p>The Azure Cosmos DB SQL query to execute.</p> required <code>container</code> <code>Union[str, ContainerProxy, Dict[str, Any]]</code> <p>The ID (name) of the container, a ContainerProxy instance, or a dict representing the properties of the container to be retrieved.</p> required <code>database</code> <code>Union[str, DatabaseProxy, Dict[str, Any]]</code> <p>The ID (name), dict representing the properties or DatabaseProxy instance of the database to read.</p> required <code>cosmos_db_credentials</code> <code>AzureCosmosDbCredentials</code> <p>Credentials to use for authentication with Azure.</p> required <code>parameters</code> <code>Optional[List[Dict[str, object]]]</code> <p>Optional array of parameters to the query. Each parameter is a dict() with 'name' and 'value' keys.</p> <code>None</code> <code>partition_key</code> <code>Optional[Any]</code> <p>Partition key for the item to retrieve.</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass.</p> <code>{}</code> <p>Returns:</p> Type Description <code>List[Union[str, dict]]</code> <p>An <code>list</code> of results.</p> Example <p>Query SampleDB Persons container where age &gt;= 44 <pre><code>from prefect import flow\n\nfrom prefect_azure import AzureCosmosDbCredentials\nfrom prefect_azure.cosmos_db import cosmos_db_query_items\n\n@flow\ndef example_cosmos_db_query_items_flow():\n    connection_string = \"connection_string\"\n    cosmos_db_credentials = AzureCosmosDbCredentials(connection_string)\n\n    query = \"SELECT * FROM c where c.age &gt;= @age\"\n    container = \"Persons\"\n    database = \"SampleDB\"\n    parameters = [dict(name=\"@age\", value=44)]\n\n    results = cosmos_db_query_items(\n        query,\n        container,\n        database,\n        cosmos_db_credentials,\n        parameters=parameters,\n        enable_cross_partition_query=True,\n    )\n    return results\n\nexample_cosmos_db_query_items_flow()\n</code></pre></p> Source code in <code>prefect_azure/cosmos_db.py</code> <pre><code>@task\nasync def cosmos_db_query_items(\n    query: str,\n    container: Union[str, \"ContainerProxy\", Dict[str, Any]],\n    database: Union[str, \"DatabaseProxy\", Dict[str, Any]],\n    cosmos_db_credentials: AzureCosmosDbCredentials,\n    parameters: Optional[List[Dict[str, object]]] = None,\n    partition_key: Optional[Any] = None,\n    **kwargs: Any\n) -&gt; List[Union[str, dict]]:\n\"\"\"\n    Return all results matching the given query.\n\n    You can use any value for the container name in the FROM clause,\n    but often the container name is used.\n    In the examples below, the container name is \"products,\"\n    and is aliased as \"p\" for easier referencing in the WHERE clause.\n\n    Args:\n        query: The Azure Cosmos DB SQL query to execute.\n        container: The ID (name) of the container, a ContainerProxy instance,\n            or a dict representing the properties of the container to be retrieved.\n        database: The ID (name), dict representing the properties\n            or DatabaseProxy instance of the database to read.\n        cosmos_db_credentials: Credentials to use for authentication with Azure.\n        parameters: Optional array of parameters to the query.\n            Each parameter is a dict() with 'name' and 'value' keys.\n        partition_key: Partition key for the item to retrieve.\n        **kwargs: Additional keyword arguments to pass.\n\n    Returns:\n        An `list` of results.\n\n    Example:\n        Query SampleDB Persons container where age &gt;= 44\n        ```python\n        from prefect import flow\n\n        from prefect_azure import AzureCosmosDbCredentials\n        from prefect_azure.cosmos_db import cosmos_db_query_items\n\n        @flow\n        def example_cosmos_db_query_items_flow():\n            connection_string = \"connection_string\"\n            cosmos_db_credentials = AzureCosmosDbCredentials(connection_string)\n\n            query = \"SELECT * FROM c where c.age &gt;= @age\"\n            container = \"Persons\"\n            database = \"SampleDB\"\n            parameters = [dict(name=\"@age\", value=44)]\n\n            results = cosmos_db_query_items(\n                query,\n                container,\n                database,\n                cosmos_db_credentials,\n                parameters=parameters,\n                enable_cross_partition_query=True,\n            )\n            return results\n\n        example_cosmos_db_query_items_flow()\n        ```\n    \"\"\"\n    logger = get_run_logger()\n    logger.info(\"Running query from container %s in %s database\", container, database)\n\n    container_client = cosmos_db_credentials.get_container_client(container, database)\n    partial_query_items = partial(\n        container_client.query_items,\n        query,\n        parameters=parameters,\n        partition_key=partition_key,\n        **kwargs\n    )\n    results = await to_thread.run_sync(partial_query_items)\n    return results\n</code></pre>"},{"location":"cosmos_db/#prefect_azure.cosmos_db.cosmos_db_read_item","title":"<code>cosmos_db_read_item(item, partition_key, container, database, cosmos_db_credentials, **kwargs)</code>  <code>async</code>","text":"<p>Get the item identified by item.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>Union[str, Dict[str, Any]]</code> <p>The ID (name) or dict representing item to retrieve.</p> required <code>partition_key</code> <code>Any</code> <p>Partition key for the item to retrieve.</p> required <code>container</code> <code>Union[str, ContainerProxy, Dict[str, Any]]</code> <p>The ID (name) of the container, a ContainerProxy instance, or a dict representing the properties of the container to be retrieved.</p> required <code>database</code> <code>Union[str, DatabaseProxy, Dict[str, Any]]</code> <p>The ID (name), dict representing the properties or DatabaseProxy instance of the database to read.</p> required <code>cosmos_db_credentials</code> <code>AzureCosmosDbCredentials</code> <p>Credentials to use for authentication with Azure.</p> required <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass.</p> <code>{}</code> <p>Returns:</p> Type Description <code>List[Union[str, dict]]</code> <p>Dict representing the item to be retrieved.</p> Example <p>Read an item using a partition key from Cosmos DB. <pre><code>from prefect import flow\n\nfrom prefect_azure import AzureCosmosDbCredentials\nfrom prefect_azure.cosmos_db import cosmos_db_read_item\n\n@flow\ndef example_cosmos_db_read_item_flow():\n    connection_string = \"connection_string\"\n    cosmos_db_credentials = AzureCosmosDbCredentials(connection_string)\n\n    item = \"item\"\n    partition_key = \"partition_key\"\n    container = \"container\"\n    database = \"database\"\n\n    result = cosmos_db_read_item(\n        item,\n        partition_key,\n        container,\n        database,\n        cosmos_db_credentials\n    )\n    return result\n\nexample_cosmos_db_read_item_flow()\n</code></pre></p> Source code in <code>prefect_azure/cosmos_db.py</code> <pre><code>@task\nasync def cosmos_db_read_item(\n    item: Union[str, Dict[str, Any]],\n    partition_key: Any,\n    container: Union[str, \"ContainerProxy\", Dict[str, Any]],\n    database: Union[str, \"DatabaseProxy\", Dict[str, Any]],\n    cosmos_db_credentials: AzureCosmosDbCredentials,\n    **kwargs: Any\n) -&gt; List[Union[str, dict]]:\n\"\"\"\n    Get the item identified by item.\n\n    Args:\n        item: The ID (name) or dict representing item to retrieve.\n        partition_key: Partition key for the item to retrieve.\n        container: The ID (name) of the container, a ContainerProxy instance,\n            or a dict representing the properties of the container to be retrieved.\n        database: The ID (name), dict representing the properties\n            or DatabaseProxy instance of the database to read.\n        cosmos_db_credentials: Credentials to use for authentication with Azure.\n        **kwargs: Additional keyword arguments to pass.\n\n    Returns:\n        Dict representing the item to be retrieved.\n\n    Example:\n        Read an item using a partition key from Cosmos DB.\n        ```python\n        from prefect import flow\n\n        from prefect_azure import AzureCosmosDbCredentials\n        from prefect_azure.cosmos_db import cosmos_db_read_item\n\n        @flow\n        def example_cosmos_db_read_item_flow():\n            connection_string = \"connection_string\"\n            cosmos_db_credentials = AzureCosmosDbCredentials(connection_string)\n\n            item = \"item\"\n            partition_key = \"partition_key\"\n            container = \"container\"\n            database = \"database\"\n\n            result = cosmos_db_read_item(\n                item,\n                partition_key,\n                container,\n                database,\n                cosmos_db_credentials\n            )\n            return result\n\n        example_cosmos_db_read_item_flow()\n        ```\n    \"\"\"\n    logger = get_run_logger()\n    logger.info(\n        \"Reading item %s with partition_key %s from container %s in %s database\",\n        item,\n        partition_key,\n        container,\n        database,\n    )\n\n    container_client = cosmos_db_credentials.get_container_client(container, database)\n    read_item = partial(container_client.read_item, item, partition_key, **kwargs)\n    result = await to_thread.run_sync(read_item)\n    return result\n</code></pre>"},{"location":"credentials/","title":"Credentials","text":""},{"location":"credentials/#prefect_azure.credentials","title":"<code>prefect_azure.credentials</code>","text":"<p>Credential classes used to perform authenticated interactions with Azure</p>"},{"location":"credentials/#prefect_azure.credentials-classes","title":"Classes","text":""},{"location":"credentials/#prefect_azure.credentials.AzureBlobStorageCredentials","title":"<code>AzureBlobStorageCredentials</code>","text":"<p>         Bases: <code>Block</code></p> <p>Stores credentials for authenticating with Azure Blob Storage.</p> <p>Parameters:</p> Name Type Description Default <code>account_url</code> <p>The URL for your Azure storage account. If provided, the account URL will be used to authenticate with the discovered default Azure credentials.</p> required <code>connection_string</code> <p>The connection string to your Azure storage account. If provided, the connection string will take precedence over the account URL.</p> required Example <p>Load stored Azure Blob Storage credentials and retrieve a blob service client: <pre><code>from prefect_azure import AzureBlobStorageCredentials\n\nazure_credentials_block = AzureBlobStorageCredentials.load(\"BLOCK_NAME\")\n\nblob_service_client = azure_credentials_block.get_blob_client()\n</code></pre></p> Source code in <code>prefect_azure/credentials.py</code> <pre><code>class AzureBlobStorageCredentials(Block):\n\"\"\"\n    Stores credentials for authenticating with Azure Blob Storage.\n\n    Args:\n        account_url: The URL for your Azure storage account. If provided, the account\n            URL will be used to authenticate with the discovered default Azure\n            credentials.\n        connection_string: The connection string to your Azure storage account. If\n            provided, the connection string will take precedence over the account URL.\n\n    Example:\n        Load stored Azure Blob Storage credentials and retrieve a blob service client:\n        ```python\n        from prefect_azure import AzureBlobStorageCredentials\n\n        azure_credentials_block = AzureBlobStorageCredentials.load(\"BLOCK_NAME\")\n\n        blob_service_client = azure_credentials_block.get_blob_client()\n        ```\n    \"\"\"\n\n    _block_type_name = \"Azure Blob Storage Credentials\"\n    _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/6AiQ6HRIft8TspZH7AfyZg/39fd82bdbb186db85560f688746c8cdd/azure.png?h=250\"  # noqa\n    _documentation_url = \"https://prefecthq.github.io/prefect-azure/credentials/#prefect_azure.credentials.AzureBlobStorageCredentials\"  # noqa\n\n    connection_string: Optional[SecretStr] = Field(\n        default=None,\n        description=(\n            \"The connection string to your Azure storage account. If provided, the \"\n            \"connection string will take precedence over the account URL.\"\n        ),\n    )\n    account_url: Optional[str] = Field(\n        default=None,\n        title=\"Account URL\",\n        description=(\n            \"The URL for your Azure storage account. If provided, the account \"\n            \"URL will be used to authenticate with the discovered default \"\n            \"Azure credentials.\"\n        ),\n    )\n\n    @root_validator\n    def check_connection_string_or_account_url(\n        cls, values: Dict[str, Any]\n    ) -&gt; Dict[str, Any]:\n\"\"\"\n        Checks that either a connection string or account URL is provided, not both.\n        \"\"\"\n        has_account_url = values.get(\"account_url\") is not None\n        has_conn_str = values.get(\"connection_string\") is not None\n        if not bool(has_account_url ^ has_conn_str):\n            raise ValueError(\n                \"Must provide either a connection string or account URL, but not both.\"\n            )\n        return values\n\n    @_raise_help_msg(\"blob_storage\")\n    def get_client(self) -&gt; \"BlobServiceClient\":\n\"\"\"\n        Returns an authenticated base Blob Service client that can be used to create\n        other clients for Azure services.\n\n        Example:\n            Create an authorized Blob Service session\n            ```python\n            import os\n            import asyncio\n            from prefect import flow\n            from prefect_azure import AzureBlobStorageCredentials\n\n            @flow\n            async def example_get_client_flow():\n                connection_string = os.getenv(\"AZURE_STORAGE_CONNECTION_STRING\")\n                azure_credentials = AzureBlobStorageCredentials(\n                    connection_string=connection_string,\n                )\n                async with azure_credentials.get_client() as blob_service_client:\n                    # run other code here\n                    pass\n\n            asyncio.run(example_get_client_flow())\n            ```\n        \"\"\"\n        if self.connection_string is None:\n            return BlobServiceClient(\n                account_url=self.account_url,\n                credential=DefaultAzureCredential(),\n            )\n\n        return BlobServiceClient.from_connection_string(\n            self.connection_string.get_secret_value()\n        )\n\n    @_raise_help_msg(\"blob_storage\")\n    def get_blob_client(self, container, blob) -&gt; \"BlobClient\":\n\"\"\"\n        Returns an authenticated Blob client that can be used to\n        download and upload blobs.\n\n        Args:\n            container: Name of the Blob Storage container to retrieve from.\n            blob: Name of the blob within this container to retrieve.\n\n        Example:\n            Create an authorized Blob session\n            ```python\n            import os\n            import asyncio\n            from prefect import flow\n            from prefect_azure import AzureBlobStorageCredentials\n\n            @flow\n            async def example_get_blob_client_flow():\n                connection_string = os.getenv(\"AZURE_STORAGE_CONNECTION_STRING\")\n                azure_credentials = AzureBlobStorageCredentials(\n                    connection_string=connection_string,\n                )\n                async with azure_credentials.get_blob_client(\n                    \"container\", \"blob\"\n                ) as blob_client:\n                    # run other code here\n                    pass\n\n            asyncio.run(example_get_blob_client_flow())\n            ```\n        \"\"\"\n        if self.connection_string is None:\n            return BlobClient(\n                account_url=self.account_url,\n                container_name=container,\n                credential=DefaultAzureCredential(),\n                blob_name=blob,\n            )\n\n        blob_client = BlobClient.from_connection_string(\n            self.connection_string.get_secret_value(), container, blob\n        )\n        return blob_client\n\n    @_raise_help_msg(\"blob_storage\")\n    def get_container_client(self, container) -&gt; \"ContainerClient\":\n\"\"\"\n        Returns an authenticated Container client that can be used to create clients\n        for Azure services.\n\n        Args:\n            container: Name of the Blob Storage container to retrieve from.\n\n        Example:\n            Create an authorized Container session\n            ```python\n            import os\n            import asyncio\n            from prefect import flow\n            from prefect_azure import AzureBlobStorageCredentials\n\n            @flow\n            async def example_get_container_client_flow():\n                connection_string = os.getenv(\"AZURE_STORAGE_CONNECTION_STRING\")\n                azure_credentials = AzureBlobStorageCredentials(\n                    connection_string=connection_string,\n                )\n                async with azure_credentials.get_container_client(\n                    \"container\"\n                ) as container_client:\n                    # run other code here\n                    pass\n\n            asyncio.run(example_get_container_client_flow())\n            ```\n        \"\"\"\n        if self.connection_string is None:\n            return ContainerClient(\n                account_url=self.account_url,\n                container_name=container,\n                credential=DefaultAzureCredential(),\n            )\n\n        container_client = ContainerClient.from_connection_string(\n            self.connection_string.get_secret_value(), container\n        )\n        return container_client\n</code></pre>"},{"location":"credentials/#prefect_azure.credentials.AzureBlobStorageCredentials-functions","title":"Functions","text":""},{"location":"credentials/#prefect_azure.credentials.AzureBlobStorageCredentials.check_connection_string_or_account_url","title":"<code>check_connection_string_or_account_url(values)</code>","text":"<p>Checks that either a connection string or account URL is provided, not both.</p> Source code in <code>prefect_azure/credentials.py</code> <pre><code>@root_validator\ndef check_connection_string_or_account_url(\n    cls, values: Dict[str, Any]\n) -&gt; Dict[str, Any]:\n\"\"\"\n    Checks that either a connection string or account URL is provided, not both.\n    \"\"\"\n    has_account_url = values.get(\"account_url\") is not None\n    has_conn_str = values.get(\"connection_string\") is not None\n    if not bool(has_account_url ^ has_conn_str):\n        raise ValueError(\n            \"Must provide either a connection string or account URL, but not both.\"\n        )\n    return values\n</code></pre>"},{"location":"credentials/#prefect_azure.credentials.AzureBlobStorageCredentials.get_blob_client","title":"<code>get_blob_client(container, blob)</code>","text":"<p>Returns an authenticated Blob client that can be used to download and upload blobs.</p> <p>Parameters:</p> Name Type Description Default <code>container</code> <p>Name of the Blob Storage container to retrieve from.</p> required <code>blob</code> <p>Name of the blob within this container to retrieve.</p> required Example <p>Create an authorized Blob session <pre><code>import os\nimport asyncio\nfrom prefect import flow\nfrom prefect_azure import AzureBlobStorageCredentials\n\n@flow\nasync def example_get_blob_client_flow():\n    connection_string = os.getenv(\"AZURE_STORAGE_CONNECTION_STRING\")\n    azure_credentials = AzureBlobStorageCredentials(\n        connection_string=connection_string,\n    )\n    async with azure_credentials.get_blob_client(\n        \"container\", \"blob\"\n    ) as blob_client:\n        # run other code here\n        pass\n\nasyncio.run(example_get_blob_client_flow())\n</code></pre></p> Source code in <code>prefect_azure/credentials.py</code> <pre><code>@_raise_help_msg(\"blob_storage\")\ndef get_blob_client(self, container, blob) -&gt; \"BlobClient\":\n\"\"\"\n    Returns an authenticated Blob client that can be used to\n    download and upload blobs.\n\n    Args:\n        container: Name of the Blob Storage container to retrieve from.\n        blob: Name of the blob within this container to retrieve.\n\n    Example:\n        Create an authorized Blob session\n        ```python\n        import os\n        import asyncio\n        from prefect import flow\n        from prefect_azure import AzureBlobStorageCredentials\n\n        @flow\n        async def example_get_blob_client_flow():\n            connection_string = os.getenv(\"AZURE_STORAGE_CONNECTION_STRING\")\n            azure_credentials = AzureBlobStorageCredentials(\n                connection_string=connection_string,\n            )\n            async with azure_credentials.get_blob_client(\n                \"container\", \"blob\"\n            ) as blob_client:\n                # run other code here\n                pass\n\n        asyncio.run(example_get_blob_client_flow())\n        ```\n    \"\"\"\n    if self.connection_string is None:\n        return BlobClient(\n            account_url=self.account_url,\n            container_name=container,\n            credential=DefaultAzureCredential(),\n            blob_name=blob,\n        )\n\n    blob_client = BlobClient.from_connection_string(\n        self.connection_string.get_secret_value(), container, blob\n    )\n    return blob_client\n</code></pre>"},{"location":"credentials/#prefect_azure.credentials.AzureBlobStorageCredentials.get_client","title":"<code>get_client()</code>","text":"<p>Returns an authenticated base Blob Service client that can be used to create other clients for Azure services.</p> Example <p>Create an authorized Blob Service session <pre><code>import os\nimport asyncio\nfrom prefect import flow\nfrom prefect_azure import AzureBlobStorageCredentials\n\n@flow\nasync def example_get_client_flow():\n    connection_string = os.getenv(\"AZURE_STORAGE_CONNECTION_STRING\")\n    azure_credentials = AzureBlobStorageCredentials(\n        connection_string=connection_string,\n    )\n    async with azure_credentials.get_client() as blob_service_client:\n        # run other code here\n        pass\n\nasyncio.run(example_get_client_flow())\n</code></pre></p> Source code in <code>prefect_azure/credentials.py</code> <pre><code>@_raise_help_msg(\"blob_storage\")\ndef get_client(self) -&gt; \"BlobServiceClient\":\n\"\"\"\n    Returns an authenticated base Blob Service client that can be used to create\n    other clients for Azure services.\n\n    Example:\n        Create an authorized Blob Service session\n        ```python\n        import os\n        import asyncio\n        from prefect import flow\n        from prefect_azure import AzureBlobStorageCredentials\n\n        @flow\n        async def example_get_client_flow():\n            connection_string = os.getenv(\"AZURE_STORAGE_CONNECTION_STRING\")\n            azure_credentials = AzureBlobStorageCredentials(\n                connection_string=connection_string,\n            )\n            async with azure_credentials.get_client() as blob_service_client:\n                # run other code here\n                pass\n\n        asyncio.run(example_get_client_flow())\n        ```\n    \"\"\"\n    if self.connection_string is None:\n        return BlobServiceClient(\n            account_url=self.account_url,\n            credential=DefaultAzureCredential(),\n        )\n\n    return BlobServiceClient.from_connection_string(\n        self.connection_string.get_secret_value()\n    )\n</code></pre>"},{"location":"credentials/#prefect_azure.credentials.AzureBlobStorageCredentials.get_container_client","title":"<code>get_container_client(container)</code>","text":"<p>Returns an authenticated Container client that can be used to create clients for Azure services.</p> <p>Parameters:</p> Name Type Description Default <code>container</code> <p>Name of the Blob Storage container to retrieve from.</p> required Example <p>Create an authorized Container session <pre><code>import os\nimport asyncio\nfrom prefect import flow\nfrom prefect_azure import AzureBlobStorageCredentials\n\n@flow\nasync def example_get_container_client_flow():\n    connection_string = os.getenv(\"AZURE_STORAGE_CONNECTION_STRING\")\n    azure_credentials = AzureBlobStorageCredentials(\n        connection_string=connection_string,\n    )\n    async with azure_credentials.get_container_client(\n        \"container\"\n    ) as container_client:\n        # run other code here\n        pass\n\nasyncio.run(example_get_container_client_flow())\n</code></pre></p> Source code in <code>prefect_azure/credentials.py</code> <pre><code>@_raise_help_msg(\"blob_storage\")\ndef get_container_client(self, container) -&gt; \"ContainerClient\":\n\"\"\"\n    Returns an authenticated Container client that can be used to create clients\n    for Azure services.\n\n    Args:\n        container: Name of the Blob Storage container to retrieve from.\n\n    Example:\n        Create an authorized Container session\n        ```python\n        import os\n        import asyncio\n        from prefect import flow\n        from prefect_azure import AzureBlobStorageCredentials\n\n        @flow\n        async def example_get_container_client_flow():\n            connection_string = os.getenv(\"AZURE_STORAGE_CONNECTION_STRING\")\n            azure_credentials = AzureBlobStorageCredentials(\n                connection_string=connection_string,\n            )\n            async with azure_credentials.get_container_client(\n                \"container\"\n            ) as container_client:\n                # run other code here\n                pass\n\n        asyncio.run(example_get_container_client_flow())\n        ```\n    \"\"\"\n    if self.connection_string is None:\n        return ContainerClient(\n            account_url=self.account_url,\n            container_name=container,\n            credential=DefaultAzureCredential(),\n        )\n\n    container_client = ContainerClient.from_connection_string(\n        self.connection_string.get_secret_value(), container\n    )\n    return container_client\n</code></pre>"},{"location":"credentials/#prefect_azure.credentials.AzureContainerInstanceCredentials","title":"<code>AzureContainerInstanceCredentials</code>","text":"<p>         Bases: <code>Block</code></p> <p>Block used to manage Azure Container Instances authentication. Stores Azure Service Principal authentication data.</p> Source code in <code>prefect_azure/credentials.py</code> <pre><code>class AzureContainerInstanceCredentials(Block):\n\"\"\"\n    Block used to manage Azure Container Instances authentication. Stores Azure Service\n    Principal authentication data.\n    \"\"\"\n\n    _block_type_name = \"Azure Container Instance Credentials\"\n    _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/6AiQ6HRIft8TspZH7AfyZg/39fd82bdbb186db85560f688746c8cdd/azure.png?h=250\"  # noqa\n    _documentation_url = \"https://prefecthq.github.io/prefect-azure/credentials/#prefect_azure.credentials.AzureContainerInstanceCredentials\"  # noqa\n\n    client_id: Optional[str] = Field(\n        default=None,\n        title=\"Client ID\",\n        description=(\n            \"The service principal client ID. \"\n            \"If none of client_id, tenant_id, and client_secret are provided, \"\n            \"will use DefaultAzureCredential; else will need to provide all three to \"\n            \"use ClientSecretCredential.\"\n        ),\n    )\n    tenant_id: Optional[str] = Field(\n        default=None,\n        title=\"Tenant ID\",\n        description=(\n            \"The service principal tenant ID.\"\n            \"If none of client_id, tenant_id, and client_secret are provided, \"\n            \"will use DefaultAzureCredential; else will need to provide all three to \"\n            \"use ClientSecretCredential.\"\n        ),\n    )\n    client_secret: Optional[SecretStr] = Field(\n        default=None,\n        description=(\n            \"The service principal client secret.\"\n            \"If none of client_id, tenant_id, and client_secret are provided, \"\n            \"will use DefaultAzureCredential; else will need to provide all three to \"\n            \"use ClientSecretCredential.\"\n        ),\n    )\n    credential_kwargs: Dict[str, Any] = Field(\n        default_factory=dict,\n        title=\"Additional Credential Keyword Arguments\",\n        description=(\n            \"Additional keyword arguments to pass to \"\n            \"`ClientSecretCredential` or `DefaultAzureCredential`.\"\n        ),\n    )\n\n    @root_validator\n    def validate_credential_kwargs(cls, values):\n\"\"\"\n        Validates that if any of `client_id`, `tenant_id`, or `client_secret` are\n        provided, all must be provided.\n        \"\"\"\n        auth_args = (\"client_id\", \"tenant_id\", \"client_secret\")\n        has_any = any(values.get(key) is not None for key in auth_args)\n        has_all = all(values.get(key) is not None for key in auth_args)\n        if has_any and not has_all:\n            raise ValueError(\n                \"If any of `client_id`, `tenant_id`, or `client_secret` are provided, \"\n                \"all must be provided.\"\n            )\n        return values\n\n    def get_container_client(self, subscription_id: str):\n\"\"\"\n        Creates an Azure Container Instances client initialized with data from\n        this block's fields and a provided Azure subscription ID.\n\n        Args:\n            subscription_id: A valid Azure subscription ID.\n\n        Returns:\n            An initialized `ContainerInstanceManagementClient`\n        \"\"\"\n\n        return ContainerInstanceManagementClient(\n            credential=self._create_credential(),\n            subscription_id=subscription_id,\n        )\n\n    def get_resource_client(self, subscription_id: str):\n\"\"\"\n        Creates an Azure resource management client initialized with data from\n        this block's fields and a provided Azure subscription ID.\n\n        Args:\n            subscription_id: A valid Azure subscription ID.\n\n        Returns:\n            An initialized `ResourceManagementClient`\n        \"\"\"\n\n        return ResourceManagementClient(\n            credential=self._create_credential(),\n            subscription_id=subscription_id,\n        )\n\n    def _create_credential(self):\n\"\"\"\n        Creates an Azure credential initialized with data from this block's fields.\n\n        Returns:\n            An initialized Azure `TokenCredential` ready to use with Azure SDK client\n            classes.\n        \"\"\"\n        auth_args = (self.client_id, self.tenant_id, self.client_secret)\n        if auth_args == (None, None, None):\n            return DefaultAzureCredential(**self.credential_kwargs)\n\n        return ClientSecretCredential(\n            tenant_id=self.tenant_id,\n            client_id=self.client_id,\n            client_secret=self.client_secret.get_secret_value(),\n            **self.credential_kwargs,\n        )\n</code></pre>"},{"location":"credentials/#prefect_azure.credentials.AzureContainerInstanceCredentials-functions","title":"Functions","text":""},{"location":"credentials/#prefect_azure.credentials.AzureContainerInstanceCredentials.get_container_client","title":"<code>get_container_client(subscription_id)</code>","text":"<p>Creates an Azure Container Instances client initialized with data from this block's fields and a provided Azure subscription ID.</p> <p>Parameters:</p> Name Type Description Default <code>subscription_id</code> <code>str</code> <p>A valid Azure subscription ID.</p> required <p>Returns:</p> Type Description <p>An initialized <code>ContainerInstanceManagementClient</code></p> Source code in <code>prefect_azure/credentials.py</code> <pre><code>def get_container_client(self, subscription_id: str):\n\"\"\"\n    Creates an Azure Container Instances client initialized with data from\n    this block's fields and a provided Azure subscription ID.\n\n    Args:\n        subscription_id: A valid Azure subscription ID.\n\n    Returns:\n        An initialized `ContainerInstanceManagementClient`\n    \"\"\"\n\n    return ContainerInstanceManagementClient(\n        credential=self._create_credential(),\n        subscription_id=subscription_id,\n    )\n</code></pre>"},{"location":"credentials/#prefect_azure.credentials.AzureContainerInstanceCredentials.get_resource_client","title":"<code>get_resource_client(subscription_id)</code>","text":"<p>Creates an Azure resource management client initialized with data from this block's fields and a provided Azure subscription ID.</p> <p>Parameters:</p> Name Type Description Default <code>subscription_id</code> <code>str</code> <p>A valid Azure subscription ID.</p> required <p>Returns:</p> Type Description <p>An initialized <code>ResourceManagementClient</code></p> Source code in <code>prefect_azure/credentials.py</code> <pre><code>def get_resource_client(self, subscription_id: str):\n\"\"\"\n    Creates an Azure resource management client initialized with data from\n    this block's fields and a provided Azure subscription ID.\n\n    Args:\n        subscription_id: A valid Azure subscription ID.\n\n    Returns:\n        An initialized `ResourceManagementClient`\n    \"\"\"\n\n    return ResourceManagementClient(\n        credential=self._create_credential(),\n        subscription_id=subscription_id,\n    )\n</code></pre>"},{"location":"credentials/#prefect_azure.credentials.AzureContainerInstanceCredentials.validate_credential_kwargs","title":"<code>validate_credential_kwargs(values)</code>","text":"<p>Validates that if any of <code>client_id</code>, <code>tenant_id</code>, or <code>client_secret</code> are provided, all must be provided.</p> Source code in <code>prefect_azure/credentials.py</code> <pre><code>@root_validator\ndef validate_credential_kwargs(cls, values):\n\"\"\"\n    Validates that if any of `client_id`, `tenant_id`, or `client_secret` are\n    provided, all must be provided.\n    \"\"\"\n    auth_args = (\"client_id\", \"tenant_id\", \"client_secret\")\n    has_any = any(values.get(key) is not None for key in auth_args)\n    has_all = all(values.get(key) is not None for key in auth_args)\n    if has_any and not has_all:\n        raise ValueError(\n            \"If any of `client_id`, `tenant_id`, or `client_secret` are provided, \"\n            \"all must be provided.\"\n        )\n    return values\n</code></pre>"},{"location":"credentials/#prefect_azure.credentials.AzureCosmosDbCredentials","title":"<code>AzureCosmosDbCredentials</code>","text":"<p>         Bases: <code>Block</code></p> <p>Block used to manage Cosmos DB authentication with Azure. Azure authentication is handled via the <code>azure</code> module through a connection string.</p> <p>Parameters:</p> Name Type Description Default <code>connection_string</code> <p>Includes the authorization information required.</p> required Example <p>Load stored Azure Cosmos DB credentials: <pre><code>from prefect_azure import AzureCosmosDbCredentials\nazure_credentials_block = AzureCosmosDbCredentials.load(\"BLOCK_NAME\")\n</code></pre></p> Source code in <code>prefect_azure/credentials.py</code> <pre><code>class AzureCosmosDbCredentials(Block):\n\"\"\"\n    Block used to manage Cosmos DB authentication with Azure.\n    Azure authentication is handled via the `azure` module through\n    a connection string.\n\n    Args:\n        connection_string: Includes the authorization information required.\n\n    Example:\n        Load stored Azure Cosmos DB credentials:\n        ```python\n        from prefect_azure import AzureCosmosDbCredentials\n        azure_credentials_block = AzureCosmosDbCredentials.load(\"BLOCK_NAME\")\n        ```\n    \"\"\"\n\n    _block_type_name = \"Azure Cosmos DB Credentials\"\n    _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/6AiQ6HRIft8TspZH7AfyZg/39fd82bdbb186db85560f688746c8cdd/azure.png?h=250\"  # noqa\n    _documentation_url = \"https://prefecthq.github.io/prefect-azure/credentials/#prefect_azure.credentials.AzureCosmosDbCredentials\"  # noqa\n\n    connection_string: SecretStr = Field(\n        default=..., description=\"Includes the authorization information required.\"\n    )\n\n    @_raise_help_msg(\"cosmos_db\")\n    def get_client(self) -&gt; \"CosmosClient\":\n\"\"\"\n        Returns an authenticated Cosmos client that can be used to create\n        other clients for Azure services.\n\n        Example:\n            Create an authorized Cosmos session\n            ```python\n            import os\n            from prefect import flow\n            from prefect_azure import AzureCosmosDbCredentials\n\n            @flow\n            def example_get_client_flow():\n                connection_string = os.getenv(\"AZURE_COSMOS_CONNECTION_STRING\")\n                azure_credentials = AzureCosmosDbCredentials(\n                    connection_string=connection_string,\n                )\n                cosmos_client = azure_credentials.get_client()\n                return cosmos_client\n\n            example_get_client_flow()\n            ```\n        \"\"\"\n        return CosmosClient.from_connection_string(\n            self.connection_string.get_secret_value()\n        )\n\n    def get_database_client(self, database: str) -&gt; \"DatabaseProxy\":\n\"\"\"\n        Returns an authenticated Database client.\n\n        Args:\n            database: Name of the database.\n\n        Example:\n            Create an authorized Cosmos session\n            ```python\n            import os\n            from prefect import flow\n            from prefect_azure import AzureCosmosDbCredentials\n\n            @flow\n            def example_get_client_flow():\n                connection_string = os.getenv(\"AZURE_COSMOS_CONNECTION_STRING\")\n                azure_credentials = AzureCosmosDbCredentials(\n                    connection_string=connection_string,\n                )\n                cosmos_client = azure_credentials.get_database_client()\n                return cosmos_client\n\n            example_get_database_client_flow()\n            ```\n        \"\"\"\n        cosmos_client = self.get_client()\n        database_client = cosmos_client.get_database_client(database=database)\n        return database_client\n\n    def get_container_client(self, container: str, database: str) -&gt; \"ContainerProxy\":\n\"\"\"\n        Returns an authenticated Container client used for querying.\n\n        Args:\n            container: Name of the Cosmos DB container to retrieve from.\n            database: Name of the Cosmos DB database.\n\n        Example:\n            Create an authorized Container session\n            ```python\n            import os\n            from prefect import flow\n            from prefect_azure import AzureBlobStorageCredentials\n\n            @flow\n            def example_get_container_client_flow():\n                connection_string = os.getenv(\"AZURE_COSMOS_CONNECTION_STRING\")\n                azure_credentials = AzureCosmosDbCredentials(\n                    connection_string=connection_string,\n                )\n                container_client = azure_credentials.get_container_client(container)\n                return container_client\n\n            example_get_container_client_flow()\n            ```\n        \"\"\"\n        database_client = self.get_database_client(database)\n        container_client = database_client.get_container_client(container=container)\n        return container_client\n</code></pre>"},{"location":"credentials/#prefect_azure.credentials.AzureCosmosDbCredentials-functions","title":"Functions","text":""},{"location":"credentials/#prefect_azure.credentials.AzureCosmosDbCredentials.get_client","title":"<code>get_client()</code>","text":"<p>Returns an authenticated Cosmos client that can be used to create other clients for Azure services.</p> Example <p>Create an authorized Cosmos session <pre><code>import os\nfrom prefect import flow\nfrom prefect_azure import AzureCosmosDbCredentials\n\n@flow\ndef example_get_client_flow():\n    connection_string = os.getenv(\"AZURE_COSMOS_CONNECTION_STRING\")\n    azure_credentials = AzureCosmosDbCredentials(\n        connection_string=connection_string,\n    )\n    cosmos_client = azure_credentials.get_client()\n    return cosmos_client\n\nexample_get_client_flow()\n</code></pre></p> Source code in <code>prefect_azure/credentials.py</code> <pre><code>@_raise_help_msg(\"cosmos_db\")\ndef get_client(self) -&gt; \"CosmosClient\":\n\"\"\"\n    Returns an authenticated Cosmos client that can be used to create\n    other clients for Azure services.\n\n    Example:\n        Create an authorized Cosmos session\n        ```python\n        import os\n        from prefect import flow\n        from prefect_azure import AzureCosmosDbCredentials\n\n        @flow\n        def example_get_client_flow():\n            connection_string = os.getenv(\"AZURE_COSMOS_CONNECTION_STRING\")\n            azure_credentials = AzureCosmosDbCredentials(\n                connection_string=connection_string,\n            )\n            cosmos_client = azure_credentials.get_client()\n            return cosmos_client\n\n        example_get_client_flow()\n        ```\n    \"\"\"\n    return CosmosClient.from_connection_string(\n        self.connection_string.get_secret_value()\n    )\n</code></pre>"},{"location":"credentials/#prefect_azure.credentials.AzureCosmosDbCredentials.get_container_client","title":"<code>get_container_client(container, database)</code>","text":"<p>Returns an authenticated Container client used for querying.</p> <p>Parameters:</p> Name Type Description Default <code>container</code> <code>str</code> <p>Name of the Cosmos DB container to retrieve from.</p> required <code>database</code> <code>str</code> <p>Name of the Cosmos DB database.</p> required Example <p>Create an authorized Container session <pre><code>import os\nfrom prefect import flow\nfrom prefect_azure import AzureBlobStorageCredentials\n\n@flow\ndef example_get_container_client_flow():\n    connection_string = os.getenv(\"AZURE_COSMOS_CONNECTION_STRING\")\n    azure_credentials = AzureCosmosDbCredentials(\n        connection_string=connection_string,\n    )\n    container_client = azure_credentials.get_container_client(container)\n    return container_client\n\nexample_get_container_client_flow()\n</code></pre></p> Source code in <code>prefect_azure/credentials.py</code> <pre><code>def get_container_client(self, container: str, database: str) -&gt; \"ContainerProxy\":\n\"\"\"\n    Returns an authenticated Container client used for querying.\n\n    Args:\n        container: Name of the Cosmos DB container to retrieve from.\n        database: Name of the Cosmos DB database.\n\n    Example:\n        Create an authorized Container session\n        ```python\n        import os\n        from prefect import flow\n        from prefect_azure import AzureBlobStorageCredentials\n\n        @flow\n        def example_get_container_client_flow():\n            connection_string = os.getenv(\"AZURE_COSMOS_CONNECTION_STRING\")\n            azure_credentials = AzureCosmosDbCredentials(\n                connection_string=connection_string,\n            )\n            container_client = azure_credentials.get_container_client(container)\n            return container_client\n\n        example_get_container_client_flow()\n        ```\n    \"\"\"\n    database_client = self.get_database_client(database)\n    container_client = database_client.get_container_client(container=container)\n    return container_client\n</code></pre>"},{"location":"credentials/#prefect_azure.credentials.AzureCosmosDbCredentials.get_database_client","title":"<code>get_database_client(database)</code>","text":"<p>Returns an authenticated Database client.</p> <p>Parameters:</p> Name Type Description Default <code>database</code> <code>str</code> <p>Name of the database.</p> required Example <p>Create an authorized Cosmos session <pre><code>import os\nfrom prefect import flow\nfrom prefect_azure import AzureCosmosDbCredentials\n\n@flow\ndef example_get_client_flow():\n    connection_string = os.getenv(\"AZURE_COSMOS_CONNECTION_STRING\")\n    azure_credentials = AzureCosmosDbCredentials(\n        connection_string=connection_string,\n    )\n    cosmos_client = azure_credentials.get_database_client()\n    return cosmos_client\n\nexample_get_database_client_flow()\n</code></pre></p> Source code in <code>prefect_azure/credentials.py</code> <pre><code>def get_database_client(self, database: str) -&gt; \"DatabaseProxy\":\n\"\"\"\n    Returns an authenticated Database client.\n\n    Args:\n        database: Name of the database.\n\n    Example:\n        Create an authorized Cosmos session\n        ```python\n        import os\n        from prefect import flow\n        from prefect_azure import AzureCosmosDbCredentials\n\n        @flow\n        def example_get_client_flow():\n            connection_string = os.getenv(\"AZURE_COSMOS_CONNECTION_STRING\")\n            azure_credentials = AzureCosmosDbCredentials(\n                connection_string=connection_string,\n            )\n            cosmos_client = azure_credentials.get_database_client()\n            return cosmos_client\n\n        example_get_database_client_flow()\n        ```\n    \"\"\"\n    cosmos_client = self.get_client()\n    database_client = cosmos_client.get_database_client(database=database)\n    return database_client\n</code></pre>"},{"location":"credentials/#prefect_azure.credentials.AzureMlCredentials","title":"<code>AzureMlCredentials</code>","text":"<p>         Bases: <code>Block</code></p> <p>Block used to manage authentication with AzureML. Azure authentication is handled via the <code>azure</code> module.</p> <p>Parameters:</p> Name Type Description Default <code>tenant_id</code> <p>The active directory tenant that the service identity belongs to.</p> required <code>service_principal_id</code> <p>The service principal ID.</p> required <code>service_principal_password</code> <p>The service principal password/key.</p> required <code>subscription_id</code> <p>The Azure subscription ID containing the workspace.</p> required <code>resource_group</code> <p>The resource group containing the workspace.</p> required <code>workspace_name</code> <p>The existing workspace name.</p> required Example <p>Load stored AzureML credentials: <pre><code>from prefect_azure import AzureMlCredentials\nazure_ml_credentials_block = AzureMlCredentials.load(\"BLOCK_NAME\")\n</code></pre></p> Source code in <code>prefect_azure/credentials.py</code> <pre><code>class AzureMlCredentials(Block):\n\"\"\"\n    Block used to manage authentication with AzureML. Azure authentication is\n    handled via the `azure` module.\n\n    Args:\n        tenant_id: The active directory tenant that the service identity belongs to.\n        service_principal_id: The service principal ID.\n        service_principal_password: The service principal password/key.\n        subscription_id: The Azure subscription ID containing the workspace.\n        resource_group: The resource group containing the workspace.\n        workspace_name: The existing workspace name.\n\n    Example:\n        Load stored AzureML credentials:\n        ```python\n        from prefect_azure import AzureMlCredentials\n        azure_ml_credentials_block = AzureMlCredentials.load(\"BLOCK_NAME\")\n        ```\n    \"\"\"\n\n    _block_type_name = \"AzureML Credentials\"\n    _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/6AiQ6HRIft8TspZH7AfyZg/39fd82bdbb186db85560f688746c8cdd/azure.png?h=250\"  # noqa\n    _documentation_url = \"https://prefecthq.github.io/prefect-azure/credentials/#prefect_azure.credentials.AzureMlCredentials\"  # noqa\n\n    tenant_id: str = Field(\n        default=...,\n        description=\"The active directory tenant that the service identity belongs to.\",\n    )\n    service_principal_id: str = Field(\n        default=..., description=\"The service principal ID.\"\n    )\n    service_principal_password: SecretStr = Field(\n        default=..., description=\"The service principal password/key.\"\n    )\n    subscription_id: str = Field(\n        default=..., description=\"The Azure subscription ID containing the workspace.\"\n    )\n    resource_group: str = Field(\n        default=..., description=\"The resource group containing the workspace.\"\n    )\n    workspace_name: str = Field(default=..., description=\"The existing workspace name.\")\n\n    @_raise_help_msg(\"ml_datastore\")\n    def get_workspace(self) -&gt; \"Workspace\":\n\"\"\"\n        Returns an authenticated base Workspace that can be used in\n        Azure's Datasets and Datastores.\n\n        Example:\n            Create an authorized workspace\n            ```python\n            import os\n            from prefect import flow\n            from prefect_azure import AzureMlCredentials\n            @flow\n            def example_get_workspace_flow():\n                azure_credentials = AzureMlCredentials(\n                    tenant_id=\"tenant_id\",\n                    service_principal_id=\"service_principal_id\",\n                    service_principal_password=\"service_principal_password\",\n                    subscription_id=\"subscription_id\",\n                    resource_group=\"resource_group\",\n                    workspace_name=\"workspace_name\"\n                )\n                workspace_client = azure_credentials.get_workspace()\n                return workspace_client\n            example_get_workspace_flow()\n            ```\n        \"\"\"\n        service_principal_password = self.service_principal_password.get_secret_value()\n        service_principal_authentication = ServicePrincipalAuthentication(\n            tenant_id=self.tenant_id,\n            service_principal_id=self.service_principal_id,\n            service_principal_password=service_principal_password,\n        )\n\n        workspace = Workspace(\n            subscription_id=self.subscription_id,\n            resource_group=self.resource_group,\n            workspace_name=self.workspace_name,\n            auth=service_principal_authentication,\n        )\n\n        return workspace\n</code></pre>"},{"location":"credentials/#prefect_azure.credentials.AzureMlCredentials-functions","title":"Functions","text":""},{"location":"credentials/#prefect_azure.credentials.AzureMlCredentials.get_workspace","title":"<code>get_workspace()</code>","text":"<p>Returns an authenticated base Workspace that can be used in Azure's Datasets and Datastores.</p> Example <p>Create an authorized workspace <pre><code>import os\nfrom prefect import flow\nfrom prefect_azure import AzureMlCredentials\n@flow\ndef example_get_workspace_flow():\n    azure_credentials = AzureMlCredentials(\n        tenant_id=\"tenant_id\",\n        service_principal_id=\"service_principal_id\",\n        service_principal_password=\"service_principal_password\",\n        subscription_id=\"subscription_id\",\n        resource_group=\"resource_group\",\n        workspace_name=\"workspace_name\"\n    )\n    workspace_client = azure_credentials.get_workspace()\n    return workspace_client\nexample_get_workspace_flow()\n</code></pre></p> Source code in <code>prefect_azure/credentials.py</code> <pre><code>@_raise_help_msg(\"ml_datastore\")\ndef get_workspace(self) -&gt; \"Workspace\":\n\"\"\"\n    Returns an authenticated base Workspace that can be used in\n    Azure's Datasets and Datastores.\n\n    Example:\n        Create an authorized workspace\n        ```python\n        import os\n        from prefect import flow\n        from prefect_azure import AzureMlCredentials\n        @flow\n        def example_get_workspace_flow():\n            azure_credentials = AzureMlCredentials(\n                tenant_id=\"tenant_id\",\n                service_principal_id=\"service_principal_id\",\n                service_principal_password=\"service_principal_password\",\n                subscription_id=\"subscription_id\",\n                resource_group=\"resource_group\",\n                workspace_name=\"workspace_name\"\n            )\n            workspace_client = azure_credentials.get_workspace()\n            return workspace_client\n        example_get_workspace_flow()\n        ```\n    \"\"\"\n    service_principal_password = self.service_principal_password.get_secret_value()\n    service_principal_authentication = ServicePrincipalAuthentication(\n        tenant_id=self.tenant_id,\n        service_principal_id=self.service_principal_id,\n        service_principal_password=service_principal_password,\n    )\n\n    workspace = Workspace(\n        subscription_id=self.subscription_id,\n        resource_group=self.resource_group,\n        workspace_name=self.workspace_name,\n        auth=service_principal_authentication,\n    )\n\n    return workspace\n</code></pre>"},{"location":"ml_datastore/","title":"ML Datastore","text":""},{"location":"ml_datastore/#prefect_azure.ml_datastore","title":"<code>prefect_azure.ml_datastore</code>","text":"<p>Tasks for interacting with Azure ML Datastore</p>"},{"location":"ml_datastore/#prefect_azure.ml_datastore-classes","title":"Classes","text":""},{"location":"ml_datastore/#prefect_azure.ml_datastore-functions","title":"Functions","text":""},{"location":"ml_datastore/#prefect_azure.ml_datastore.ml_get_datastore","title":"<code>ml_get_datastore(ml_credentials, datastore_name=None)</code>  <code>async</code>","text":"<p>Gets the Datastore within the Workspace.</p> <p>Parameters:</p> Name Type Description Default <code>ml_credentials</code> <code>AzureMlCredentials</code> <p>Credentials to use for authentication with Azure.</p> required <code>datastore_name</code> <code>str</code> <p>The name of the Datastore. If <code>None</code>, then the default Datastore of the Workspace is returned.</p> <code>None</code> Example <p>Get Datastore object <pre><code>from prefect import flow\nfrom prefect_azure import AzureMlCredentials\nfrom prefect_azure.ml_datastore import ml_get_datastore\n\n@flow\ndef example_ml_get_datastore_flow():\n    ml_credentials = AzureMlCredentials(\n        tenant_id=\"tenant_id\",\n        service_principal_id=\"service_principal_id\",\n        service_principal_password=\"service_principal_password\",\n        subscription_id=\"subscription_id\",\n        resource_group=\"resource_group\",\n        workspace_name=\"workspace_name\",\n    )\n    results = ml_get_datastore(ml_credentials, datastore_name=\"datastore_name\")\n    return results\n</code></pre></p> Source code in <code>prefect_azure/ml_datastore.py</code> <pre><code>@task\nasync def ml_get_datastore(\n    ml_credentials: \"AzureMlCredentials\", datastore_name: str = None\n) -&gt; Datastore:\n\"\"\"\n    Gets the Datastore within the Workspace.\n\n    Args:\n        ml_credentials: Credentials to use for authentication with Azure.\n        datastore_name: The name of the Datastore. If `None`, then the\n            default Datastore of the Workspace is returned.\n\n    Example:\n        Get Datastore object\n        ```python\n        from prefect import flow\n        from prefect_azure import AzureMlCredentials\n        from prefect_azure.ml_datastore import ml_get_datastore\n\n        @flow\n        def example_ml_get_datastore_flow():\n            ml_credentials = AzureMlCredentials(\n                tenant_id=\"tenant_id\",\n                service_principal_id=\"service_principal_id\",\n                service_principal_password=\"service_principal_password\",\n                subscription_id=\"subscription_id\",\n                resource_group=\"resource_group\",\n                workspace_name=\"workspace_name\",\n            )\n            results = ml_get_datastore(ml_credentials, datastore_name=\"datastore_name\")\n            return results\n        ```\n    \"\"\"\n    logger = get_run_logger()\n    logger.info(\"Getting datastore %s\", datastore_name)\n\n    result = await _get_datastore(ml_credentials, datastore_name)\n    return result\n</code></pre>"},{"location":"ml_datastore/#prefect_azure.ml_datastore.ml_list_datastores","title":"<code>ml_list_datastores(ml_credentials)</code>","text":"<p>Lists the Datastores in the Workspace.</p> <p>Parameters:</p> Name Type Description Default <code>ml_credentials</code> <code>AzureMlCredentials</code> <p>Credentials to use for authentication with Azure.</p> required Example <p>List Datastore objects <pre><code>from prefect import flow\nfrom prefect_azure import AzureMlCredentials\nfrom prefect_azure.ml_datastore import ml_list_datastores\n\n@flow\ndef example_ml_list_datastores_flow():\n    ml_credentials = AzureMlCredentials(\n        tenant_id=\"tenant_id\",\n        service_principal_id=\"service_principal_id\",\n        service_principal_password=\"service_principal_password\",\n        subscription_id=\"subscription_id\",\n        resource_group=\"resource_group\",\n        workspace_name=\"workspace_name\",\n    )\n    results = ml_list_datastores(ml_credentials)\n    return results\n</code></pre></p> Source code in <code>prefect_azure/ml_datastore.py</code> <pre><code>@task\ndef ml_list_datastores(ml_credentials: \"AzureMlCredentials\") -&gt; Dict:\n\"\"\"\n    Lists the Datastores in the Workspace.\n\n    Args:\n        ml_credentials: Credentials to use for authentication with Azure.\n\n    Example:\n        List Datastore objects\n        ```python\n        from prefect import flow\n        from prefect_azure import AzureMlCredentials\n        from prefect_azure.ml_datastore import ml_list_datastores\n\n        @flow\n        def example_ml_list_datastores_flow():\n            ml_credentials = AzureMlCredentials(\n                tenant_id=\"tenant_id\",\n                service_principal_id=\"service_principal_id\",\n                service_principal_password=\"service_principal_password\",\n                subscription_id=\"subscription_id\",\n                resource_group=\"resource_group\",\n                workspace_name=\"workspace_name\",\n            )\n            results = ml_list_datastores(ml_credentials)\n            return results\n        ```\n    \"\"\"\n    logger = get_run_logger()\n    logger.info(\"Listing datastores\")\n\n    workspace = ml_credentials.get_workspace()\n    results = workspace.datastores\n    return results\n</code></pre>"},{"location":"ml_datastore/#prefect_azure.ml_datastore.ml_register_datastore_blob_container","title":"<code>ml_register_datastore_blob_container(container_name, ml_credentials, blob_storage_credentials, datastore_name=None, create_container_if_not_exists=False, overwrite=False, set_as_default=False)</code>  <code>async</code>","text":"<p>Registers a Azure Blob Storage container as a Datastore in a Azure ML service Workspace.</p> <p>Parameters:</p> Name Type Description Default <code>container_name</code> <code>str</code> <p>The name of the container.</p> required <code>ml_credentials</code> <code>AzureMlCredentials</code> <p>Credentials to use for authentication with Azure ML.</p> required <code>blob_storage_credentials</code> <code>AzureBlobStorageCredentials</code> <p>Credentials to use for authentication with Azure Blob Storage.</p> required <code>datastore_name</code> <code>str</code> <p>The name of the datastore. If not defined, the container name will be used.</p> <code>None</code> <code>create_container_if_not_exists</code> <code>bool</code> <p>Create a container, if one does not exist with the given name.</p> <code>False</code> <code>overwrite</code> <code>bool</code> <p>Overwrite an existing datastore. If the datastore does not exist, it will be created.</p> <code>False</code> <code>set_as_default</code> <code>bool</code> <p>Set the created Datastore as the default datastore for the Workspace.</p> <code>False</code> Example <p>Upload Datastore object <pre><code>from prefect import flow\nfrom prefect_azure import AzureMlCredentials\nfrom prefect_azure.ml_datastore import ml_register_datastore_blob_container\n\n@flow\ndef example_ml_register_datastore_blob_container_flow():\n    ml_credentials = AzureMlCredentials(\n        tenant_id=\"tenant_id\",\n        service_principal_id=\"service_principal_id\",\n        service_principal_password=\"service_principal_password\",\n        subscription_id=\"subscription_id\",\n        resource_group=\"resource_group\",\n        workspace_name=\"workspace_name\",\n    )\n    blob_storage_credentials = AzureBlobStorageCredentials(\"connection_string\")\n    result = ml_register_datastore_blob_container(\n        \"container\",\n        ml_credentials,\n        blob_storage_credentials,\n        datastore_name=\"datastore_name\"\n    )\n    return result\n</code></pre></p> Source code in <code>prefect_azure/ml_datastore.py</code> <pre><code>@task\nasync def ml_register_datastore_blob_container(\n    container_name: str,\n    ml_credentials: \"AzureMlCredentials\",\n    blob_storage_credentials: \"AzureBlobStorageCredentials\",\n    datastore_name: str = None,\n    create_container_if_not_exists: bool = False,\n    overwrite: bool = False,\n    set_as_default: bool = False,\n) -&gt; \"AzureBlobDatastore\":\n\"\"\"\n    Registers a Azure Blob Storage container as a\n    Datastore in a Azure ML service Workspace.\n\n    Args:\n        container_name: The name of the container.\n        ml_credentials: Credentials to use for authentication with Azure ML.\n        blob_storage_credentials: Credentials to use for authentication\n            with Azure Blob Storage.\n        datastore_name: The name of the datastore. If not defined, the\n            container name will be used.\n        create_container_if_not_exists: Create a container, if one does not\n            exist with the given name.\n        overwrite: Overwrite an existing datastore. If\n            the datastore does not exist, it will be created.\n        set_as_default: Set the created Datastore as the default datastore\n            for the Workspace.\n\n    Example:\n        Upload Datastore object\n        ```python\n        from prefect import flow\n        from prefect_azure import AzureMlCredentials\n        from prefect_azure.ml_datastore import ml_register_datastore_blob_container\n\n        @flow\n        def example_ml_register_datastore_blob_container_flow():\n            ml_credentials = AzureMlCredentials(\n                tenant_id=\"tenant_id\",\n                service_principal_id=\"service_principal_id\",\n                service_principal_password=\"service_principal_password\",\n                subscription_id=\"subscription_id\",\n                resource_group=\"resource_group\",\n                workspace_name=\"workspace_name\",\n            )\n            blob_storage_credentials = AzureBlobStorageCredentials(\"connection_string\")\n            result = ml_register_datastore_blob_container(\n                \"container\",\n                ml_credentials,\n                blob_storage_credentials,\n                datastore_name=\"datastore_name\"\n            )\n            return result\n        ```\n    \"\"\"\n    logger = get_run_logger()\n\n    if datastore_name is None:\n        datastore_name = container_name\n\n    logger.info(\n        \"Registering %s container into %s datastore\", container_name, datastore_name\n    )\n\n    workspace = ml_credentials.get_workspace()\n    async with blob_storage_credentials.get_client() as blob_service_client:\n        credential = blob_service_client.credential\n        account_name = credential.account_name\n        account_key = credential.account_key\n\n    partial_register = partial(\n        Datastore.register_azure_blob_container,\n        workspace=workspace,\n        datastore_name=datastore_name,\n        container_name=container_name,\n        account_name=account_name,\n        account_key=account_key,\n        overwrite=overwrite,\n        create_if_not_exists=create_container_if_not_exists,\n    )\n    result = await to_thread.run_sync(partial_register)\n\n    if set_as_default:\n        result.set_as_default()\n\n    return result\n</code></pre>"},{"location":"ml_datastore/#prefect_azure.ml_datastore.ml_upload_datastore","title":"<code>ml_upload_datastore(path, ml_credentials, target_path=None, relative_root=None, datastore_name=None, overwrite=False)</code>  <code>async</code>","text":"<p>Uploads local files to a Datastore.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Union[str, Path, List[Union[str, Path]]]</code> <p>The path to a single file, single directory, or a list of path to files to be uploaded.</p> required <code>ml_credentials</code> <code>AzureMlCredentials</code> <p>Credentials to use for authentication with Azure.</p> required <code>target_path</code> <code>Union[str, Path]</code> <p>The location in the blob container to upload to. If None, then upload to root.</p> <code>None</code> <code>relative_root</code> <code>Union[str, Path]</code> <p>The root from which is used to determine the path of the files in the blob. For example, if we upload /path/to/file.txt, and we define base path to be /path, when file.txt is uploaded to the blob storage, it will have the path of /to/file.txt.</p> <code>None</code> <code>datastore_name</code> <code>str</code> <p>The name of the Datastore. If <code>None</code>, then the default Datastore of the Workspace is returned.</p> <code>None</code> <code>overwrite</code> <code>bool</code> <p>Overwrite existing file(s).</p> <code>False</code> Example <p>Upload Datastore object <pre><code>from prefect import flow\nfrom prefect_azure import AzureMlCredentials\nfrom prefect_azure.ml_datastore import ml_upload_datastore\n\n@flow\ndef example_ml_upload_datastore_flow():\n    ml_credentials = AzureMlCredentials(\n        tenant_id=\"tenant_id\",\n        service_principal_id=\"service_principal_id\",\n        service_principal_password=\"service_principal_password\",\n        subscription_id=\"subscription_id\",\n        resource_group=\"resource_group\",\n        workspace_name=\"workspace_name\",\n    )\n    result = ml_upload_datastore(\n        \"path/to/dir/or/file\",\n        ml_credentials,\n        datastore_name=\"datastore_name\"\n    )\n    return result\n</code></pre></p> Source code in <code>prefect_azure/ml_datastore.py</code> <pre><code>@task\nasync def ml_upload_datastore(\n    path: Union[str, Path, List[Union[str, Path]]],\n    ml_credentials: \"AzureMlCredentials\",\n    target_path: Union[str, Path] = None,\n    relative_root: Union[str, Path] = None,\n    datastore_name: str = None,\n    overwrite: bool = False,\n) -&gt; \"DataReference\":\n\"\"\"\n    Uploads local files to a Datastore.\n\n    Args:\n        path: The path to a single file, single directory,\n            or a list of path to files to be uploaded.\n        ml_credentials: Credentials to use for authentication with Azure.\n        target_path: The location in the blob container to upload to. If\n            None, then upload to root.\n        relative_root: The root from which is used to determine the path of\n            the files in the blob. For example, if we upload /path/to/file.txt,\n            and we define base path to be /path, when file.txt is uploaded\n            to the blob storage, it will have the path of /to/file.txt.\n        datastore_name: The name of the Datastore. If `None`, then the\n            default Datastore of the Workspace is returned.\n        overwrite: Overwrite existing file(s).\n\n    Example:\n        Upload Datastore object\n        ```python\n        from prefect import flow\n        from prefect_azure import AzureMlCredentials\n        from prefect_azure.ml_datastore import ml_upload_datastore\n\n        @flow\n        def example_ml_upload_datastore_flow():\n            ml_credentials = AzureMlCredentials(\n                tenant_id=\"tenant_id\",\n                service_principal_id=\"service_principal_id\",\n                service_principal_password=\"service_principal_password\",\n                subscription_id=\"subscription_id\",\n                resource_group=\"resource_group\",\n                workspace_name=\"workspace_name\",\n            )\n            result = ml_upload_datastore(\n                \"path/to/dir/or/file\",\n                ml_credentials,\n                datastore_name=\"datastore_name\"\n            )\n            return result\n        ```\n    \"\"\"\n    logger = get_run_logger()\n    logger.info(\"Uploading %s into %s datastore\", path, datastore_name)\n\n    datastore = await _get_datastore(ml_credentials, datastore_name)\n\n    if isinstance(path, Path):\n        path = str(path)\n    elif isinstance(path, list) and isinstance(path[0], Path):\n        path = [str(p) for p in path]\n\n    if isinstance(target_path, Path):\n        target_path = str(target_path)\n\n    if isinstance(relative_root, Path):\n        relative_root = str(relative_root)\n\n    if isinstance(path, str) and os.path.isdir(path):\n        partial_upload = partial(\n            datastore.upload,\n            src_dir=path,\n            target_path=target_path,\n            overwrite=overwrite,\n            show_progress=False,\n        )\n    else:\n        partial_upload = partial(\n            datastore.upload_files,\n            files=path if isinstance(path, list) else [path],\n            relative_root=relative_root,\n            target_path=target_path,\n            overwrite=overwrite,\n            show_progress=False,\n        )\n\n    result = await to_thread.run_sync(partial_upload)\n    return result\n</code></pre>"},{"location":"deployments/steps/","title":"Steps","text":""},{"location":"deployments/steps/#prefect_azure.deployments.steps","title":"<code>prefect_azure.deployments.steps</code>","text":"<p>Prefect deployment steps for code storage and retrieval in Azure Blob Storage.</p> <p>These steps can be used in a <code>prefect.yaml</code> file to define the default  push and pull steps for a group of deployments, or they can be used to  define the push and pull steps for a specific deployment.</p> <p>Example</p> <p>Sample <code>prefect.yaml</code> file that is configured to push and pull to and  from an Azure Blob Storage container:</p> <pre><code>prefect_version: ...\nname: ...\n\npush:\n- prefect_azure.deployments.steps.push_to_azure_blob_storage:\nrequires: prefect-azure[blob_storage]\ncontainer: my-container\nfolder: my-folder\ncredentials: \"{{ prefect.blocks.azure-blob-storage-credentials.dev-credentials }}\"\n\npull:\n- prefect_azure.deployments.steps.pull_from_azure_blob_storage:\nrequires: prefect-azure[blob_storage]\ncontainer: \"{{ container }}\"\nfolder: \"{{ folder }}\"\ncredentials: \"{{ prefect.blocks.azure-blob-storage-credentials.dev-credentials }}\"\n</code></pre> <p>For more information about using deployment steps, check out out the Prefect docs.</p>"},{"location":"deployments/steps/#prefect_azure.deployments.steps-functions","title":"Functions","text":""},{"location":"deployments/steps/#prefect_azure.deployments.steps.pull_from_azure_blob_storage","title":"<code>pull_from_azure_blob_storage(container, folder, credentials)</code>","text":"<p>Pulls from an Azure Blob Storage container.</p> <p>Parameters:</p> Name Type Description Default <code>container</code> <code>str</code> <p>The name of the container to pull files from</p> required <code>folder</code> <code>str</code> <p>The folder within the container to pull from</p> required <code>credentials</code> <code>Dict[str, str]</code> <p>A dictionary of credentials with keys <code>connection_string</code> or <code>account_url</code> and values of the corresponding connection string or account url. If both are provided, <code>connection_string</code> will be used.</p> required Example <p>Pull from an Azure Blob Storage container using credentials stored in a block: <pre><code>pull:\n- prefect_azure.deployments.steps.pull_from_azure_blob_storage:\nrequires: prefect-azure[blob_storage]\ncontainer: my-container\nfolder: my-folder\ncredentials: \"{{ prefect.blocks.azure-blob-storage-credentials.dev-credentials }}\"\n</code></pre></p> <p>Pull from an Azure Blob Storage container using an account URL and default credentials: <pre><code>pull:\n- prefect_azure.deployments.steps.pull_from_azure_blob_storage:\nrequires: prefect-azure[blob_storage]\ncontainer: my-container\nfolder: my-folder\ncredentials:\naccount_url: https://myaccount.blob.core.windows.net/\n</code></pre></p> Source code in <code>prefect_azure/deployments/steps.py</code> <pre><code>def pull_from_azure_blob_storage(\n    container: str,\n    folder: str,\n    credentials: Dict[str, str],\n):\n\"\"\"\n    Pulls from an Azure Blob Storage container.\n\n    Args:\n        container: The name of the container to pull files from\n        folder: The folder within the container to pull from\n        credentials: A dictionary of credentials with keys `connection_string` or\n            `account_url` and values of the corresponding connection string or\n            account url. If both are provided, `connection_string` will be used.\n\n    Example:\n        Pull from an Azure Blob Storage container using credentials stored in\n        a block:\n        ```yaml\n        pull:\n            - prefect_azure.deployments.steps.pull_from_azure_blob_storage:\n                requires: prefect-azure[blob_storage]\n                container: my-container\n                folder: my-folder\n                credentials: \"{{ prefect.blocks.azure-blob-storage-credentials.dev-credentials }}\"\n        ```\n\n        Pull from an Azure Blob Storage container using an account URL and\n        default credentials:\n        ```yaml\n        pull:\n            - prefect_azure.deployments.steps.pull_from_azure_blob_storage:\n                requires: prefect-azure[blob_storage]\n                container: my-container\n                folder: my-folder\n                credentials:\n                    account_url: https://myaccount.blob.core.windows.net/\n        ```\n    \"\"\"  # noqa\n    local_path = Path.cwd()\n    if credentials.get(\"connection_string\") is not None:\n        container_client = ContainerClient.from_connection_string(\n            credentials[\"connection_string\"], container_name=container\n        )\n    elif credentials.get(\"account_url\") is not None:\n        container_client = ContainerClient(\n            account_url=credentials[\"account_url\"],\n            container_name=container,\n            credential=DefaultAzureCredential(),\n        )\n    else:\n        raise ValueError(\n            \"Credentials must contain either connection_string or account_url\"\n        )\n\n    with container_client as client:\n        for blob in client.list_blobs(name_starts_with=folder):\n            target = PurePosixPath(\n                local_path\n                / relative_path_to_current_platform(blob.name).relative_to(folder)\n            )\n            Path.mkdir(Path(target.parent), parents=True, exist_ok=True)\n            with open(target, \"wb\") as f:\n                client.download_blob(blob).readinto(f)\n\n    return {\n        \"container\": container,\n        \"folder\": folder,\n        \"directory\": local_path,\n    }\n</code></pre>"},{"location":"deployments/steps/#prefect_azure.deployments.steps.push_to_azure_blob_storage","title":"<code>push_to_azure_blob_storage(container, folder, credentials, ignore_file='.prefectignore')</code>","text":"<p>Pushes to an Azure Blob Storage container.</p> <p>Parameters:</p> Name Type Description Default <code>container</code> <code>str</code> <p>The name of the container to push files to</p> required <code>folder</code> <code>str</code> <p>The folder within the container to push to</p> required <code>credentials</code> <code>Dict[str, str]</code> <p>A dictionary of credentials with keys <code>connection_string</code> or <code>account_url</code> and values of the corresponding connection string or account url. If both are provided, <code>connection_string</code> will be used.</p> required <code>ignore_file</code> <code>Optional[str]</code> <p>The path to a file containing patterns of files to ignore when pushing to Azure Blob Storage. If not provided, the default <code>.prefectignore</code> file will be used.</p> <code>'.prefectignore'</code> Example <p>Push to an Azure Blob Storage container using credentials stored in a block: <pre><code>push:\n- prefect_azure.deployments.steps.push_to_azure_blob_storage:\nrequires: prefect-azure[blob_storage]\ncontainer: my-container\nfolder: my-folder\ncredentials: \"{{ prefect.blocks.azure-blob-storage-credentials.dev-credentials }}\"\n</code></pre></p> <p>Push to an Azure Blob Storage container using an account URL and default credentials: <pre><code>push:\n- prefect_azure.deployments.steps.push_to_azure_blob_storage:\nrequires: prefect-azure[blob_storage]\ncontainer: my-container\nfolder: my-folder\ncredentials:\naccount_url: https://myaccount.blob.core.windows.net/\n</code></pre></p> Source code in <code>prefect_azure/deployments/steps.py</code> <pre><code>def push_to_azure_blob_storage(\n    container: str,\n    folder: str,\n    credentials: Dict[str, str],\n    ignore_file: Optional[str] = \".prefectignore\",\n):\n\"\"\"\n    Pushes to an Azure Blob Storage container.\n\n    Args:\n        container: The name of the container to push files to\n        folder: The folder within the container to push to\n        credentials: A dictionary of credentials with keys `connection_string` or\n            `account_url` and values of the corresponding connection string or\n            account url. If both are provided, `connection_string` will be used.\n        ignore_file: The path to a file containing patterns of files to ignore when\n            pushing to Azure Blob Storage. If not provided, the default `.prefectignore`\n            file will be used.\n\n    Example:\n        Push to an Azure Blob Storage container using credentials stored in a\n        block:\n        ```yaml\n        push:\n            - prefect_azure.deployments.steps.push_to_azure_blob_storage:\n                requires: prefect-azure[blob_storage]\n                container: my-container\n                folder: my-folder\n                credentials: \"{{ prefect.blocks.azure-blob-storage-credentials.dev-credentials }}\"\n        ```\n\n        Push to an Azure Blob Storage container using an account URL and\n        default credentials:\n        ```yaml\n        push:\n            - prefect_azure.deployments.steps.push_to_azure_blob_storage:\n                requires: prefect-azure[blob_storage]\n                container: my-container\n                folder: my-folder\n                credentials:\n                    account_url: https://myaccount.blob.core.windows.net/\n        ```\n    \"\"\"  # noqa\n    local_path = Path.cwd()\n    if credentials.get(\"connection_string\") is not None:\n        container_client = ContainerClient.from_connection_string(\n            credentials[\"connection_string\"], container_name=container\n        )\n    elif credentials.get(\"account_url\") is not None:\n        container_client = ContainerClient(\n            account_url=credentials[\"account_url\"],\n            container_name=container,\n            credential=DefaultAzureCredential(),\n        )\n    else:\n        raise ValueError(\n            \"Credentials must contain either connection_string or account_url\"\n        )\n\n    included_files = None\n    if ignore_file and Path(ignore_file).exists():\n        with open(ignore_file, \"r\") as f:\n            ignore_patterns = f.readlines()\n\n        included_files = filter_files(str(local_path), ignore_patterns)\n\n    with container_client as client:\n        for local_file_path in local_path.expanduser().rglob(\"*\"):\n            if (\n                included_files is not None\n                and str(local_file_path.relative_to(local_path)) not in included_files\n            ):\n                continue\n            elif not local_file_path.is_dir():\n                remote_file_path = Path(folder) / local_file_path.relative_to(\n                    local_path\n                )\n                with open(local_file_path, \"rb\") as f:\n                    client.upload_blob(str(remote_file_path), f, overwrite=True)\n\n    return {\n        \"container\": container,\n        \"folder\": folder,\n    }\n</code></pre>"}]}